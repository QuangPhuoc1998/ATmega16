
AVRASM ver. 2.1.30  E:\AVR\ATmega16\DKDC\Release\List\DKDC.asm Mon Apr 22 11:01:15 2019

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 12.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0137 	JMP  _tim1_capt_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 6947
00002b 2061
00002c 7274
00002d 3a69      	.DB  0x47,0x69,0x61,0x20,0x74,0x72,0x69,0x3A
00002e 0020
00002f 6f54
000030 2063
000031 6f64      	.DB  0x20,0x0,0x54,0x6F,0x63,0x20,0x64,0x6F
000032 203a
E:\AVR\ATmega16\DKDC\Release\List\DKDC.asm(1119): warning: .cseg .db misalignment - padding zero byte
000033 0000      	.DB  0x3A,0x20,0x0
                 
                 __GLOBAL_INI_TBL:
000034 000a      	.DW  0x0A
000035 0160      	.DW  _0x13
000036 0054      	.DW  _0x0*2
                 
000037 0009      	.DW  0x09
000038 016a      	.DW  _0x13+10
000039 005e      	.DW  _0x0*2+10
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 0068 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * ADC.c
                 ; *
                 ; * Created: 12/04/2019 20:44:02
                 ; * Author: ADMIN
                 ; */
                 ;
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "lcd4.h"
                 ;
                 ;void ADC_Init();
                 ;unsigned int Read_ADC(unsigned char channel);
                 ;void PWM_Init();
                 ;void PWM_Duty(unsigned char duty);
                 ;void Capture_Init();
                 ;void main(void)
                 ; 0000 0011 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0012 // khai bao bien
                 ; 0000 0013 unsigned int c, cL, cH;
                 ; 0000 0014 unsigned int vL, vH;
                 ; 0000 0015 unsigned long int v, V;
                 ; 0000 0016 //_______
                 ; 0000 0017 unsigned long int a;
                 ; 0000 0018 //_______
                 ; 0000 0019 // cau hinh port
                 ; 0000 001A DDRA.0 = 0; // channel ADC
000068 9760      	SBIW R28,16
                 ;	c -> R16,R17
                 ;	cL -> R18,R19
                 ;	cH -> R20,R21
                 ;	vL -> Y+14
                 ;	vH -> Y+12
                 ;	v -> Y+8
                 ;	V -> Y+4
                 ;	a -> Y+0
000069 98d0      	CBI  0x1A,0
                 ; 0000 001B DDRB.3 = 1; // channel PWM
00006a 9abb      	SBI  0x17,3
                 ; 0000 001C DDRC.0 = 1;
00006b 9aa0      	SBI  0x14,0
                 ; 0000 001D DDRC.1 = 1;
00006c 9aa1      	SBI  0x14,1
                 ; 0000 001E DDRC.2 = 1;
00006d 9aa2      	SBI  0x14,2
                 ; 0000 001F DDRC.3 = 1;
00006e 9aa3      	SBI  0x14,3
                 ; 0000 0020 DDRC.4 = 1;
00006f 9aa4      	SBI  0x14,4
                 ; 0000 0021 DDRC.5 = 1;
000070 9aa5      	SBI  0x14,5
                 ; 0000 0022 // chuong trinh con
                 ; 0000 0023 Lcd_Init();
000071 d115      	RCALL _Lcd_Init
                 ; 0000 0024 ADC_Init();
000072 d08f      	RCALL _ADC_Init
                 ; 0000 0025 PWM_Init();
000073 d0a0      	RCALL _PWM_Init
                 ; 0000 0026 Capture_Init();
000074 d0b4      	RCALL _Capture_Init
                 ; 0000 0027 #asm ("sei");
000075 9478      	sei
                 ; 0000 0028 // chuong trinh chinh
                 ; 0000 0029 Lcd_Write_String("Gia tri: ");
                +
000076 e6a0     +LDI R26 , LOW ( _0x13 + ( 0 ) )
000077 e0b1     +LDI R27 , HIGH ( _0x13 + ( 0 ) )
                 	__POINTW2MN _0x13,0
000078 d139      	RCALL _Lcd_Write_String
                 ; 0000 002A Lcd_Set_Cursor(2,1);
000079 e0e2      	LDI  R30,LOW(2)
00007a 93ea      	ST   -Y,R30
00007b e0a1      	LDI  R26,LOW(1)
00007c d0eb      	RCALL _Lcd_Set_Cursor
                 ; 0000 002B Lcd_Write_String("Toc do: ");
                +
00007d e6aa     +LDI R26 , LOW ( _0x13 + ( 10 ) )
00007e e0b1     +LDI R27 , HIGH ( _0x13 + ( 10 ) )
                 	__POINTW2MN _0x13,10
00007f d132      	RCALL _Lcd_Write_String
                 ; 0000 002C while (1)
                 _0x14:
                 ; 0000 002D     {
                 ; 0000 002E       a = Read_ADC(0);
000080 e0a0      	LDI  R26,LOW(0)
000081 d085      	RCALL _Read_ADC
000082 2766      	CLR  R22
000083 2777      	CLR  R23
000084 940e 0386 	CALL __PUTD1S0
                 ; 0000 002F       a = a*100/1023;
                +
000086 e6a4     +LDI R26 , LOW ( 0x64 )
000087 e0b0     +LDI R27 , HIGH ( 0x64 )
000088 e080     +LDI R24 , BYTE3 ( 0x64 )
000089 e090     +LDI R25 , BYTE4 ( 0x64 )
                 	__GETD2N 0x64
00008a 940e 0312 	CALL __MULD12U
00008c 01df      	MOVW R26,R30
00008d 01cb      	MOVW R24,R22
                +
00008e efef     +LDI R30 , LOW ( 0x3FF )
00008f e0f3     +LDI R31 , HIGH ( 0x3FF )
000090 e060     +LDI R22 , BYTE3 ( 0x3FF )
000091 e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
000092 940e 034a 	CALL __DIVD21U
000094 940e 0386 	CALL __PUTD1S0
                 ; 0000 0030       PWM_Duty(a);
000096 81a8      	LD   R26,Y
000097 d084      	RCALL _PWM_Duty
                 ; 0000 0031       // capture
                 ; 0000 0032       cH = ICR1H;
000098 b547      	IN   R20,39
000099 2755      	CLR  R21
                 ; 0000 0033       cL = ICR1L;
00009a b526      	IN   R18,38
00009b 2733      	CLR  R19
                 ; 0000 0034       c = (cH<<8)+cL;
00009c 2ff4      	MOV  R31,R20
00009d e0e0      	LDI  R30,LOW(0)
00009e 0fe2      	ADD  R30,R18
00009f 1ff3      	ADC  R31,R19
0000a0 018f      	MOVW R16,R30
                 ; 0000 0035       vL = cL*256*0.0625f;
0000a1 2ff2      	MOV  R31,R18
0000a2 d12b      	RCALL SUBOPT_0x0
0000a3 01de      	MOVW R26,R28
0000a4 961e      	ADIW R26,14
0000a5 940e 024c 	CALL __CFD1U
0000a7 93ed      	ST   X+,R30
0000a8 93fc      	ST   X,R31
                 ; 0000 0036       vH = cH*256*0.0625f;
0000a9 2ff4      	MOV  R31,R20
0000aa d123      	RCALL SUBOPT_0x0
0000ab 01de      	MOVW R26,R28
0000ac 961c      	ADIW R26,12
0000ad 940e 024c 	CALL __CFD1U
0000af 93ed      	ST   X+,R30
0000b0 93fc      	ST   X,R31
                 ; 0000 0037       V = (vH<<8)+vL;
0000b1 85fc      	LDD  R31,Y+12
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 85ae      	LDD  R26,Y+14
0000b4 85bf      	LDD  R27,Y+14+1
0000b5 0fea      	ADD  R30,R26
0000b6 1ffb      	ADC  R31,R27
0000b7 2766      	CLR  R22
0000b8 2777      	CLR  R23
                +
0000b9 83ec     +STD Y + 4 , R30
0000ba 83fd     +STD Y + 4 + 1 , R31
0000bb 836e     +STD Y + 4 + 2 , R22
0000bc 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 0038       v = 60000000/(V*24);
                +
0000bd e1a8     +LDI R26 , LOW ( 0x18 )
0000be e0b0     +LDI R27 , HIGH ( 0x18 )
0000bf e080     +LDI R24 , BYTE3 ( 0x18 )
0000c0 e090     +LDI R25 , BYTE4 ( 0x18 )
                 	__GETD2N 0x18
0000c1 940e 0312 	CALL __MULD12U
                +
0000c3 e0a0     +LDI R26 , LOW ( 0x3938700 )
0000c4 e8b7     +LDI R27 , HIGH ( 0x3938700 )
0000c5 e983     +LDI R24 , BYTE3 ( 0x3938700 )
0000c6 e093     +LDI R25 , BYTE4 ( 0x3938700 )
                 	__GETD2N 0x3938700
0000c7 940e 034a 	CALL __DIVD21U
                +
0000c9 87e8     +STD Y + 8 , R30
0000ca 87f9     +STD Y + 8 + 1 , R31
0000cb 876a     +STD Y + 8 + 2 , R22
0000cc 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0000 0039       //--------------
                 ; 0000 003A       // gia tri
                 ; 0000 003B       Lcd_Set_Cursor(1,10);
0000cd e0e1      	LDI  R30,LOW(1)
0000ce 93ea      	ST   -Y,R30
0000cf e0aa      	LDI  R26,LOW(10)
0000d0 d097      	RCALL _Lcd_Set_Cursor
                 ; 0000 003C       Lcd_Write_Char(a/1000+48);
0000d1 d108      	RCALL SUBOPT_0x1
0000d2 d10e      	RCALL SUBOPT_0x2
                 ; 0000 003D       Lcd_Write_Char((a%1000)/100+48);
0000d3 d106      	RCALL SUBOPT_0x1
0000d4 d111      	RCALL SUBOPT_0x3
0000d5 d115      	RCALL SUBOPT_0x4
0000d6 d10a      	RCALL SUBOPT_0x2
                 ; 0000 003E       Lcd_Write_Char((a%100)/10+48);
0000d7 940e 0381 	CALL __GETD2S0
0000d9 d111      	RCALL SUBOPT_0x4
0000da d10b      	RCALL SUBOPT_0x3
0000db d114      	RCALL SUBOPT_0x5
0000dc d104      	RCALL SUBOPT_0x2
                 ; 0000 003F       Lcd_Write_Char(a%10+48);
0000dd 940e 0381 	CALL __GETD2S0
0000df d115      	RCALL SUBOPT_0x6
                 ; 0000 0040       // toc do
                 ; 0000 0041       Lcd_Set_Cursor(2, 9);
0000e0 e0e2      	LDI  R30,LOW(2)
0000e1 93ea      	ST   -Y,R30
0000e2 e0a9      	LDI  R26,LOW(9)
0000e3 d084      	RCALL _Lcd_Set_Cursor
                 ; 0000 0042       Lcd_Write_Char(v/10000+48);
0000e4 d116      	RCALL SUBOPT_0x7
0000e5 d0fb      	RCALL SUBOPT_0x2
                 ; 0000 0043       Lcd_Write_Char((v%10000)/1000+48);
0000e6 d114      	RCALL SUBOPT_0x7
0000e7 d0fe      	RCALL SUBOPT_0x3
                +
0000e8 eee8     +LDI R30 , LOW ( 0x3E8 )
0000e9 e0f3     +LDI R31 , HIGH ( 0x3E8 )
0000ea e060     +LDI R22 , BYTE3 ( 0x3E8 )
0000eb e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
0000ec d0f4      	RCALL SUBOPT_0x2
                 ; 0000 0044       Lcd_Write_Char((v%1000)/100+48);
0000ed d116      	RCALL SUBOPT_0x8
                +
0000ee eee8     +LDI R30 , LOW ( 0x3E8 )
0000ef e0f3     +LDI R31 , HIGH ( 0x3E8 )
0000f0 e060     +LDI R22 , BYTE3 ( 0x3E8 )
0000f1 e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
0000f2 d0f3      	RCALL SUBOPT_0x3
0000f3 d0f7      	RCALL SUBOPT_0x4
0000f4 d0ec      	RCALL SUBOPT_0x2
                 ; 0000 0045       Lcd_Write_Char((v%100)/10+48);
0000f5 d10e      	RCALL SUBOPT_0x8
0000f6 d0f4      	RCALL SUBOPT_0x4
0000f7 d0ee      	RCALL SUBOPT_0x3
0000f8 d0f7      	RCALL SUBOPT_0x5
0000f9 d0e7      	RCALL SUBOPT_0x2
                 ; 0000 0046       Lcd_Write_Char(v%10+48);
0000fa d109      	RCALL SUBOPT_0x8
0000fb d0f9      	RCALL SUBOPT_0x6
                 ; 0000 0047       delay_ms(1);
0000fc e0a1      	LDI  R26,LOW(1)
0000fd e0b0      	LDI  R27,0
0000fe 940e 0215 	CALL _delay_ms
                 ; 0000 0048     }
000100 cf7f      	RJMP _0x14
                 ; 0000 0049 }
                 _0x17:
000101 cfff      	RJMP _0x17
                 ; .FEND
                 
                 	.DSEG
                 _0x13:
000160           	.BYTE 0x13
                 ;void ADC_Init()
                 ; 0000 004B {
                 
                 	.CSEG
                 _ADC_Init:
                 ; .FSTART _ADC_Init
                 ; 0000 004C   // thanh ghi ADMUX
                 ; 0000 004D   ADMUX |= (1<<REFS0); // dien ap: AVCC, ADCL chua 8 bit thap
000102 9a3e      	SBI  0x7,6
                 ; 0000 004E   // thanh ghi ADCSRA
                 ; 0000 004F   ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(ADPS0); // cho phep ADC, chia 128
000103 b1e6      	IN   R30,0x6
000104 68e6      	ORI  R30,LOW(0x86)
000105 b9e6      	OUT  0x6,R30
                 ; 0000 0050 }
000106 9508      	RET
                 ; .FEND
                 ;unsigned int Read_ADC(unsigned char channel)
                 ; 0000 0052 {
                 _Read_ADC:
                 ; .FSTART _Read_ADC
                 ; 0000 0053   ADMUX |= channel;
000107 93aa      	ST   -Y,R26
                 ;	channel -> Y+0
000108 b1e7      	IN   R30,0x7
000109 81a8      	LD   R26,Y
00010a 2bea      	OR   R30,R26
00010b b9e7      	OUT  0x7,R30
                 ; 0000 0054   delay_us(10);
                +
00010c e288     +LDI R24 , LOW ( 40 )
                +__DELAY_USB_LOOP :
00010d 958a     +DEC R24
00010e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 40
                 ; 0000 0055   ADCSRA |= (1<<ADSC); // cho phep bat dau chuyen doi
00010f 9a36      	SBI  0x6,6
                 ; 0000 0056   while(ADIF==0);
                 ; 0000 0057   ADCSRA |= (1<<ADIF);
000110 9a34      	SBI  0x6,4
                 ; 0000 0058   return ADCW;
000111 b1e4      	IN   R30,0x4
000112 b1f5      	IN   R31,0x4+1
000113 c052      	RJMP _0x2000001
                 ; 0000 0059 }
                 ; .FEND
                 ;void PWM_Init()
                 ; 0000 005B {
                 _PWM_Init:
                 ; .FSTART _PWM_Init
                 ; 0000 005C   // thanh ghi TCCR0
                 ; 0000 005D   TCCR0 = 0;
000114 e0e0      	LDI  R30,LOW(0)
000115 bfe3      	OUT  0x33,R30
                 ; 0000 005E   // thanh ghi TCCR0
                 ; 0000 005F   TCCR0 |= (1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS02)|(1<<CS00); // 1024
000116 b7e3      	IN   R30,0x33
000117 66ed      	ORI  R30,LOW(0x6D)
000118 bfe3      	OUT  0x33,R30
                 ; 0000 0060   OCR0 = 0;
000119 e0e0      	LDI  R30,LOW(0)
00011a bfec      	OUT  0x3C,R30
                 ; 0000 0061 }
00011b 9508      	RET
                 ; .FEND
                 ;void PWM_Duty(unsigned char duty)
                 ; 0000 0063 {
                 _PWM_Duty:
                 ; .FSTART _PWM_Duty
                 ; 0000 0064   duty = duty*255/100;
00011c 93aa      	ST   -Y,R26
                 ;	duty -> Y+0
00011d 81a8      	LD   R26,Y
00011e efef      	LDI  R30,LOW(255)
00011f 9fea      	MUL  R30,R26
000120 01f0      	MOVW R30,R0
000121 01df      	MOVW R26,R30
000122 e6e4      	LDI  R30,LOW(100)
000123 e0f0      	LDI  R31,HIGH(100)
000124 940e 0345 	CALL __DIVW21
000126 83e8      	ST   Y,R30
                 ; 0000 0065   OCR0 = duty;
000127 bfec      	OUT  0x3C,R30
                 ; 0000 0066 }
000128 c03d      	RJMP _0x2000001
                 ; .FEND
                 ;void Capture_Init()
                 ; 0000 0068 {
                 _Capture_Init:
                 ; .FSTART _Capture_Init
                 ; 0000 0069   DDRD.6 = 0;
000129 988e      	CBI  0x11,6
                 ; 0000 006A   PORTD.6 = 0;
00012a 9896      	CBI  0x12,6
                 ; 0000 006B   TCNT1 = 0;
00012b e0e0      	LDI  R30,LOW(0)
00012c e0f0      	LDI  R31,HIGH(0)
00012d bdfd      	OUT  0x2C+1,R31
00012e bdec      	OUT  0x2C,R30
                 ; 0000 006C   TCCR1A = 0x00;
00012f bdef      	OUT  0x2F,R30
                 ; 0000 006D   TCCR1B |= (1<<ICNC1)|(1<<CS12);
000130 b5ee      	IN   R30,0x2E
000131 68e4      	ORI  R30,LOW(0x84)
000132 bdee      	OUT  0x2E,R30
                 ; 0000 006E   TIMSK |= (1<<TICIE1);
000133 b7e9      	IN   R30,0x39
000134 62e0      	ORI  R30,0x20
000135 bfe9      	OUT  0x39,R30
                 ; 0000 006F }
000136 9508      	RET
                 ; .FEND
                 ;interrupt [TIM1_CAPT] void tim1_capt_isr(void)
                 ; 0000 0071 {
                 _tim1_capt_isr:
                 ; .FSTART _tim1_capt_isr
000137 93ea      	ST   -Y,R30
000138 93fa      	ST   -Y,R31
                 ; 0000 0072   TCNT1 = 0;
000139 e0e0      	LDI  R30,LOW(0)
00013a e0f0      	LDI  R31,HIGH(0)
00013b bdfd      	OUT  0x2C+1,R31
00013c bdec      	OUT  0x2C,R30
                 ; 0000 0073   TCCR1B |= (0<<CS12)|(0<<CS12)|(0<<CS12);
00013d b5ee      	IN   R30,0x2E
00013e bdee      	OUT  0x2E,R30
                 ; 0000 0074 }
00013f 91f9      	LD   R31,Y+
000140 91e9      	LD   R30,Y+
000141 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "lcd4.h"
                 ;
                 ;
                 ;void Lcd_Port(char a)
                 ; 0001 0007 {
                 
                 	.CSEG
                 _Lcd_Port:
                 ; .FSTART _Lcd_Port
                 ; 0001 0008 	if(a & 1)
000142 93aa      	ST   -Y,R26
                 ;	a -> Y+0
000143 81e8      	LD   R30,Y
000144 70e1      	ANDI R30,LOW(0x1)
000145 f011      	BREQ _0x20003
                 ; 0001 0009 		D4 = 1;
000146 9aaa      	SBI  0x15,2
                 ; 0001 000A 	else
000147 c001      	RJMP _0x20006
                 _0x20003:
                 ; 0001 000B 		D4 = 0;
000148 98aa      	CBI  0x15,2
                 ; 0001 000C 
                 ; 0001 000D 	if(a & 2)
                 _0x20006:
000149 81e8      	LD   R30,Y
00014a 70e2      	ANDI R30,LOW(0x2)
00014b f011      	BREQ _0x20009
                 ; 0001 000E 		D5 = 1;
00014c 9aab      	SBI  0x15,3
                 ; 0001 000F 	else
00014d c001      	RJMP _0x2000C
                 _0x20009:
                 ; 0001 0010 		D5 = 0;
00014e 98ab      	CBI  0x15,3
                 ; 0001 0011 
                 ; 0001 0012 	if(a & 4)
                 _0x2000C:
00014f 81e8      	LD   R30,Y
000150 70e4      	ANDI R30,LOW(0x4)
000151 f011      	BREQ _0x2000F
                 ; 0001 0013 		D6 = 1;
000152 9aac      	SBI  0x15,4
                 ; 0001 0014 	else
000153 c001      	RJMP _0x20012
                 _0x2000F:
                 ; 0001 0015 		D6 = 0;
000154 98ac      	CBI  0x15,4
                 ; 0001 0016 
                 ; 0001 0017 	if(a & 8)
                 _0x20012:
000155 81e8      	LD   R30,Y
000156 70e8      	ANDI R30,LOW(0x8)
000157 f011      	BREQ _0x20015
                 ; 0001 0018 		D7 = 1;
000158 9aad      	SBI  0x15,5
                 ; 0001 0019 	else
000159 c001      	RJMP _0x20018
                 _0x20015:
                 ; 0001 001A 		D7 = 0;
00015a 98ad      	CBI  0x15,5
                 ; 0001 001B }
                 _0x20018:
00015b c00a      	RJMP _0x2000001
                 ; .FEND
                 ;void Lcd_Cmd(char a)
                 ; 0001 001D {
                 _Lcd_Cmd:
                 ; .FSTART _Lcd_Cmd
                 ; 0001 001E 	RS = 0;             // => RS = 0
00015c 93aa      	ST   -Y,R26
                 ;	a -> Y+0
00015d 98a8      	CBI  0x15,0
                 ; 0001 001F 	Lcd_Port(a);
00015e 81a8      	LD   R26,Y
00015f dfe2      	RCALL _Lcd_Port
                 ; 0001 0020 	EN  = 1;             // => E = 1
000160 9aa9      	SBI  0x15,1
                 ; 0001 0021         delay_ms(4);
000161 e0a4      	LDI  R26,LOW(4)
000162 e0b0      	LDI  R27,0
000163 940e 0215 	CALL _delay_ms
                 ; 0001 0022         EN  = 0;             // => E = 0
000165 98a9      	CBI  0x15,1
                 ; 0001 0023 }
                 _0x2000001:
000166 9621      	ADIW R28,1
000167 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Clear()
                 ; 0001 0026 {
                 ; 0001 0027 	Lcd_Cmd(0);
                 ; 0001 0028 	Lcd_Cmd(1);
                 ; 0001 0029 }
                 ;
                 ;void Lcd_Set_Cursor(char a, char b)
                 ; 0001 002C {
                 _Lcd_Set_Cursor:
                 ; .FSTART _Lcd_Set_Cursor
                 ; 0001 002D 	char temp,z,y;
                 ; 0001 002E 	if(a == 1)
000168 93aa      	ST   -Y,R26
000169 940e 038b 	CALL __SAVELOCR4
                 ;	a -> Y+5
                 ;	b -> Y+4
                 ;	temp -> R17
                 ;	z -> R16
                 ;	y -> R19
00016b 81ad      	LDD  R26,Y+5
00016c 30a1      	CPI  R26,LOW(0x1)
00016d f419      	BRNE _0x20021
                 ; 0001 002F 	{
                 ; 0001 0030 	  temp = 0x80 + b - 1;
00016e 81ac      	LDD  R26,Y+4
00016f 58a0      	SUBI R26,-LOW(128)
000170 c005      	RJMP _0x20031
                 ; 0001 0031 		z = temp>>4;
                 ; 0001 0032 		y = temp & 0x0F;
                 ; 0001 0033 		Lcd_Cmd(z);
                 ; 0001 0034 		Lcd_Cmd(y);
                 ; 0001 0035 	}
                 ; 0001 0036 	else if(a == 2)
                 _0x20021:
000171 81ad      	LDD  R26,Y+5
000172 30a2      	CPI  R26,LOW(0x2)
000173 f479      	BRNE _0x20023
                 ; 0001 0037 	{
                 ; 0001 0038 		temp = 0xC0 + b - 1;
000174 81ac      	LDD  R26,Y+4
000175 54a0      	SUBI R26,-LOW(192)
                 _0x20031:
000176 50a1      	SUBI R26,LOW(1)
000177 2f1a      	MOV  R17,R26
                 ; 0001 0039 		z = temp>>4;
000178 2fe1      	MOV  R30,R17
000179 95e2      	SWAP R30
00017a 70ef      	ANDI R30,0xF
00017b 2f0e      	MOV  R16,R30
                 ; 0001 003A 		y = temp & 0x0F;
00017c 2fe1      	MOV  R30,R17
00017d 70ef      	ANDI R30,LOW(0xF)
00017e 2f3e      	MOV  R19,R30
                 ; 0001 003B 		Lcd_Cmd(z);
00017f 2fa0      	MOV  R26,R16
000180 dfdb      	RCALL _Lcd_Cmd
                 ; 0001 003C 		Lcd_Cmd(y);
000181 2fa3      	MOV  R26,R19
000182 dfd9      	RCALL _Lcd_Cmd
                 ; 0001 003D 	}
                 ; 0001 003E }
                 _0x20023:
000183 940e 0390 	CALL __LOADLOCR4
000185 9626      	ADIW R28,6
000186 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Init()
                 ; 0001 0041 {
                 _Lcd_Init:
                 ; .FSTART _Lcd_Init
                 ; 0001 0042   Lcd_Port(0x00);
000187 e0a0      	LDI  R26,LOW(0)
000188 dfb9      	RCALL _Lcd_Port
                 ; 0001 0043   delay_ms(20);
000189 e1a4      	LDI  R26,LOW(20)
00018a d07e      	RCALL SUBOPT_0x9
                 ; 0001 0044   Lcd_Cmd(0x03);
                 ; 0001 0045   delay_ms(5);
00018b e0a5      	LDI  R26,LOW(5)
00018c d07c      	RCALL SUBOPT_0x9
                 ; 0001 0046   Lcd_Cmd(0x03);
                 ; 0001 0047   delay_ms(11);
00018d e0ab      	LDI  R26,LOW(11)
00018e d07a      	RCALL SUBOPT_0x9
                 ; 0001 0048   Lcd_Cmd(0x03);
                 ; 0001 0049   /////////////////////////////////////////////////////
                 ; 0001 004A   Lcd_Cmd(0x02);
00018f e0a2      	LDI  R26,LOW(2)
000190 dfcb      	RCALL _Lcd_Cmd
                 ; 0001 004B   Lcd_Cmd(0x02);
000191 e0a2      	LDI  R26,LOW(2)
000192 dfc9      	RCALL _Lcd_Cmd
                 ; 0001 004C   Lcd_Cmd(0x08);
000193 e0a8      	LDI  R26,LOW(8)
000194 dfc7      	RCALL _Lcd_Cmd
                 ; 0001 004D   Lcd_Cmd(0x00);
000195 e0a0      	LDI  R26,LOW(0)
000196 dfc5      	RCALL _Lcd_Cmd
                 ; 0001 004E   Lcd_Cmd(0x0C);
000197 e0ac      	LDI  R26,LOW(12)
000198 dfc3      	RCALL _Lcd_Cmd
                 ; 0001 004F   Lcd_Cmd(0x00);
000199 e0a0      	LDI  R26,LOW(0)
00019a dfc1      	RCALL _Lcd_Cmd
                 ; 0001 0050   Lcd_Cmd(0x06);
00019b e0a6      	LDI  R26,LOW(6)
00019c dfbf      	RCALL _Lcd_Cmd
                 ; 0001 0051 }
00019d 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Write_Char(char a)
                 ; 0001 0054 {
                 _Lcd_Write_Char:
                 ; .FSTART _Lcd_Write_Char
                 ; 0001 0055    char temp,y;
                 ; 0001 0056    temp = a&0x0F;
00019e 93aa      	ST   -Y,R26
00019f 931a      	ST   -Y,R17
0001a0 930a      	ST   -Y,R16
                 ;	a -> Y+2
                 ;	temp -> R17
                 ;	y -> R16
0001a1 81ea      	LDD  R30,Y+2
0001a2 70ef      	ANDI R30,LOW(0xF)
0001a3 2f1e      	MOV  R17,R30
                 ; 0001 0057    y = a&0xF0;
0001a4 81ea      	LDD  R30,Y+2
0001a5 7fe0      	ANDI R30,LOW(0xF0)
0001a6 2f0e      	MOV  R16,R30
                 ; 0001 0058    RS = 1;             // => RS = 1
0001a7 9aa8      	SBI  0x15,0
                 ; 0001 0059    Lcd_Port(y>>4);             //Data transfer
0001a8 95e2      	SWAP R30
0001a9 70ef      	ANDI R30,0xF
0001aa 2fae      	MOV  R26,R30
0001ab d062      	RCALL SUBOPT_0xA
                 ; 0001 005A    EN = 1;
                 ; 0001 005B    delay_us(40);
                 ; 0001 005C    EN = 0;
                 ; 0001 005D    Lcd_Port(temp);
0001ac 2fa1      	MOV  R26,R17
0001ad d060      	RCALL SUBOPT_0xA
                 ; 0001 005E    EN = 1;
                 ; 0001 005F    delay_us(40);
                 ; 0001 0060    EN = 0;
                 ; 0001 0061 }
0001ae 8119      	LDD  R17,Y+1
0001af 8108      	LDD  R16,Y+0
0001b0 9623      	ADIW R28,3
0001b1 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Write_String(char *a)
                 ; 0001 0064 {
                 _Lcd_Write_String:
                 ; .FSTART _Lcd_Write_String
                 ; 0001 0065 	int i;
                 ; 0001 0066 	for(i=0;a[i]!='\0';i++)
0001b2 93ba      	ST   -Y,R27
0001b3 93aa      	ST   -Y,R26
0001b4 931a      	ST   -Y,R17
0001b5 930a      	ST   -Y,R16
                 ;	*a -> Y+2
                 ;	i -> R16,R17
                +
0001b6 e000     +LDI R16 , LOW ( 0 )
0001b7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2002F:
0001b8 01f8      	MOVW R30,R16
0001b9 81aa      	LDD  R26,Y+2
0001ba 81bb      	LDD  R27,Y+2+1
0001bb 0fae      	ADD  R26,R30
0001bc 1fbf      	ADC  R27,R31
0001bd 91ec      	LD   R30,X
0001be 30e0      	CPI  R30,0
0001bf f051      	BREQ _0x20030
                 ; 0001 0067 	   Lcd_Write_Char(a[i]);
0001c0 01f8      	MOVW R30,R16
0001c1 81aa      	LDD  R26,Y+2
0001c2 81bb      	LDD  R27,Y+2+1
0001c3 0fae      	ADD  R26,R30
0001c4 1fbf      	ADC  R27,R31
0001c5 91ac      	LD   R26,X
0001c6 dfd7      	RCALL _Lcd_Write_Char
                +
0001c7 5f0f     +SUBI R16 , LOW ( - 1 )
0001c8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001c9 cfee      	RJMP _0x2002F
                 _0x20030:
                 ; 0001 0068 }
0001ca 8119      	LDD  R17,Y+1
0001cb 8108      	LDD  R16,Y+0
0001cc 9624      	ADIW R28,4
0001cd 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Shift_Right()
                 ; 0001 006B {
                 ; 0001 006C 	Lcd_Cmd(0x01);
                 ; 0001 006D 	Lcd_Cmd(0x0C);
                 ; 0001 006E }
                 ;
                 ;void Lcd_Shift_Left()
                 ; 0001 0071 {
                 ; 0001 0072 	Lcd_Cmd(0x01);
                 ; 0001 0073 	Lcd_Cmd(0x08);
                 ; 0001 0074 }
                 ;
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
0001ce e0e0      	LDI  R30,LOW(0)
0001cf 2766      	CLR  R22
0001d0 2777      	CLR  R23
0001d1 940e 0285 	CALL __CDF1
                +
0001d3 e0a0     +LDI R26 , LOW ( 0x3D800000 )
0001d4 e0b0     +LDI R27 , HIGH ( 0x3D800000 )
0001d5 e880     +LDI R24 , BYTE3 ( 0x3D800000 )
0001d6 e39d     +LDI R25 , BYTE4 ( 0x3D800000 )
                 	__GETD2N 0x3D800000
0001d7 940e 02b3 	CALL __MULF12
0001d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0001da 940e 0381 	CALL __GETD2S0
                +
0001dc eee8     +LDI R30 , LOW ( 0x3E8 )
0001dd e0f3     +LDI R31 , HIGH ( 0x3E8 )
0001de e060     +LDI R22 , BYTE3 ( 0x3E8 )
0001df e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
0001e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2:
0001e1 940e 034a 	CALL __DIVD21U
0001e3 5de0      	SUBI R30,-LOW(48)
0001e4 2fae      	MOV  R26,R30
0001e5 cfb8      	RJMP _Lcd_Write_Char
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0001e6 940e 036f 	CALL __MODD21U
0001e8 01df      	MOVW R26,R30
0001e9 01cb      	MOVW R24,R22
0001ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
                +
0001eb e6e4     +LDI R30 , LOW ( 0x64 )
0001ec e0f0     +LDI R31 , HIGH ( 0x64 )
0001ed e060     +LDI R22 , BYTE3 ( 0x64 )
0001ee e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
0001ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
                +
0001f0 e0ea     +LDI R30 , LOW ( 0xA )
0001f1 e0f0     +LDI R31 , HIGH ( 0xA )
0001f2 e060     +LDI R22 , BYTE3 ( 0xA )
0001f3 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
0001f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0001f5 dffa      	RCALL SUBOPT_0x5
0001f6 940e 036f 	CALL __MODD21U
0001f8 5de0      	SUBI R30,-LOW(48)
0001f9 2fae      	MOV  R26,R30
0001fa cfa3      	RJMP _Lcd_Write_Char
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
                +
0001fb 85a8     +LDD R26 , Y + 8
0001fc 85b9     +LDD R27 , Y + 8 + 1
0001fd 858a     +LDD R24 , Y + 8 + 2
0001fe 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
                +
0001ff e1e0     +LDI R30 , LOW ( 0x2710 )
000200 e2f7     +LDI R31 , HIGH ( 0x2710 )
000201 e060     +LDI R22 , BYTE3 ( 0x2710 )
000202 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
000203 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
                +
000204 85a8     +LDD R26 , Y + 8
000205 85b9     +LDD R27 , Y + 8 + 1
000206 858a     +LDD R24 , Y + 8 + 2
000207 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000208 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
000209 e0b0      	LDI  R27,0
00020a 940e 0215 	CALL _delay_ms
00020c e0a3      	LDI  R26,LOW(3)
00020d cf4e      	RJMP _Lcd_Cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
00020e df33      	RCALL _Lcd_Port
00020f 9aa9      	SBI  0x15,1
                +
000210 ea80     +LDI R24 , LOW ( 160 )
                +__DELAY_USB_LOOP :
000211 958a     +DEC R24
000212 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 160
000213 98a9      	CBI  0x15,1
000214 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000215 9610      	adiw r26,0
000216 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000217 eb88     +LDI R24 , LOW ( 0xBB8 )
000218 e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
000219 9701     +SBIW R24 , 1
00021a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
00021b 95a8      	wdr
00021c 9711      	sbiw r26,1
00021d f7c9      	brne __delay_ms0
                 __delay_ms1:
00021e 9508      	ret
                 
                 __ROUND_REPACK:
00021f 2355      	TST  R21
000220 f442      	BRPL __REPACK
000221 3850      	CPI  R21,0x80
000222 f411      	BRNE __ROUND_REPACK0
000223 ffe0      	SBRS R30,0
000224 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000225 9631      	ADIW R30,1
000226 1f69      	ADC  R22,R25
000227 1f79      	ADC  R23,R25
000228 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000229 e850      	LDI  R21,0x80
00022a 2757      	EOR  R21,R23
00022b f411      	BRNE __REPACK0
00022c 935f      	PUSH R21
00022d c073      	RJMP __ZERORES
                 __REPACK0:
00022e 3f5f      	CPI  R21,0xFF
00022f f031      	BREQ __REPACK1
000230 0f66      	LSL  R22
000231 0c00      	LSL  R0
000232 9557      	ROR  R21
000233 9567      	ROR  R22
000234 2f75      	MOV  R23,R21
000235 9508      	RET
                 __REPACK1:
000236 935f      	PUSH R21
000237 2000      	TST  R0
000238 f00a      	BRMI __REPACK2
000239 c073      	RJMP __MAXRES
                 __REPACK2:
00023a c06c      	RJMP __MINRES
                 
                 __UNPACK:
00023b e850      	LDI  R21,0x80
00023c 2e19      	MOV  R1,R25
00023d 2215      	AND  R1,R21
00023e 0f88      	LSL  R24
00023f 1f99      	ROL  R25
000240 2795      	EOR  R25,R21
000241 0f55      	LSL  R21
000242 9587      	ROR  R24
                 
                 __UNPACK1:
000243 e850      	LDI  R21,0x80
000244 2e07      	MOV  R0,R23
000245 2205      	AND  R0,R21
000246 0f66      	LSL  R22
000247 1f77      	ROL  R23
000248 2775      	EOR  R23,R21
000249 0f55      	LSL  R21
00024a 9567      	ROR  R22
00024b 9508      	RET
                 
                 __CFD1U:
00024c 9468      	SET
00024d c001      	RJMP __CFD1U0
                 __CFD1:
00024e 94e8      	CLT
                 __CFD1U0:
00024f 935f      	PUSH R21
000250 dff2      	RCALL __UNPACK1
000251 3870      	CPI  R23,0x80
000252 f018      	BRLO __CFD10
000253 3f7f      	CPI  R23,0xFF
000254 f408      	BRCC __CFD10
000255 c04b      	RJMP __ZERORES
                 __CFD10:
000256 e156      	LDI  R21,22
000257 1b57      	SUB  R21,R23
000258 f4aa      	BRPL __CFD11
000259 9551      	NEG  R21
00025a 3058      	CPI  R21,8
00025b f40e      	BRTC __CFD19
00025c 3059      	CPI  R21,9
                 __CFD19:
00025d f030      	BRLO __CFD17
00025e efef      	SER  R30
00025f efff      	SER  R31
000260 ef6f      	SER  R22
000261 e77f      	LDI  R23,0x7F
000262 f977      	BLD  R23,7
000263 c01a      	RJMP __CFD15
                 __CFD17:
000264 2777      	CLR  R23
000265 2355      	TST  R21
000266 f0b9      	BREQ __CFD15
                 __CFD18:
000267 0fee      	LSL  R30
000268 1fff      	ROL  R31
000269 1f66      	ROL  R22
00026a 1f77      	ROL  R23
00026b 955a      	DEC  R21
00026c f7d1      	BRNE __CFD18
00026d c010      	RJMP __CFD15
                 __CFD11:
00026e 2777      	CLR  R23
                 __CFD12:
00026f 3058      	CPI  R21,8
000270 f028      	BRLO __CFD13
000271 2fef      	MOV  R30,R31
000272 2ff6      	MOV  R31,R22
000273 2f67      	MOV  R22,R23
000274 5058      	SUBI R21,8
000275 cff9      	RJMP __CFD12
                 __CFD13:
000276 2355      	TST  R21
000277 f031      	BREQ __CFD15
                 __CFD14:
000278 9576      	LSR  R23
000279 9567      	ROR  R22
00027a 95f7      	ROR  R31
00027b 95e7      	ROR  R30
00027c 955a      	DEC  R21
00027d f7d1      	BRNE __CFD14
                 __CFD15:
00027e 2000      	TST  R0
00027f f40a      	BRPL __CFD16
000280 d084      	RCALL __ANEGD1
                 __CFD16:
000281 915f      	POP  R21
000282 9508      	RET
                 
                 __CDF1U:
000283 9468      	SET
000284 c001      	RJMP __CDF1U0
                 __CDF1:
000285 94e8      	CLT
                 __CDF1U0:
000286 9730      	SBIW R30,0
000287 4060      	SBCI R22,0
000288 4070      	SBCI R23,0
000289 f0b1      	BREQ __CDF10
00028a 2400      	CLR  R0
00028b f026      	BRTS __CDF11
00028c 2377      	TST  R23
00028d f412      	BRPL __CDF11
00028e 9400      	COM  R0
00028f d075      	RCALL __ANEGD1
                 __CDF11:
000290 2e17      	MOV  R1,R23
000291 e17e      	LDI  R23,30
000292 2011      	TST  R1
                 __CDF12:
000293 f032      	BRMI __CDF13
000294 957a      	DEC  R23
000295 0fee      	LSL  R30
000296 1fff      	ROL  R31
000297 1f66      	ROL  R22
000298 1c11      	ROL  R1
000299 cff9      	RJMP __CDF12
                 __CDF13:
00029a 2fef      	MOV  R30,R31
00029b 2ff6      	MOV  R31,R22
00029c 2d61      	MOV  R22,R1
00029d 935f      	PUSH R21
00029e df8a      	RCALL __REPACK
00029f 915f      	POP  R21
                 __CDF10:
0002a0 9508      	RET
                 
                 __ZERORES:
0002a1 27ee      	CLR  R30
0002a2 27ff      	CLR  R31
0002a3 2766      	CLR  R22
0002a4 2777      	CLR  R23
0002a5 915f      	POP  R21
0002a6 9508      	RET
                 
                 __MINRES:
0002a7 efef      	SER  R30
0002a8 efff      	SER  R31
0002a9 e76f      	LDI  R22,0x7F
0002aa ef7f      	SER  R23
0002ab 915f      	POP  R21
0002ac 9508      	RET
                 
                 __MAXRES:
0002ad efef      	SER  R30
0002ae efff      	SER  R31
0002af e76f      	LDI  R22,0x7F
0002b0 e77f      	LDI  R23,0x7F
0002b1 915f      	POP  R21
0002b2 9508      	RET
                 
                 __MULF12:
0002b3 935f      	PUSH R21
0002b4 df86      	RCALL __UNPACK
0002b5 3870      	CPI  R23,0x80
0002b6 f351      	BREQ __ZERORES
0002b7 3890      	CPI  R25,0x80
0002b8 f341      	BREQ __ZERORES
0002b9 2401      	EOR  R0,R1
0002ba 9408      	SEC
0002bb 1f79      	ADC  R23,R25
0002bc f423      	BRVC __MULF124
0002bd f31c      	BRLT __ZERORES
                 __MULF125:
0002be 2000      	TST  R0
0002bf f33a      	BRMI __MINRES
0002c0 cfec      	RJMP __MAXRES
                 __MULF124:
0002c1 920f      	PUSH R0
0002c2 931f      	PUSH R17
0002c3 932f      	PUSH R18
0002c4 933f      	PUSH R19
0002c5 934f      	PUSH R20
0002c6 2711      	CLR  R17
0002c7 2722      	CLR  R18
0002c8 2799      	CLR  R25
0002c9 9f68      	MUL  R22,R24
0002ca 01a0      	MOVW R20,R0
0002cb 9f8f      	MUL  R24,R31
0002cc 2d30      	MOV  R19,R0
0002cd 0d41      	ADD  R20,R1
0002ce 1f59      	ADC  R21,R25
0002cf 9f6b      	MUL  R22,R27
0002d0 0d30      	ADD  R19,R0
0002d1 1d41      	ADC  R20,R1
0002d2 1f59      	ADC  R21,R25
0002d3 9f8e      	MUL  R24,R30
0002d4 d027      	RCALL __MULF126
0002d5 9fbf      	MUL  R27,R31
0002d6 d025      	RCALL __MULF126
0002d7 9f6a      	MUL  R22,R26
0002d8 d023      	RCALL __MULF126
0002d9 9fbe      	MUL  R27,R30
0002da d01d      	RCALL __MULF127
0002db 9faf      	MUL  R26,R31
0002dc d01b      	RCALL __MULF127
0002dd 9fae      	MUL  R26,R30
0002de 0d11      	ADD  R17,R1
0002df 1f29      	ADC  R18,R25
0002e0 1f39      	ADC  R19,R25
0002e1 1f49      	ADC  R20,R25
0002e2 1f59      	ADC  R21,R25
0002e3 2fe3      	MOV  R30,R19
0002e4 2ff4      	MOV  R31,R20
0002e5 2f65      	MOV  R22,R21
0002e6 2f52      	MOV  R21,R18
0002e7 914f      	POP  R20
0002e8 913f      	POP  R19
0002e9 912f      	POP  R18
0002ea 911f      	POP  R17
0002eb 900f      	POP  R0
0002ec 2366      	TST  R22
0002ed f02a      	BRMI __MULF122
0002ee 0f55      	LSL  R21
0002ef 1fee      	ROL  R30
0002f0 1fff      	ROL  R31
0002f1 1f66      	ROL  R22
0002f2 c002      	RJMP __MULF123
                 __MULF122:
0002f3 9573      	INC  R23
0002f4 f24b      	BRVS __MULF125
                 __MULF123:
0002f5 df29      	RCALL __ROUND_REPACK
0002f6 915f      	POP  R21
0002f7 9508      	RET
                 
                 __MULF127:
0002f8 0d10      	ADD  R17,R0
0002f9 1d21      	ADC  R18,R1
0002fa 1f39      	ADC  R19,R25
0002fb c002      	RJMP __MULF128
                 __MULF126:
0002fc 0d20      	ADD  R18,R0
0002fd 1d31      	ADC  R19,R1
                 __MULF128:
0002fe 1f49      	ADC  R20,R25
0002ff 1f59      	ADC  R21,R25
000300 9508      	RET
                 
                 __ANEGW1:
000301 95f1      	NEG  R31
000302 95e1      	NEG  R30
000303 40f0      	SBCI R31,0
000304 9508      	RET
                 
                 __ANEGD1:
000305 95f0      	COM  R31
000306 9560      	COM  R22
000307 9570      	COM  R23
000308 95e1      	NEG  R30
000309 4fff      	SBCI R31,-1
00030a 4f6f      	SBCI R22,-1
00030b 4f7f      	SBCI R23,-1
00030c 9508      	RET
                 
                 __CWD1:
00030d 2f6f      	MOV  R22,R31
00030e 0f66      	ADD  R22,R22
00030f 0b66      	SBC  R22,R22
000310 2f76      	MOV  R23,R22
000311 9508      	RET
                 
                 __MULD12U:
000312 9f7a      	MUL  R23,R26
000313 2d70      	MOV  R23,R0
000314 9f6b      	MUL  R22,R27
000315 0d70      	ADD  R23,R0
000316 9ff8      	MUL  R31,R24
000317 0d70      	ADD  R23,R0
000318 9fe9      	MUL  R30,R25
000319 0d70      	ADD  R23,R0
00031a 9f6a      	MUL  R22,R26
00031b 2d60      	MOV  R22,R0
00031c 0d71      	ADD  R23,R1
00031d 9ffb      	MUL  R31,R27
00031e 0d60      	ADD  R22,R0
00031f 1d71      	ADC  R23,R1
000320 9fe8      	MUL  R30,R24
000321 0d60      	ADD  R22,R0
000322 1d71      	ADC  R23,R1
000323 2788      	CLR  R24
000324 9ffa      	MUL  R31,R26
000325 2df0      	MOV  R31,R0
000326 0d61      	ADD  R22,R1
000327 1f78      	ADC  R23,R24
000328 9feb      	MUL  R30,R27
000329 0df0      	ADD  R31,R0
00032a 1d61      	ADC  R22,R1
00032b 1f78      	ADC  R23,R24
00032c 9fea      	MUL  R30,R26
00032d 2de0      	MOV  R30,R0
00032e 0df1      	ADD  R31,R1
00032f 1f68      	ADC  R22,R24
000330 1f78      	ADC  R23,R24
000331 9508      	RET
                 
                 __DIVW21U:
000332 2400      	CLR  R0
000333 2411      	CLR  R1
000334 e190      	LDI  R25,16
                 __DIVW21U1:
000335 0faa      	LSL  R26
000336 1fbb      	ROL  R27
000337 1c00      	ROL  R0
000338 1c11      	ROL  R1
000339 1a0e      	SUB  R0,R30
00033a 0a1f      	SBC  R1,R31
00033b f418      	BRCC __DIVW21U2
00033c 0e0e      	ADD  R0,R30
00033d 1e1f      	ADC  R1,R31
00033e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00033f 60a1      	SBR  R26,1
                 __DIVW21U3:
000340 959a      	DEC  R25
000341 f799      	BRNE __DIVW21U1
000342 01fd      	MOVW R30,R26
000343 01d0      	MOVW R26,R0
000344 9508      	RET
                 
                 __DIVW21:
000345 d02d      	RCALL __CHKSIGNW
000346 dfeb      	RCALL __DIVW21U
000347 f40e      	BRTC __DIVW211
000348 dfb8      	RCALL __ANEGW1
                 __DIVW211:
000349 9508      	RET
                 
                 __DIVD21U:
00034a 933f      	PUSH R19
00034b 934f      	PUSH R20
00034c 935f      	PUSH R21
00034d 2400      	CLR  R0
00034e 2411      	CLR  R1
00034f 2744      	CLR  R20
000350 2755      	CLR  R21
000351 e230      	LDI  R19,32
                 __DIVD21U1:
000352 0faa      	LSL  R26
000353 1fbb      	ROL  R27
000354 1f88      	ROL  R24
000355 1f99      	ROL  R25
000356 1c00      	ROL  R0
000357 1c11      	ROL  R1
000358 1f44      	ROL  R20
000359 1f55      	ROL  R21
00035a 1a0e      	SUB  R0,R30
00035b 0a1f      	SBC  R1,R31
00035c 0b46      	SBC  R20,R22
00035d 0b57      	SBC  R21,R23
00035e f428      	BRCC __DIVD21U2
00035f 0e0e      	ADD  R0,R30
000360 1e1f      	ADC  R1,R31
000361 1f46      	ADC  R20,R22
000362 1f57      	ADC  R21,R23
000363 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000364 60a1      	SBR  R26,1
                 __DIVD21U3:
000365 953a      	DEC  R19
000366 f759      	BRNE __DIVD21U1
000367 01fd      	MOVW R30,R26
000368 01bc      	MOVW R22,R24
000369 01d0      	MOVW R26,R0
00036a 01ca      	MOVW R24,R20
00036b 915f      	POP  R21
00036c 914f      	POP  R20
00036d 913f      	POP  R19
00036e 9508      	RET
                 
                 __MODD21U:
00036f dfda      	RCALL __DIVD21U
000370 01fd      	MOVW R30,R26
000371 01bc      	MOVW R22,R24
000372 9508      	RET
                 
                 __CHKSIGNW:
000373 94e8      	CLT
000374 fff7      	SBRS R31,7
000375 c002      	RJMP __CHKSW1
000376 df8a      	RCALL __ANEGW1
000377 9468      	SET
                 __CHKSW1:
000378 ffb7      	SBRS R27,7
000379 c006      	RJMP __CHKSW2
00037a 95a0      	COM  R26
00037b 95b0      	COM  R27
00037c 9611      	ADIW R26,1
00037d f800      	BLD  R0,0
00037e 9403      	INC  R0
00037f fa00      	BST  R0,0
                 __CHKSW2:
000380 9508      	RET
                 
                 __GETD2S0:
000381 81a8      	LD   R26,Y
000382 81b9      	LDD  R27,Y+1
000383 818a      	LDD  R24,Y+2
000384 819b      	LDD  R25,Y+3
000385 9508      	RET
                 
                 __PUTD1S0:
000386 83e8      	ST   Y,R30
000387 83f9      	STD  Y+1,R31
000388 836a      	STD  Y+2,R22
000389 837b      	STD  Y+3,R23
00038a 9508      	RET
                 
                 __SAVELOCR4:
00038b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00038c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00038d 931a      	ST   -Y,R17
00038e 930a      	ST   -Y,R16
00038f 9508      	RET
                 
                 __LOADLOCR4:
000390 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000391 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000392 8119      	LDD  R17,Y+1
000393 8108      	LD   R16,Y
000394 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  44 r1 :  27 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  14 r17:  18 r18:  12 r19:  18 r20:  18 r21:  51 r22:  60 r23:  56 
r24:  38 r25:  31 r26:  93 r27:  31 r28:   8 r29:   1 r30: 141 r31:  63 
x  :   9 y  :  77 z  :   7 
Registers used: 21 out of 35 (60.0%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  21 
adiw  :   9 and   :   2 andi  :   9 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   1 brmi  :   4 brne  :  15 brpl  :   4 brsh  :   0 brtc  :   2 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  22 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  27 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   6 
cp    :   0 cpc   :   0 cpi   :  12 cpse  :   0 dec   :   8 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   2 jmp   :  22 ld    :  14 ldd   :  31 ldi   : 113 
lds   :   0 lpm   :   7 lsl   :  11 lsr   :   1 mov   :  37 movw  :  23 
mul   :  20 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   4 out   :  20 pop   :  14 push  :  13 rcall :  75 ret   :  39 
reti  :   1 rjmp  :  33 rol   :  21 ror   :   7 sbc   :   5 sbci  :   7 
sbi   :  17 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   2 sbrc  :   0 
sbrs  :   3 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  30 std   :  11 sts   :   0 sub   :   3 subi  :   7 swap  :   2 
tst   :   9 wdr   :   1 
Instructions used: 68 out of 116 (58.6%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00072a   1800     34   1834   16384  11.2%
[.dseg] 0x000060 0x000173      0     19     19    1024   1.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
