
AVRASM ver. 2.1.30  E:\AVR\ATmega16\DKDC\Debug\List\DKDC.asm Sun Apr 21 23:51:18 2019

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 6947
00002b 2061
00002c 7274
00002d 3a69      	.DB  0x47,0x69,0x61,0x20,0x74,0x72,0x69,0x3A
00002e 0020
00002f 684e
000030 6569
000031 2074      	.DB  0x20,0x0,0x4E,0x68,0x69,0x65,0x74,0x20
000032 6f64
000033 203a
E:\AVR\ATmega16\DKDC\Debug\List\DKDC.asm(1119): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x64,0x6F,0x3A,0x20,0x0
                 
                 __GLOBAL_INI_TBL:
000035 000a      	.DW  0x0A
000036 0160      	.DW  _0xF
000037 0054      	.DW  _0x0*2
                 
000038 000b      	.DW  0x0B
000039 016a      	.DW  _0xF+10
00003a 005e      	.DW  _0x0*2+10
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 0069 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * ADC.c
                 ; *
                 ; * Created: 12/04/2019 20:44:02
                 ; * Author: ADMIN
                 ; */
                 ;
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "lcd4.h"
                 ;
                 ;void ADC_Init();
                 ;unsigned int Read_ADC(unsigned char channel);
                 ;void main(void)
                 ; 0000 000E {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000F // khai bao bien
                 ; 0000 0010 unsigned int a, t;
                 ; 0000 0011 // cau hinh port
                 ; 0000 0012 DDRB.0 = 1;
                 ;	a -> R16,R17
                 ;	t -> R18,R19
000069 9ab8      	SBI  0x17,0
                 ; 0000 0013 DDRB.1 = 1;
00006a 9ab9      	SBI  0x17,1
                 ; 0000 0014 DDRB.2 = 1;
00006b 9aba      	SBI  0x17,2
                 ; 0000 0015 DDRB.3 = 1;
00006c 9abb      	SBI  0x17,3
                 ; 0000 0016 DDRB.4 = 1;
00006d 9abc      	SBI  0x17,4
                 ; 0000 0017 DDRB.5 = 1;
00006e 9abd      	SBI  0x17,5
                 ; 0000 0018 // chuong trinh con
                 ; 0000 0019 Lcd_Init();
00006f d086      	RCALL _Lcd_Init
                 ; 0000 001A ADC_Init();
000070 d02e      	RCALL _ADC_Init
                 ; 0000 001B // chuong trinh chinh
                 ; 0000 001C Lcd_Write_String("Gia tri: ");
                +
000071 e6a0     +LDI R26 , LOW ( _0xF + ( 0 ) )
000072 e0b1     +LDI R27 , HIGH ( _0xF + ( 0 ) )
                 	__POINTW2MN _0xF,0
000073 d0ad      	RCALL _Lcd_Write_String
                 ; 0000 001D Lcd_Set_Cursor(2,1);
000074 e0e2      	LDI  R30,LOW(2)
000075 93ea      	ST   -Y,R30
000076 e0a1      	LDI  R26,LOW(1)
000077 d05f      	RCALL _Lcd_Set_Cursor
                 ; 0000 001E Lcd_Write_String("Nhiet do: ");
                +
000078 e6aa     +LDI R26 , LOW ( _0xF + ( 10 ) )
000079 e0b1     +LDI R27 , HIGH ( _0xF + ( 10 ) )
                 	__POINTW2MN _0xF,10
00007a d0a6      	RCALL _Lcd_Write_String
                 ; 0000 001F while (1)
                 _0x10:
                 ; 0000 0020     {
                 ; 0000 0021       a = Read_ADC(0);
00007b e0a0      	LDI  R26,LOW(0)
00007c d027      	RCALL _Read_ADC
00007d 018f      	MOVW R16,R30
                 ; 0000 0022       // gia tri
                 ; 0000 0023       Lcd_Set_Cursor(1,10);
00007e e0e1      	LDI  R30,LOW(1)
00007f 93ea      	ST   -Y,R30
000080 e0aa      	LDI  R26,LOW(10)
000081 d055      	RCALL _Lcd_Set_Cursor
                 ; 0000 0024       Lcd_Write_Char(a/1000+48);
000082 01d8      	MOVW R26,R16
000083 eee8      	LDI  R30,LOW(1000)
000084 e0f3      	LDI  R31,HIGH(1000)
000085 d0b7      	RCALL SUBOPT_0x0
                 ; 0000 0025       Lcd_Write_Char((a%1000)/100+48);
000086 eee8      	LDI  R30,LOW(1000)
000087 e0f3      	LDI  R31,HIGH(1000)
000088 940e 016d 	CALL __MODW21U
00008a 01df      	MOVW R26,R30
00008b e6e4      	LDI  R30,LOW(100)
00008c e0f0      	LDI  R31,HIGH(100)
00008d d0af      	RCALL SUBOPT_0x0
                 ; 0000 0026       Lcd_Write_Char((a%100)/10+48);
00008e e6e4      	LDI  R30,LOW(100)
00008f e0f0      	LDI  R31,HIGH(100)
000090 940e 016d 	CALL __MODW21U
000092 01df      	MOVW R26,R30
000093 e0ea      	LDI  R30,LOW(10)
000094 e0f0      	LDI  R31,HIGH(10)
000095 d0a7      	RCALL SUBOPT_0x0
                 ; 0000 0027       Lcd_Write_Char(a%10+48);
000096 e0ea      	LDI  R30,LOW(10)
000097 e0f0      	LDI  R31,HIGH(10)
000098 940e 016d 	CALL __MODW21U
00009a 5de0      	SUBI R30,-LOW(48)
00009b 2fae      	MOV  R26,R30
00009c d070      	RCALL _Lcd_Write_Char
                 ; 0000 0028     }
00009d cfdd      	RJMP _0x10
                 ; 0000 0029 }
                 _0x13:
00009e cfff      	RJMP _0x13
                 ; .FEND
                 
                 	.DSEG
                 _0xF:
000160           	.BYTE 0x15
                 ;void ADC_Init()
                 ; 0000 002B {
                 
                 	.CSEG
                 _ADC_Init:
                 ; .FSTART _ADC_Init
                 ; 0000 002C   // thanh ghi ADMUX
                 ; 0000 002D   ADMUX |= (1<<REFS0); // dien ap: AVCC, ADCL chua 8 bit thap
00009f 9a3e      	SBI  0x7,6
                 ; 0000 002E   // thanh ghi ADCSRA
                 ; 0000 002F   ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(ADPS0); // cho phep ADC, chia 128
0000a0 b1e6      	IN   R30,0x6
0000a1 68e6      	ORI  R30,LOW(0x86)
0000a2 b9e6      	OUT  0x6,R30
                 ; 0000 0030 }
0000a3 9508      	RET
                 ; .FEND
                 ;unsigned int Read_ADC(unsigned char channel)
                 ; 0000 0032 {
                 _Read_ADC:
                 ; .FSTART _Read_ADC
                 ; 0000 0033   ADMUX |= channel;
0000a4 93aa      	ST   -Y,R26
                 ;	channel -> Y+0
0000a5 b1e7      	IN   R30,0x7
0000a6 81a8      	LD   R26,Y
0000a7 2bea      	OR   R30,R26
0000a8 b9e7      	OUT  0x7,R30
                 ; 0000 0034   delay_us(10);
                +
0000a9 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000aa 958a     +DEC R24
0000ab f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0035   ADCSRA |= (1<<ADSC); // cho phep bat dau chuyen doi
0000ac 9a36      	SBI  0x6,6
                 ; 0000 0036   while(ADIF==0);
                 ; 0000 0037   ADCSRA |= (1<<ADIF);
0000ad 9a34      	SBI  0x6,4
                 ; 0000 0038   return ADCW;
0000ae b1e4      	IN   R30,0x4
0000af b1f5      	IN   R31,0x4+1
0000b0 c024      	RJMP _0x2000001
                 ; 0000 0039 }
                 ; .FEND
                 ;
                 ;
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "lcd4.h"
                 ;
                 ;
                 ;void Lcd_Port(char a)
                 ; 0001 0007 {
                 
                 	.CSEG
                 _Lcd_Port:
                 ; .FSTART _Lcd_Port
                 ; 0001 0008 	if(a & 1)
0000b1 93aa      	ST   -Y,R26
                 ;	a -> Y+0
0000b2 81e8      	LD   R30,Y
0000b3 70e1      	ANDI R30,LOW(0x1)
0000b4 f011      	BREQ _0x20003
                 ; 0001 0009 		D4 = 1;
0000b5 9ac2      	SBI  0x18,2
                 ; 0001 000A 	else
0000b6 c001      	RJMP _0x20006
                 _0x20003:
                 ; 0001 000B 		D4 = 0;
0000b7 98c2      	CBI  0x18,2
                 ; 0001 000C 
                 ; 0001 000D 	if(a & 2)
                 _0x20006:
0000b8 81e8      	LD   R30,Y
0000b9 70e2      	ANDI R30,LOW(0x2)
0000ba f011      	BREQ _0x20009
                 ; 0001 000E 		D5 = 1;
0000bb 9ac3      	SBI  0x18,3
                 ; 0001 000F 	else
0000bc c001      	RJMP _0x2000C
                 _0x20009:
                 ; 0001 0010 		D5 = 0;
0000bd 98c3      	CBI  0x18,3
                 ; 0001 0011 
                 ; 0001 0012 	if(a & 4)
                 _0x2000C:
0000be 81e8      	LD   R30,Y
0000bf 70e4      	ANDI R30,LOW(0x4)
0000c0 f011      	BREQ _0x2000F
                 ; 0001 0013 		D6 = 1;
0000c1 9ac4      	SBI  0x18,4
                 ; 0001 0014 	else
0000c2 c001      	RJMP _0x20012
                 _0x2000F:
                 ; 0001 0015 		D6 = 0;
0000c3 98c4      	CBI  0x18,4
                 ; 0001 0016 
                 ; 0001 0017 	if(a & 8)
                 _0x20012:
0000c4 81e8      	LD   R30,Y
0000c5 70e8      	ANDI R30,LOW(0x8)
0000c6 f011      	BREQ _0x20015
                 ; 0001 0018 		D7 = 1;
0000c7 9ac5      	SBI  0x18,5
                 ; 0001 0019 	else
0000c8 c001      	RJMP _0x20018
                 _0x20015:
                 ; 0001 001A 		D7 = 0;
0000c9 98c5      	CBI  0x18,5
                 ; 0001 001B }
                 _0x20018:
0000ca c00a      	RJMP _0x2000001
                 ; .FEND
                 ;void Lcd_Cmd(char a)
                 ; 0001 001D {
                 _Lcd_Cmd:
                 ; .FSTART _Lcd_Cmd
                 ; 0001 001E 	RS = 0;             // => RS = 0
0000cb 93aa      	ST   -Y,R26
                 ;	a -> Y+0
0000cc 98c0      	CBI  0x18,0
                 ; 0001 001F 	Lcd_Port(a);
0000cd 81a8      	LD   R26,Y
0000ce dfe2      	RCALL _Lcd_Port
                 ; 0001 0020 	EN  = 1;             // => E = 1
0000cf 9ac1      	SBI  0x18,1
                 ; 0001 0021         delay_ms(4);
0000d0 e0a4      	LDI  R26,LOW(4)
0000d1 e0b0      	LDI  R27,0
0000d2 940e 0150 	CALL _delay_ms
                 ; 0001 0022         EN  = 0;             // => E = 0
0000d4 98c1      	CBI  0x18,1
                 ; 0001 0023 }
                 _0x2000001:
0000d5 9621      	ADIW R28,1
0000d6 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Clear()
                 ; 0001 0026 {
                 ; 0001 0027 	Lcd_Cmd(0);
                 ; 0001 0028 	Lcd_Cmd(1);
                 ; 0001 0029 }
                 ;
                 ;void Lcd_Set_Cursor(char a, char b)
                 ; 0001 002C {
                 _Lcd_Set_Cursor:
                 ; .FSTART _Lcd_Set_Cursor
                 ; 0001 002D 	char temp,z,y;
                 ; 0001 002E 	if(a == 1)
0000d7 93aa      	ST   -Y,R26
0000d8 940e 0170 	CALL __SAVELOCR4
                 ;	a -> Y+5
                 ;	b -> Y+4
                 ;	temp -> R17
                 ;	z -> R16
                 ;	y -> R19
0000da 81ad      	LDD  R26,Y+5
0000db 30a1      	CPI  R26,LOW(0x1)
0000dc f419      	BRNE _0x20021
                 ; 0001 002F 	{
                 ; 0001 0030 	  temp = 0x80 + b - 1;
0000dd 81ac      	LDD  R26,Y+4
0000de 58a0      	SUBI R26,-LOW(128)
0000df c005      	RJMP _0x20031
                 ; 0001 0031 		z = temp>>4;
                 ; 0001 0032 		y = temp & 0x0F;
                 ; 0001 0033 		Lcd_Cmd(z);
                 ; 0001 0034 		Lcd_Cmd(y);
                 ; 0001 0035 	}
                 ; 0001 0036 	else if(a == 2)
                 _0x20021:
0000e0 81ad      	LDD  R26,Y+5
0000e1 30a2      	CPI  R26,LOW(0x2)
0000e2 f479      	BRNE _0x20023
                 ; 0001 0037 	{
                 ; 0001 0038 		temp = 0xC0 + b - 1;
0000e3 81ac      	LDD  R26,Y+4
0000e4 54a0      	SUBI R26,-LOW(192)
                 _0x20031:
0000e5 50a1      	SUBI R26,LOW(1)
0000e6 2f1a      	MOV  R17,R26
                 ; 0001 0039 		z = temp>>4;
0000e7 2fe1      	MOV  R30,R17
0000e8 95e2      	SWAP R30
0000e9 70ef      	ANDI R30,0xF
0000ea 2f0e      	MOV  R16,R30
                 ; 0001 003A 		y = temp & 0x0F;
0000eb 2fe1      	MOV  R30,R17
0000ec 70ef      	ANDI R30,LOW(0xF)
0000ed 2f3e      	MOV  R19,R30
                 ; 0001 003B 		Lcd_Cmd(z);
0000ee 2fa0      	MOV  R26,R16
0000ef dfdb      	RCALL _Lcd_Cmd
                 ; 0001 003C 		Lcd_Cmd(y);
0000f0 2fa3      	MOV  R26,R19
0000f1 dfd9      	RCALL _Lcd_Cmd
                 ; 0001 003D 	}
                 ; 0001 003E }
                 _0x20023:
0000f2 940e 0175 	CALL __LOADLOCR4
0000f4 9626      	ADIW R28,6
0000f5 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Init()
                 ; 0001 0041 {
                 _Lcd_Init:
                 ; .FSTART _Lcd_Init
                 ; 0001 0042   Lcd_Port(0x00);
0000f6 e0a0      	LDI  R26,LOW(0)
0000f7 dfb9      	RCALL _Lcd_Port
                 ; 0001 0043   delay_ms(20);
0000f8 e1a4      	LDI  R26,LOW(20)
0000f9 d04a      	RCALL SUBOPT_0x1
                 ; 0001 0044   Lcd_Cmd(0x03);
                 ; 0001 0045   delay_ms(5);
0000fa e0a5      	LDI  R26,LOW(5)
0000fb d048      	RCALL SUBOPT_0x1
                 ; 0001 0046   Lcd_Cmd(0x03);
                 ; 0001 0047   delay_ms(11);
0000fc e0ab      	LDI  R26,LOW(11)
0000fd d046      	RCALL SUBOPT_0x1
                 ; 0001 0048   Lcd_Cmd(0x03);
                 ; 0001 0049   /////////////////////////////////////////////////////
                 ; 0001 004A   Lcd_Cmd(0x02);
0000fe e0a2      	LDI  R26,LOW(2)
0000ff dfcb      	RCALL _Lcd_Cmd
                 ; 0001 004B   Lcd_Cmd(0x02);
000100 e0a2      	LDI  R26,LOW(2)
000101 dfc9      	RCALL _Lcd_Cmd
                 ; 0001 004C   Lcd_Cmd(0x08);
000102 e0a8      	LDI  R26,LOW(8)
000103 dfc7      	RCALL _Lcd_Cmd
                 ; 0001 004D   Lcd_Cmd(0x00);
000104 e0a0      	LDI  R26,LOW(0)
000105 dfc5      	RCALL _Lcd_Cmd
                 ; 0001 004E   Lcd_Cmd(0x0C);
000106 e0ac      	LDI  R26,LOW(12)
000107 dfc3      	RCALL _Lcd_Cmd
                 ; 0001 004F   Lcd_Cmd(0x00);
000108 e0a0      	LDI  R26,LOW(0)
000109 dfc1      	RCALL _Lcd_Cmd
                 ; 0001 0050   Lcd_Cmd(0x06);
00010a e0a6      	LDI  R26,LOW(6)
00010b dfbf      	RCALL _Lcd_Cmd
                 ; 0001 0051 }
00010c 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Write_Char(char a)
                 ; 0001 0054 {
                 _Lcd_Write_Char:
                 ; .FSTART _Lcd_Write_Char
                 ; 0001 0055    char temp,y;
                 ; 0001 0056    temp = a&0x0F;
00010d 93aa      	ST   -Y,R26
00010e 931a      	ST   -Y,R17
00010f 930a      	ST   -Y,R16
                 ;	a -> Y+2
                 ;	temp -> R17
                 ;	y -> R16
000110 81ea      	LDD  R30,Y+2
000111 70ef      	ANDI R30,LOW(0xF)
000112 2f1e      	MOV  R17,R30
                 ; 0001 0057    y = a&0xF0;
000113 81ea      	LDD  R30,Y+2
000114 7fe0      	ANDI R30,LOW(0xF0)
000115 2f0e      	MOV  R16,R30
                 ; 0001 0058    RS = 1;             // => RS = 1
000116 9ac0      	SBI  0x18,0
                 ; 0001 0059    Lcd_Port(y>>4);             //Data transfer
000117 95e2      	SWAP R30
000118 70ef      	ANDI R30,0xF
000119 2fae      	MOV  R26,R30
00011a d02e      	RCALL SUBOPT_0x2
                 ; 0001 005A    EN = 1;
                 ; 0001 005B    delay_us(40);
                 ; 0001 005C    EN = 0;
                 ; 0001 005D    Lcd_Port(temp);
00011b 2fa1      	MOV  R26,R17
00011c d02c      	RCALL SUBOPT_0x2
                 ; 0001 005E    EN = 1;
                 ; 0001 005F    delay_us(40);
                 ; 0001 0060    EN = 0;
                 ; 0001 0061 }
00011d 8119      	LDD  R17,Y+1
00011e 8108      	LDD  R16,Y+0
00011f 9623      	ADIW R28,3
000120 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Write_String(char *a)
                 ; 0001 0064 {
                 _Lcd_Write_String:
                 ; .FSTART _Lcd_Write_String
                 ; 0001 0065 	int i;
                 ; 0001 0066 	for(i=0;a[i]!='\0';i++)
000121 93ba      	ST   -Y,R27
000122 93aa      	ST   -Y,R26
000123 931a      	ST   -Y,R17
000124 930a      	ST   -Y,R16
                 ;	*a -> Y+2
                 ;	i -> R16,R17
                +
000125 e000     +LDI R16 , LOW ( 0 )
000126 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2002F:
000127 01f8      	MOVW R30,R16
000128 81aa      	LDD  R26,Y+2
000129 81bb      	LDD  R27,Y+2+1
00012a 0fae      	ADD  R26,R30
00012b 1fbf      	ADC  R27,R31
00012c 91ec      	LD   R30,X
00012d 30e0      	CPI  R30,0
00012e f051      	BREQ _0x20030
                 ; 0001 0067 	   Lcd_Write_Char(a[i]);
00012f 01f8      	MOVW R30,R16
000130 81aa      	LDD  R26,Y+2
000131 81bb      	LDD  R27,Y+2+1
000132 0fae      	ADD  R26,R30
000133 1fbf      	ADC  R27,R31
000134 91ac      	LD   R26,X
000135 dfd7      	RCALL _Lcd_Write_Char
                +
000136 5f0f     +SUBI R16 , LOW ( - 1 )
000137 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000138 cfee      	RJMP _0x2002F
                 _0x20030:
                 ; 0001 0068 }
000139 8119      	LDD  R17,Y+1
00013a 8108      	LDD  R16,Y+0
00013b 9624      	ADIW R28,4
00013c 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Shift_Right()
                 ; 0001 006B {
                 ; 0001 006C 	Lcd_Cmd(0x01);
                 ; 0001 006D 	Lcd_Cmd(0x0C);
                 ; 0001 006E }
                 ;
                 ;void Lcd_Shift_Left()
                 ; 0001 0071 {
                 ; 0001 0072 	Lcd_Cmd(0x01);
                 ; 0001 0073 	Lcd_Cmd(0x08);
                 ; 0001 0074 }
                 ;
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
00013d 940e 015a 	CALL __DIVW21U
00013f 5de0      	SUBI R30,-LOW(48)
000140 2fae      	MOV  R26,R30
000141 dfcb      	RCALL _Lcd_Write_Char
000142 01d8      	MOVW R26,R16
000143 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000144 e0b0      	LDI  R27,0
000145 940e 0150 	CALL _delay_ms
000147 e0a3      	LDI  R26,LOW(3)
000148 cf82      	RJMP _Lcd_Cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000149 df67      	RCALL _Lcd_Port
00014a 9ac1      	SBI  0x18,1
                +
00014b e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
00014c 958a     +DEC R24
00014d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
00014e 98c1      	CBI  0x18,1
00014f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000150 9610      	adiw r26,0
000151 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000152 ed80     +LDI R24 , LOW ( 0x7D0 )
000153 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000154 9701     +SBIW R24 , 1
000155 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000156 95a8      	wdr
000157 9711      	sbiw r26,1
000158 f7c9      	brne __delay_ms0
                 __delay_ms1:
000159 9508      	ret
                 
                 __DIVW21U:
00015a 2400      	CLR  R0
00015b 2411      	CLR  R1
00015c e190      	LDI  R25,16
                 __DIVW21U1:
00015d 0faa      	LSL  R26
00015e 1fbb      	ROL  R27
00015f 1c00      	ROL  R0
000160 1c11      	ROL  R1
000161 1a0e      	SUB  R0,R30
000162 0a1f      	SBC  R1,R31
000163 f418      	BRCC __DIVW21U2
000164 0e0e      	ADD  R0,R30
000165 1e1f      	ADC  R1,R31
000166 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000167 60a1      	SBR  R26,1
                 __DIVW21U3:
000168 959a      	DEC  R25
000169 f799      	BRNE __DIVW21U1
00016a 01fd      	MOVW R30,R26
00016b 01d0      	MOVW R26,R0
00016c 9508      	RET
                 
                 __MODW21U:
00016d dfec      	RCALL __DIVW21U
00016e 01fd      	MOVW R30,R26
00016f 9508      	RET
                 
                 __SAVELOCR4:
000170 933a      	ST   -Y,R19
                 __SAVELOCR3:
000171 932a      	ST   -Y,R18
                 __SAVELOCR2:
000172 931a      	ST   -Y,R17
000173 930a      	ST   -Y,R16
000174 9508      	RET
                 
                 __LOADLOCR4:
000175 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000176 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000177 8119      	LDD  R17,Y+1
000178 8108      	LD   R16,Y
000179 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :   9 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  16 r17:  13 r18:   2 r19:   4 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  13 r25:   5 r26:  62 r27:  12 r28:   5 r29:   1 r30:  72 r31:  14 
x  :   5 y  :  41 z  :   7 
Registers used: 18 out of 35 (51.4%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :   5 and   :   0 andi  :   9 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   7 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  10 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   8 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   0 jmp   :  22 ld    :   9 ldd   :  17 ldi   :  55 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  13 movw  :  13 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :   8 pop   :   0 push  :   0 rcall :  31 ret   :  13 
reti  :   0 rjmp  :  13 rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :  16 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  20 std   :   0 sts   :   0 sub   :   1 subi  :   6 swap  :   2 
tst   :   0 wdr   :   1 
Instructions used: 39 out of 116 (33.6%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002f4    720     36    756   16384   4.6%
[.dseg] 0x000060 0x000175      0     21     21    1024   2.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
