
SPI_P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c2  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000769  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000496  00000000  00000000  00001537  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  000019d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000254  00000000  00000000  00001e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000020b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  64:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:
	_delay_ms(50);
  }
}void ADC_Init()
{
	// thanh ghi ADMUX
	ADMUX |= (1<<REFS0); // dien ap: AVCC, ADCL chua 8 bit thap
  6c:	3e 9a       	sbi	0x07, 6	; 7
	// thanh ghi ADCSRA
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(ADPS0); // cho phep ADC, chia 128
  6e:	86 b1       	in	r24, 0x06	; 6
  70:	86 68       	ori	r24, 0x86	; 134
  72:	86 b9       	out	0x06, r24	; 6
  74:	08 95       	ret

00000076 <Read_ADC>:
}
unsigned int Read_ADC(unsigned char channel)
{
	ADMUX &= 0xE0;
  76:	97 b1       	in	r25, 0x07	; 7
  78:	90 7e       	andi	r25, 0xE0	; 224
  7a:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
  7c:	97 b1       	in	r25, 0x07	; 7
  7e:	89 2b       	or	r24, r25
  80:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	8f e3       	ldi	r24, 0x3F	; 63
  84:	9f e1       	ldi	r25, 0x1F	; 31
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <Read_ADC+0x10>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <Read_ADC+0x16>
  8c:	00 00       	nop
	_delay_ms(2);
	ADCSRA |= (1<<ADSC); // cho phep bat dau chuyen doi
  8e:	36 9a       	sbi	0x06, 6	; 6
	while(ADIF==0);
	ADCSRA |= (1<<ADIF);
  90:	34 9a       	sbi	0x06, 4	; 6
	return ADCW;
  92:	84 b1       	in	r24, 0x04	; 4
  94:	95 b1       	in	r25, 0x05	; 5
}
  96:	08 95       	ret

00000098 <main>:
unsigned int Read_ADC(unsigned char channel);
int main(void)
{
  unsigned int a, b;
  // port
  cbi(DDRA, PA0);
  98:	d0 98       	cbi	0x1a, 0	; 26
  cbi(DDRA, PA1);
  9a:	d1 98       	cbi	0x1a, 1	; 26
  // chuong trinh conn
  Spi_Init_Master();
  9c:	0e 94 4a 01 	call	0x294	; 0x294 <Spi_Init_Master>
  ADC_Init();
  a0:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	89 e6       	ldi	r24, 0x69	; 105
  a8:	98 e1       	ldi	r25, 0x18	; 24
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x12>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x1c>
  b4:	00 00       	nop
    a =  Read_ADC(0);
	b =  Read_ADC(1);
    Spi_Write(':');
	_delay_us(10);
	Spi_Write(a/1000);
	Spi_Write(a%1000/100);
  b6:	08 ee       	ldi	r16, 0xE8	; 232
  b8:	13 e0       	ldi	r17, 0x03	; 3
	Spi_Write(a%100/10);
  ba:	0f 2e       	mov	r0, r31
  bc:	f4 e6       	ldi	r31, 0x64	; 100
  be:	ff 2e       	mov	r15, r31
  c0:	f0 2d       	mov	r31, r0
  Spi_Init_Master();
  ADC_Init();
  _delay_ms(500);
  while(1)
  {
    a =  Read_ADC(0);
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 3b 00 	call	0x76	; 0x76 <Read_ADC>
  c8:	6c 01       	movw	r12, r24
	b =  Read_ADC(1);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 3b 00 	call	0x76	; 0x76 <Read_ADC>
  d0:	ec 01       	movw	r28, r24
    Spi_Write(':');
  d2:	8a e3       	ldi	r24, 0x3A	; 58
  d4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Spi_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	25 e3       	ldi	r18, 0x35	; 53
  da:	2a 95       	dec	r18
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x42>
  de:	00 00       	nop
	_delay_us(10);
	Spi_Write(a/1000);
  e0:	96 01       	movw	r18, r12
  e2:	36 95       	lsr	r19
  e4:	27 95       	ror	r18
  e6:	36 95       	lsr	r19
  e8:	27 95       	ror	r18
  ea:	36 95       	lsr	r19
  ec:	27 95       	ror	r18
  ee:	a5 ec       	ldi	r26, 0xC5	; 197
  f0:	b0 e2       	ldi	r27, 0x20	; 32
  f2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__umulhisi3>
  f6:	5c 01       	movw	r10, r24
  f8:	b6 94       	lsr	r11
  fa:	a7 94       	ror	r10
  fc:	b6 94       	lsr	r11
  fe:	a7 94       	ror	r10
 100:	b6 94       	lsr	r11
 102:	a7 94       	ror	r10
 104:	b6 94       	lsr	r11
 106:	a7 94       	ror	r10
 108:	8a 2d       	mov	r24, r10
 10a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Spi_Write>
	Spi_Write(a%1000/100);
 10e:	a0 9e       	mul	r10, r16
 110:	c0 01       	movw	r24, r0
 112:	a1 9e       	mul	r10, r17
 114:	90 0d       	add	r25, r0
 116:	b0 9e       	mul	r11, r16
 118:	90 0d       	add	r25, r0
 11a:	11 24       	eor	r1, r1
 11c:	96 01       	movw	r18, r12
 11e:	28 1b       	sub	r18, r24
 120:	39 0b       	sbc	r19, r25
 122:	36 95       	lsr	r19
 124:	27 95       	ror	r18
 126:	36 95       	lsr	r19
 128:	27 95       	ror	r18
 12a:	ab e7       	ldi	r26, 0x7B	; 123
 12c:	b4 e1       	ldi	r27, 0x14	; 20
 12e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__umulhisi3>
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Spi_Write>
	Spi_Write(a%100/10);
 13a:	96 01       	movw	r18, r12
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	36 95       	lsr	r19
 142:	27 95       	ror	r18
 144:	ab e7       	ldi	r26, 0x7B	; 123
 146:	b4 e1       	ldi	r27, 0x14	; 20
 148:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__umulhisi3>
 14c:	96 95       	lsr	r25
 14e:	87 95       	ror	r24
 150:	f8 9e       	mul	r15, r24
 152:	90 01       	movw	r18, r0
 154:	f9 9e       	mul	r15, r25
 156:	30 0d       	add	r19, r0
 158:	11 24       	eor	r1, r1
 15a:	c6 01       	movw	r24, r12
 15c:	82 1b       	sub	r24, r18
 15e:	93 0b       	sbc	r25, r19
 160:	9c 01       	movw	r18, r24
 162:	ad ec       	ldi	r26, 0xCD	; 205
 164:	bc ec       	ldi	r27, 0xCC	; 204
 166:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__umulhisi3>
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	96 95       	lsr	r25
 174:	87 95       	ror	r24
 176:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Spi_Write>
	Spi_Write(a%10);
 17a:	96 01       	movw	r18, r12
 17c:	ad ec       	ldi	r26, 0xCD	; 205
 17e:	bc ec       	ldi	r27, 0xCC	; 204
 180:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__umulhisi3>
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	9c 01       	movw	r18, r24
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	82 0f       	add	r24, r18
 1a4:	93 1f       	adc	r25, r19
 1a6:	2c 2d       	mov	r18, r12
 1a8:	28 1b       	sub	r18, r24
 1aa:	82 2f       	mov	r24, r18
 1ac:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Spi_Write>
	Spi_Write(b/1000);
 1b0:	9e 01       	movw	r18, r28
 1b2:	36 95       	lsr	r19
 1b4:	27 95       	ror	r18
 1b6:	36 95       	lsr	r19
 1b8:	27 95       	ror	r18
 1ba:	36 95       	lsr	r19
 1bc:	27 95       	ror	r18
 1be:	a5 ec       	ldi	r26, 0xC5	; 197
 1c0:	b0 e2       	ldi	r27, 0x20	; 32
 1c2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__umulhisi3>
 1c6:	6c 01       	movw	r12, r24
 1c8:	d6 94       	lsr	r13
 1ca:	c7 94       	ror	r12
 1cc:	d6 94       	lsr	r13
 1ce:	c7 94       	ror	r12
 1d0:	d6 94       	lsr	r13
 1d2:	c7 94       	ror	r12
 1d4:	d6 94       	lsr	r13
 1d6:	c7 94       	ror	r12
 1d8:	8c 2d       	mov	r24, r12
 1da:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Spi_Write>
	Spi_Write(b%1000/100);
 1de:	c0 9e       	mul	r12, r16
 1e0:	c0 01       	movw	r24, r0
 1e2:	c1 9e       	mul	r12, r17
 1e4:	90 0d       	add	r25, r0
 1e6:	d0 9e       	mul	r13, r16
 1e8:	90 0d       	add	r25, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	9e 01       	movw	r18, r28
 1ee:	28 1b       	sub	r18, r24
 1f0:	39 0b       	sbc	r19, r25
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	36 95       	lsr	r19
 1f8:	27 95       	ror	r18
 1fa:	ab e7       	ldi	r26, 0x7B	; 123
 1fc:	b4 e1       	ldi	r27, 0x14	; 20
 1fe:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__umulhisi3>
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Spi_Write>
	Spi_Write(b%100/10);
 20a:	9e 01       	movw	r18, r28
 20c:	36 95       	lsr	r19
 20e:	27 95       	ror	r18
 210:	36 95       	lsr	r19
 212:	27 95       	ror	r18
 214:	ab e7       	ldi	r26, 0x7B	; 123
 216:	b4 e1       	ldi	r27, 0x14	; 20
 218:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__umulhisi3>
 21c:	96 95       	lsr	r25
 21e:	87 95       	ror	r24
 220:	f8 9e       	mul	r15, r24
 222:	90 01       	movw	r18, r0
 224:	f9 9e       	mul	r15, r25
 226:	30 0d       	add	r19, r0
 228:	11 24       	eor	r1, r1
 22a:	ce 01       	movw	r24, r28
 22c:	82 1b       	sub	r24, r18
 22e:	93 0b       	sbc	r25, r19
 230:	9c 01       	movw	r18, r24
 232:	ad ec       	ldi	r26, 0xCD	; 205
 234:	bc ec       	ldi	r27, 0xCC	; 204
 236:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__umulhisi3>
 23a:	96 95       	lsr	r25
 23c:	87 95       	ror	r24
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Spi_Write>
	Spi_Write(b%10);
 24a:	9e 01       	movw	r18, r28
 24c:	ad ec       	ldi	r26, 0xCD	; 205
 24e:	bc ec       	ldi	r27, 0xCC	; 204
 250:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__umulhisi3>
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	9c 01       	movw	r18, r24
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	82 0f       	add	r24, r18
 274:	93 1f       	adc	r25, r19
 276:	2c 2f       	mov	r18, r28
 278:	28 1b       	sub	r18, r24
 27a:	82 2f       	mov	r24, r18
 27c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Spi_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	90 e7       	ldi	r25, 0x70	; 112
 284:	22 e0       	ldi	r18, 0x02	; 2
 286:	81 50       	subi	r24, 0x01	; 1
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	20 40       	sbci	r18, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x1ee>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x1f8>
 290:	00 00       	nop
 292:	17 cf       	rjmp	.-466    	; 0xc2 <main+0x2a>

00000294 <Spi_Init_Master>:
void Spi_Read_Text(char *Output, unsigned int length)
{
	int i;
	for(i=0;i<length;i++)
	Output[i] = Spi_Read();
}
 294:	87 b3       	in	r24, 0x17	; 23
 296:	80 6b       	ori	r24, 0xB0	; 176
 298:	87 bb       	out	0x17, r24	; 23
 29a:	be 98       	cbi	0x17, 6	; 23
 29c:	6c 9a       	sbi	0x0d, 4	; 13
 29e:	8d b1       	in	r24, 0x0d	; 13
 2a0:	83 60       	ori	r24, 0x03	; 3
 2a2:	8d b9       	out	0x0d, r24	; 13
 2a4:	6e 9a       	sbi	0x0d, 6	; 13
 2a6:	08 95       	ret

000002a8 <Spi_Write>:
void Spi_Write(char data)
{
	SPDR = data;
 2a8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 2aa:	77 9b       	sbis	0x0e, 7	; 14
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <Spi_Write+0x2>
}
 2ae:	08 95       	ret

000002b0 <__umulhisi3>:
 2b0:	a2 9f       	mul	r26, r18
 2b2:	b0 01       	movw	r22, r0
 2b4:	b3 9f       	mul	r27, r19
 2b6:	c0 01       	movw	r24, r0
 2b8:	a3 9f       	mul	r26, r19
 2ba:	70 0d       	add	r23, r0
 2bc:	81 1d       	adc	r24, r1
 2be:	11 24       	eor	r1, r1
 2c0:	91 1d       	adc	r25, r1
 2c2:	b2 9f       	mul	r27, r18
 2c4:	70 0d       	add	r23, r0
 2c6:	81 1d       	adc	r24, r1
 2c8:	11 24       	eor	r1, r1
 2ca:	91 1d       	adc	r25, r1
 2cc:	08 95       	ret

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
