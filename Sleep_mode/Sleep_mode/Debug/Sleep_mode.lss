
Sleep_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d8  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e0  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016b  00000000  00000000  00001607  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001772  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_18>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Interrupt_Init>:
	}
}
void Interrupt_Init()
{
	// thanh ghi MCUCR
	MCUCR |= (1<<ISC01)|~(1<<ISC00)|(1<<ISC11)|~(1<<ISC10); // canh xuong
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	85 bf       	out	0x35, r24	; 53
	MCUCSR |= (1<<ISC2); // canh xuong cho INT2
  72:	84 b7       	in	r24, 0x34	; 52
  74:	80 64       	ori	r24, 0x40	; 64
  76:	84 bf       	out	0x34, r24	; 52
	// thanh ghi GICF
	GICR |= (1<<INT0)|(1<<INT1)|(1<<INT2); // cho phep ngat 3 ngat ngoai
  78:	8b b7       	in	r24, 0x3b	; 59
  7a:	80 6e       	ori	r24, 0xE0	; 224
  7c:	8b bf       	out	0x3b, r24	; 59
  7e:	08 95       	ret

00000080 <main>:
#include <avr/sleep.h>

void Interrupt_Init();
int main(void)
{
	sbi(DDRA,0);
  80:	d0 9a       	sbi	0x1a, 0	; 26
	sbi(DDRA,1);
  82:	d1 9a       	sbi	0x1a, 1	; 26
	sbi(DDRA,2);
  84:	d2 9a       	sbi	0x1a, 2	; 26
	DDRC = 0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 bb       	out	0x14, r24	; 20
	//
	Interrupt_Init();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <Interrupt_Init>
	//
	set_sleep_mode(SLEEP_MODE_IDLE);
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	8f 74       	andi	r24, 0x4F	; 79
  92:	85 bf       	out	0x35, r24	; 53
	cli();
  94:	f8 94       	cli
	sei();
  96:	78 94       	sei
	sleep_mode();
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	85 bf       	out	0x35, r24	; 53
  9e:	88 95       	sleep
  a0:	85 b7       	in	r24, 0x35	; 53
  a2:	8f 7b       	andi	r24, 0xBF	; 191
  a4:	85 bf       	out	0x35, r24	; 53
	while(1)
	{
		PORTC = 0xAA;
  a6:	2a ea       	ldi	r18, 0xAA	; 170
		_delay_ms(500);
		PORTC = 0x55;
  a8:	95 e5       	ldi	r25, 0x55	; 85
	cli();
	sei();
	sleep_mode();
	while(1)
	{
		PORTC = 0xAA;
  aa:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	3f ef       	ldi	r19, 0xFF	; 255
  ae:	49 e6       	ldi	r20, 0x69	; 105
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	31 50       	subi	r19, 0x01	; 1
  b4:	40 40       	sbci	r20, 0x00	; 0
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
		_delay_ms(500);
		PORTC = 0x55;
  be:	95 bb       	out	0x15, r25	; 21
  c0:	3f ef       	ldi	r19, 0xFF	; 255
  c2:	49 e6       	ldi	r20, 0x69	; 105
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	31 50       	subi	r19, 0x01	; 1
  c8:	40 40       	sbci	r20, 0x00	; 0
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x46>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x50>
  d0:	00 00       	nop
		_delay_ms(500);
		sleep_mode();
  d2:	85 b7       	in	r24, 0x35	; 53
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	85 bf       	out	0x35, r24	; 53
  d8:	88 95       	sleep
  da:	85 b7       	in	r24, 0x35	; 53
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	85 bf       	out	0x35, r24	; 53
  e0:	e4 cf       	rjmp	.-56     	; 0xaa <main+0x2a>

000000e2 <__vector_1>:
	MCUCSR |= (1<<ISC2); // canh xuong cho INT2
	// thanh ghi GICF
	GICR |= (1<<INT0)|(1<<INT1)|(1<<INT2); // cho phep ngat 3 ngat ngoai
}
ISR(INT0_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	tbi(PORTA,0);
  f0:	9b b3       	in	r25, 0x1b	; 27
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	89 27       	eor	r24, r25
  f6:	8b bb       	out	0x1b, r24	; 27
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_2>:
ISR(INT1_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
	tbi(PORTA,1);
 114:	9b b3       	in	r25, 0x1b	; 27
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	89 27       	eor	r24, r25
 11a:	8b bb       	out	0x1b, r24	; 27
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <__vector_18>:
ISR(INT2_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
	tbi(PORTA,2);
 138:	9b b3       	in	r25, 0x1b	; 27
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	89 27       	eor	r24, r25
 13e:	8b bb       	out	0x1b, r24	; 27
	sleep_disable();
 140:	85 b7       	in	r24, 0x35	; 53
 142:	8f 7b       	andi	r24, 0xBF	; 191
 144:	85 bf       	out	0x35, r24	; 53
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
