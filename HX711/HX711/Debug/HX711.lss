
HX711.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000726  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000726  0000079a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011f2  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000918  00000000  00000000  00001af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009e4  00000000  00000000  0000240a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00002df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048e  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ada  00000000  00000000  00003436  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003f10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  7a:	0c 94 91 03 	jmp	0x722	; 0x722 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2C_Init>:
			I2C_Stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
  82:	11 b8       	out	0x01, r1	; 1
  84:	88 e4       	ldi	r24, 0x48	; 72
  86:	80 b9       	out	0x00, r24	; 0
  88:	08 95       	ret

0000008a <I2C_Start>:
  8a:	94 ea       	ldi	r25, 0xA4	; 164
  8c:	96 bf       	out	0x36, r25	; 54
  8e:	06 b6       	in	r0, 0x36	; 54
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <I2C_Start+0x4>
  94:	91 b1       	in	r25, 0x01	; 1
  96:	98 7f       	andi	r25, 0xF8	; 248
  98:	98 30       	cpi	r25, 0x08	; 8
  9a:	71 f4       	brne	.+28     	; 0xb8 <I2C_Start+0x2e>
  9c:	83 b9       	out	0x03, r24	; 3
  9e:	84 e8       	ldi	r24, 0x84	; 132
  a0:	86 bf       	out	0x36, r24	; 54
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <I2C_Start+0x18>
  a8:	81 b1       	in	r24, 0x01	; 1
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	88 31       	cpi	r24, 0x18	; 24
  ae:	31 f0       	breq	.+12     	; 0xbc <I2C_Start+0x32>
  b0:	80 32       	cpi	r24, 0x20	; 32
  b2:	31 f0       	breq	.+12     	; 0xc0 <I2C_Start+0x36>
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	08 95       	ret
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	08 95       	ret
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	08 95       	ret
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	08 95       	ret

000000c4 <I2C_Stop>:
  c4:	84 e9       	ldi	r24, 0x94	; 148
  c6:	86 bf       	out	0x36, r24	; 54
  c8:	06 b6       	in	r0, 0x36	; 54
  ca:	04 fc       	sbrc	r0, 4
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <I2C_Stop+0x4>
  ce:	08 95       	ret

000000d0 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
  d0:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
  d6:	06 b6       	in	r0, 0x36	; 54
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
  dc:	81 b1       	in	r24, 0x01	; 1
  de:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
  e0:	88 32       	cpi	r24, 0x28	; 40
  e2:	21 f0       	breq	.+8      	; 0xec <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
  e4:	80 33       	cpi	r24, 0x30	; 48
  e6:	21 f0       	breq	.+8      	; 0xf0 <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
  f0:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
  f2:	08 95       	ret

000000f4 <Lcd_Write_Char>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	90 e1       	ldi	r25, 0x10	; 16
  fc:	89 9f       	mul	r24, r25
  fe:	80 01       	movw	r16, r0
 100:	11 24       	eor	r1, r1
 102:	c8 2f       	mov	r28, r24
 104:	c0 7f       	andi	r28, 0xF0	; 240
 106:	8e e4       	ldi	r24, 0x4E	; 78
 108:	0e 94 45 00 	call	0x8a	; 0x8a <I2C_Start>
 10c:	8c 2f       	mov	r24, r28
 10e:	8d 60       	ori	r24, 0x0D	; 13
 110:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 114:	8f e3       	ldi	r24, 0x3F	; 63
 116:	9f e1       	ldi	r25, 0x1F	; 31
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <Lcd_Write_Char+0x24>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <Lcd_Write_Char+0x2a>
 11e:	00 00       	nop
 120:	8c 2f       	mov	r24, r28
 122:	89 60       	ori	r24, 0x09	; 9
 124:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9f e1       	ldi	r25, 0x1F	; 31
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <Lcd_Write_Char+0x38>
 130:	00 c0       	rjmp	.+0      	; 0x132 <Lcd_Write_Char+0x3e>
 132:	00 00       	nop
 134:	80 2f       	mov	r24, r16
 136:	8d 60       	ori	r24, 0x0D	; 13
 138:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9f e1       	ldi	r25, 0x1F	; 31
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <Lcd_Write_Char+0x4c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <Lcd_Write_Char+0x52>
 146:	00 00       	nop
 148:	80 2f       	mov	r24, r16
 14a:	89 60       	ori	r24, 0x09	; 9
 14c:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 150:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Stop>
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <lcd_send_cmd>:
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	90 e1       	ldi	r25, 0x10	; 16
 164:	89 9f       	mul	r24, r25
 166:	80 01       	movw	r16, r0
 168:	11 24       	eor	r1, r1
 16a:	c8 2f       	mov	r28, r24
 16c:	c0 7f       	andi	r28, 0xF0	; 240
 16e:	8e e4       	ldi	r24, 0x4E	; 78
 170:	0e 94 45 00 	call	0x8a	; 0x8a <I2C_Start>
 174:	8c 2f       	mov	r24, r28
 176:	8c 60       	ori	r24, 0x0C	; 12
 178:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9f e1       	ldi	r25, 0x1F	; 31
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_send_cmd+0x24>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_send_cmd+0x2a>
 186:	00 00       	nop
 188:	8c 2f       	mov	r24, r28
 18a:	88 60       	ori	r24, 0x08	; 8
 18c:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 190:	8f e3       	ldi	r24, 0x3F	; 63
 192:	9f e1       	ldi	r25, 0x1F	; 31
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_send_cmd+0x38>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_send_cmd+0x3e>
 19a:	00 00       	nop
 19c:	80 2f       	mov	r24, r16
 19e:	8c 60       	ori	r24, 0x0C	; 12
 1a0:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 1a4:	8f e3       	ldi	r24, 0x3F	; 63
 1a6:	9f e1       	ldi	r25, 0x1F	; 31
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_send_cmd+0x4c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_send_cmd+0x52>
 1ae:	00 00       	nop
 1b0:	80 2f       	mov	r24, r16
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 1b8:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Stop>
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <Lcd_Init>:
	lcd_send_cmd(1);
	_delay_ms(2);
}
void Lcd_Init()
{
	lcd_send_cmd(0x02);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 1ca:	8f e3       	ldi	r24, 0x3F	; 63
 1cc:	9f e1       	ldi	r25, 0x1F	; 31
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <Lcd_Init+0xa>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <Lcd_Init+0x10>
 1d4:	00 00       	nop
	_delay_ms(2);
	lcd_send_cmd(0x28);
 1d6:	88 e2       	ldi	r24, 0x28	; 40
 1d8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <Lcd_Init+0x1c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <Lcd_Init+0x22>
 1e6:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(0x0c);
 1e8:	8c e0       	ldi	r24, 0x0C	; 12
 1ea:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 1ee:	8f e9       	ldi	r24, 0x9F	; 159
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <Lcd_Init+0x2e>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <Lcd_Init+0x34>
 1f8:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(0x80);
 1fa:	80 e8       	ldi	r24, 0x80	; 128
 1fc:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 200:	8f e9       	ldi	r24, 0x9F	; 159
 202:	9f e0       	ldi	r25, 0x0F	; 15
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <Lcd_Init+0x40>
 208:	00 c0       	rjmp	.+0      	; 0x20a <Lcd_Init+0x46>
 20a:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(0x01);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	9f e1       	ldi	r25, 0x1F	; 31
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <Lcd_Init+0x52>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <Lcd_Init+0x58>
 21c:	00 00       	nop
 21e:	08 95       	ret

00000220 <Lcd_Write_String>:
	_delay_ms(2);
}
void Lcd_Write_String(char *str)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!='\0';i++)
 226:	88 81       	ld	r24, Y
 228:	88 23       	and	r24, r24
 22a:	31 f0       	breq	.+12     	; 0x238 <Lcd_Write_String+0x18>
 22c:	21 96       	adiw	r28, 0x01	; 1
	Lcd_Write_Char(str[i]);
 22e:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Write_Char>
	_delay_ms(2);
}
void Lcd_Write_String(char *str)
{
	int i;
	for(i=0;str[i]!='\0';i++)
 232:	89 91       	ld	r24, Y+
 234:	81 11       	cpse	r24, r1
 236:	fb cf       	rjmp	.-10     	; 0x22e <Lcd_Write_String+0xe>
	Lcd_Write_Char(str[i]);
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <Lcd_Set_Cursor>:
void Lcd_Set_Cursor(unsigned char row, unsigned char col)
{
	unsigned char cmd;
	cmd = (row==1?0x80:0xC0) + col - 1;
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	11 f0       	breq	.+4      	; 0x246 <Lcd_Set_Cursor+0x8>
 242:	80 ec       	ldi	r24, 0xC0	; 192
 244:	01 c0       	rjmp	.+2      	; 0x248 <Lcd_Set_Cursor+0xa>
 246:	80 e8       	ldi	r24, 0x80	; 128
	lcd_send_cmd(cmd);
 248:	61 50       	subi	r22, 0x01	; 1
 24a:	86 0f       	add	r24, r22
 24c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	9f e1       	ldi	r25, 0x1F	; 31
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <Lcd_Set_Cursor+0x16>
 258:	00 c0       	rjmp	.+0      	; 0x25a <Lcd_Set_Cursor+0x1c>
 25a:	00 00       	nop
 25c:	08 95       	ret

0000025e <ReadCount>:
#define PORT PORTB
int32_t ReadCount()        /* Function to read measurement from HX711 */
{
	int32_t Count = 0;
	uint8_t i;
	sbi(PORT,Da);
 25e:	c0 9a       	sbi	0x18, 0	; 24
	cbi(PORT,CLK);                    /* Clear Clock line to start conversion */
 260:	c1 98       	cbi	0x18, 1	; 24
	Count = 0;
	while(bit_is_set(PINB, Da));      /* Wait for measurement conversion. */
 262:	b0 99       	sbic	0x16, 0	; 22
 264:	fe cf       	rjmp	.-4      	; 0x262 <ReadCount+0x4>
 266:	28 e1       	ldi	r18, 0x18	; 24
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	dc 01       	movw	r26, r24
	for (i=0; i<24; i++)
	{
		sbi(PORT,CLK);           /* Clock signal High */
 26e:	c1 9a       	sbi	0x18, 1	; 24
		Count = Count << 1;       /* Shift value left */
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	aa 1f       	adc	r26, r26
 276:	bb 1f       	adc	r27, r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	35 e3       	ldi	r19, 0x35	; 53
 27a:	3a 95       	dec	r19
 27c:	f1 f7       	brne	.-4      	; 0x27a <ReadCount+0x1c>
 27e:	00 00       	nop
		_delay_us(10);
		cbi(PORT,CLK);            /* Clock signal Low */
 280:	c1 98       	cbi	0x18, 1	; 24
		if(bit_is_set(PINB, Da)) Count++;
 282:	b0 9b       	sbis	0x16, 0	; 22
 284:	03 c0       	rjmp	.+6      	; 0x28c <ReadCount+0x2e>
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	a1 1d       	adc	r26, r1
 28a:	b1 1d       	adc	r27, r1
 28c:	35 e3       	ldi	r19, 0x35	; 53
 28e:	3a 95       	dec	r19
 290:	f1 f7       	brne	.-4      	; 0x28e <ReadCount+0x30>
 292:	00 00       	nop
 294:	21 50       	subi	r18, 0x01	; 1
	uint8_t i;
	sbi(PORT,Da);
	cbi(PORT,CLK);                    /* Clear Clock line to start conversion */
	Count = 0;
	while(bit_is_set(PINB, Da));      /* Wait for measurement conversion. */
	for (i=0; i<24; i++)
 296:	59 f7       	brne	.-42     	; 0x26e <ReadCount+0x10>
		_delay_us(10);
		cbi(PORT,CLK);            /* Clock signal Low */
		if(bit_is_set(PINB, Da)) Count++;
		_delay_us(10);
	}
	sbi(PORT,CLK); 
 298:	c1 9a       	sbi	0x18, 1	; 24
 29a:	25 e3       	ldi	r18, 0x35	; 53
 29c:	2a 95       	dec	r18
 29e:	f1 f7       	brne	.-4      	; 0x29c <ReadCount+0x3e>
 2a0:	00 00       	nop
	Count=Count^0x800000;
	_delay_us(10);
	cbi(PORT,CLK);
 2a2:	c1 98       	cbi	0x18, 1	; 24
	return Count;
 2a4:	bc 01       	movw	r22, r24
 2a6:	cd 01       	movw	r24, r26
 2a8:	80 58       	subi	r24, 0x80	; 128
} 
 2aa:	08 95       	ret

000002ac <main>:
{
	//
	int32_t data;
	// char buffer[20];
	//
	cbi(DDRB,0);
 2ac:	b8 98       	cbi	0x17, 0	; 23
	sbi(DDRB,1);
 2ae:	b9 9a       	sbi	0x17, 1	; 23
	sbi(DDRB,2);
 2b0:	ba 9a       	sbi	0x17, 2	; 23
	//
    I2C_Init();
 2b2:	0e 94 41 00 	call	0x82	; 0x82 <I2C_Init>
	Lcd_Init();
 2b6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Lcd_Init>
	//
	Lcd_Write_String("khoi luong: ");
 2ba:	80 e6       	ldi	r24, 0x60	; 96
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 10 01 	call	0x220	; 0x220 <Lcd_Write_String>
	Lcd_Set_Cursor(4,10);
 2c2:	6a e0       	ldi	r22, 0x0A	; 10
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	0e 94 1f 01 	call	0x23e	; 0x23e <Lcd_Set_Cursor>
	Lcd_Write_String("Gram");
 2ca:	8d e6       	ldi	r24, 0x6D	; 109
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 10 01 	call	0x220	; 0x220 <Lcd_Write_String>
 2d2:	10 e0       	ldi	r17, 0x00	; 0
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
 2d6:	c0 e0       	ldi	r28, 0x00	; 0
 2d8:	00 e0       	ldi	r16, 0x00	; 0
    while (1) 
    {
		data = (ReadCount()-8586000)/7.95526;
		if(data < 0) data = 0;
		Lcd_Set_Cursor(2,1);
		Lcd_Write_Char(data%10000000/1000000+48);
 2da:	0f 2e       	mov	r0, r31
 2dc:	f0 e4       	ldi	r31, 0x40	; 64
 2de:	4f 2e       	mov	r4, r31
 2e0:	f2 e4       	ldi	r31, 0x42	; 66
 2e2:	5f 2e       	mov	r5, r31
 2e4:	ff e0       	ldi	r31, 0x0F	; 15
 2e6:	6f 2e       	mov	r6, r31
 2e8:	71 2c       	mov	r7, r1
 2ea:	f0 2d       	mov	r31, r0
		Lcd_Write_Char(data%1000000/100000+48);
 2ec:	0f 2e       	mov	r0, r31
 2ee:	f0 ea       	ldi	r31, 0xA0	; 160
 2f0:	8f 2e       	mov	r8, r31
 2f2:	f6 e8       	ldi	r31, 0x86	; 134
 2f4:	9f 2e       	mov	r9, r31
 2f6:	aa 24       	eor	r10, r10
 2f8:	a3 94       	inc	r10
 2fa:	b1 2c       	mov	r11, r1
 2fc:	f0 2d       	mov	r31, r0
	Lcd_Write_String("khoi luong: ");
	Lcd_Set_Cursor(4,10);
	Lcd_Write_String("Gram");
    while (1) 
    {
		data = (ReadCount()-8586000)/7.95526;
 2fe:	0e 94 2f 01 	call	0x25e	; 0x25e <ReadCount>
 302:	60 51       	subi	r22, 0x10	; 16
 304:	73 40       	sbci	r23, 0x03	; 3
 306:	83 48       	sbci	r24, 0x83	; 131
 308:	91 09       	sbc	r25, r1
 30a:	0e 94 c4 02 	call	0x588	; 0x588 <__floatsisf>
 30e:	2d e7       	ldi	r18, 0x7D	; 125
 310:	31 e9       	ldi	r19, 0x91	; 145
 312:	4e ef       	ldi	r20, 0xFE	; 254
 314:	50 e4       	ldi	r21, 0x40	; 64
 316:	0e 94 1a 02 	call	0x434	; 0x434 <__divsf3>
 31a:	0e 94 8c 02 	call	0x518	; 0x518 <__fixsfsi>
 31e:	c6 2e       	mov	r12, r22
 320:	d7 2e       	mov	r13, r23
 322:	e8 2e       	mov	r14, r24
 324:	f9 2e       	mov	r15, r25
 326:	ff 20       	and	r15, r15
 328:	24 f4       	brge	.+8      	; 0x332 <main+0x86>
 32a:	c1 2e       	mov	r12, r17
 32c:	dd 2e       	mov	r13, r29
 32e:	ec 2e       	mov	r14, r28
 330:	f0 2e       	mov	r15, r16
		if(data < 0) data = 0;
		Lcd_Set_Cursor(2,1);
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 1f 01 	call	0x23e	; 0x23e <Lcd_Set_Cursor>
		Lcd_Write_Char(data%10000000/1000000+48);
 33a:	c7 01       	movw	r24, r14
 33c:	b6 01       	movw	r22, r12
 33e:	20 e8       	ldi	r18, 0x80	; 128
 340:	36 e9       	ldi	r19, 0x96	; 150
 342:	48 e9       	ldi	r20, 0x98	; 152
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 34a:	a3 01       	movw	r20, r6
 34c:	92 01       	movw	r18, r4
 34e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 352:	80 e3       	ldi	r24, 0x30	; 48
 354:	82 0f       	add	r24, r18
 356:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Write_Char>
		Lcd_Write_Char(data%1000000/100000+48);
 35a:	c7 01       	movw	r24, r14
 35c:	b6 01       	movw	r22, r12
 35e:	a3 01       	movw	r20, r6
 360:	92 01       	movw	r18, r4
 362:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 366:	a5 01       	movw	r20, r10
 368:	94 01       	movw	r18, r8
 36a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 36e:	80 e3       	ldi	r24, 0x30	; 48
 370:	82 0f       	add	r24, r18
 372:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Write_Char>
		Lcd_Write_Char(data%100000/10000+48);
 376:	c7 01       	movw	r24, r14
 378:	b6 01       	movw	r22, r12
 37a:	a5 01       	movw	r20, r10
 37c:	94 01       	movw	r18, r8
 37e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 382:	20 e1       	ldi	r18, 0x10	; 16
 384:	37 e2       	ldi	r19, 0x27	; 39
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 38e:	80 e3       	ldi	r24, 0x30	; 48
 390:	82 0f       	add	r24, r18
 392:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Write_Char>
		Lcd_Write_Char(data%10000/1000+48);
 396:	c7 01       	movw	r24, r14
 398:	b6 01       	movw	r22, r12
 39a:	20 e1       	ldi	r18, 0x10	; 16
 39c:	37 e2       	ldi	r19, 0x27	; 39
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 3a6:	28 ee       	ldi	r18, 0xE8	; 232
 3a8:	33 e0       	ldi	r19, 0x03	; 3
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 3b2:	80 e3       	ldi	r24, 0x30	; 48
 3b4:	82 0f       	add	r24, r18
 3b6:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Write_Char>
		Lcd_Write_Char(data%1000/100+48);
 3ba:	c7 01       	movw	r24, r14
 3bc:	b6 01       	movw	r22, r12
 3be:	28 ee       	ldi	r18, 0xE8	; 232
 3c0:	33 e0       	ldi	r19, 0x03	; 3
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 3ca:	24 e6       	ldi	r18, 0x64	; 100
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 3d6:	80 e3       	ldi	r24, 0x30	; 48
 3d8:	82 0f       	add	r24, r18
 3da:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Write_Char>
		Lcd_Write_Char('.');
 3de:	8e e2       	ldi	r24, 0x2E	; 46
 3e0:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Write_Char>
		Lcd_Write_Char(data%100/10+48);
 3e4:	c7 01       	movw	r24, r14
 3e6:	b6 01       	movw	r22, r12
 3e8:	24 e6       	ldi	r18, 0x64	; 100
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 3f4:	2a e0       	ldi	r18, 0x0A	; 10
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 400:	80 e3       	ldi	r24, 0x30	; 48
 402:	82 0f       	add	r24, r18
 404:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Write_Char>
	    Lcd_Write_Char(data%10+48);
 408:	c7 01       	movw	r24, r14
 40a:	b6 01       	movw	r22, r12
 40c:	2a e0       	ldi	r18, 0x0A	; 10
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 418:	80 e3       	ldi	r24, 0x30	; 48
 41a:	86 0f       	add	r24, r22
 41c:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Write_Char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 420:	2f ef       	ldi	r18, 0xFF	; 255
 422:	89 e6       	ldi	r24, 0x69	; 105
 424:	98 e1       	ldi	r25, 0x18	; 24
 426:	21 50       	subi	r18, 0x01	; 1
 428:	80 40       	sbci	r24, 0x00	; 0
 42a:	90 40       	sbci	r25, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	65 cf       	rjmp	.-310    	; 0x2fe <main+0x52>

00000434 <__divsf3>:
 434:	0e 94 2e 02 	call	0x45c	; 0x45c <__divsf3x>
 438:	0c 94 16 03 	jmp	0x62c	; 0x62c <__fp_round>
 43c:	0e 94 0f 03 	call	0x61e	; 0x61e <__fp_pscB>
 440:	58 f0       	brcs	.+22     	; 0x458 <__divsf3+0x24>
 442:	0e 94 08 03 	call	0x610	; 0x610 <__fp_pscA>
 446:	40 f0       	brcs	.+16     	; 0x458 <__divsf3+0x24>
 448:	29 f4       	brne	.+10     	; 0x454 <__divsf3+0x20>
 44a:	5f 3f       	cpi	r21, 0xFF	; 255
 44c:	29 f0       	breq	.+10     	; 0x458 <__divsf3+0x24>
 44e:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__fp_inf>
 452:	51 11       	cpse	r21, r1
 454:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_szero>
 458:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_nan>

0000045c <__divsf3x>:
 45c:	0e 94 27 03 	call	0x64e	; 0x64e <__fp_split3>
 460:	68 f3       	brcs	.-38     	; 0x43c <__divsf3+0x8>

00000462 <__divsf3_pse>:
 462:	99 23       	and	r25, r25
 464:	b1 f3       	breq	.-20     	; 0x452 <__divsf3+0x1e>
 466:	55 23       	and	r21, r21
 468:	91 f3       	breq	.-28     	; 0x44e <__divsf3+0x1a>
 46a:	95 1b       	sub	r25, r21
 46c:	55 0b       	sbc	r21, r21
 46e:	bb 27       	eor	r27, r27
 470:	aa 27       	eor	r26, r26
 472:	62 17       	cp	r22, r18
 474:	73 07       	cpc	r23, r19
 476:	84 07       	cpc	r24, r20
 478:	38 f0       	brcs	.+14     	; 0x488 <__divsf3_pse+0x26>
 47a:	9f 5f       	subi	r25, 0xFF	; 255
 47c:	5f 4f       	sbci	r21, 0xFF	; 255
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	44 1f       	adc	r20, r20
 484:	aa 1f       	adc	r26, r26
 486:	a9 f3       	breq	.-22     	; 0x472 <__divsf3_pse+0x10>
 488:	35 d0       	rcall	.+106    	; 0x4f4 <__divsf3_pse+0x92>
 48a:	0e 2e       	mov	r0, r30
 48c:	3a f0       	brmi	.+14     	; 0x49c <__divsf3_pse+0x3a>
 48e:	e0 e8       	ldi	r30, 0x80	; 128
 490:	32 d0       	rcall	.+100    	; 0x4f6 <__divsf3_pse+0x94>
 492:	91 50       	subi	r25, 0x01	; 1
 494:	50 40       	sbci	r21, 0x00	; 0
 496:	e6 95       	lsr	r30
 498:	00 1c       	adc	r0, r0
 49a:	ca f7       	brpl	.-14     	; 0x48e <__divsf3_pse+0x2c>
 49c:	2b d0       	rcall	.+86     	; 0x4f4 <__divsf3_pse+0x92>
 49e:	fe 2f       	mov	r31, r30
 4a0:	29 d0       	rcall	.+82     	; 0x4f4 <__divsf3_pse+0x92>
 4a2:	66 0f       	add	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	88 1f       	adc	r24, r24
 4a8:	bb 1f       	adc	r27, r27
 4aa:	26 17       	cp	r18, r22
 4ac:	37 07       	cpc	r19, r23
 4ae:	48 07       	cpc	r20, r24
 4b0:	ab 07       	cpc	r26, r27
 4b2:	b0 e8       	ldi	r27, 0x80	; 128
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <__divsf3_pse+0x56>
 4b6:	bb 0b       	sbc	r27, r27
 4b8:	80 2d       	mov	r24, r0
 4ba:	bf 01       	movw	r22, r30
 4bc:	ff 27       	eor	r31, r31
 4be:	93 58       	subi	r25, 0x83	; 131
 4c0:	5f 4f       	sbci	r21, 0xFF	; 255
 4c2:	3a f0       	brmi	.+14     	; 0x4d2 <__divsf3_pse+0x70>
 4c4:	9e 3f       	cpi	r25, 0xFE	; 254
 4c6:	51 05       	cpc	r21, r1
 4c8:	78 f0       	brcs	.+30     	; 0x4e8 <__divsf3_pse+0x86>
 4ca:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__fp_inf>
 4ce:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_szero>
 4d2:	5f 3f       	cpi	r21, 0xFF	; 255
 4d4:	e4 f3       	brlt	.-8      	; 0x4ce <__divsf3_pse+0x6c>
 4d6:	98 3e       	cpi	r25, 0xE8	; 232
 4d8:	d4 f3       	brlt	.-12     	; 0x4ce <__divsf3_pse+0x6c>
 4da:	86 95       	lsr	r24
 4dc:	77 95       	ror	r23
 4de:	67 95       	ror	r22
 4e0:	b7 95       	ror	r27
 4e2:	f7 95       	ror	r31
 4e4:	9f 5f       	subi	r25, 0xFF	; 255
 4e6:	c9 f7       	brne	.-14     	; 0x4da <__divsf3_pse+0x78>
 4e8:	88 0f       	add	r24, r24
 4ea:	91 1d       	adc	r25, r1
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	97 f9       	bld	r25, 7
 4f2:	08 95       	ret
 4f4:	e1 e0       	ldi	r30, 0x01	; 1
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	bb 1f       	adc	r27, r27
 4fe:	62 17       	cp	r22, r18
 500:	73 07       	cpc	r23, r19
 502:	84 07       	cpc	r24, r20
 504:	ba 07       	cpc	r27, r26
 506:	20 f0       	brcs	.+8      	; 0x510 <__divsf3_pse+0xae>
 508:	62 1b       	sub	r22, r18
 50a:	73 0b       	sbc	r23, r19
 50c:	84 0b       	sbc	r24, r20
 50e:	ba 0b       	sbc	r27, r26
 510:	ee 1f       	adc	r30, r30
 512:	88 f7       	brcc	.-30     	; 0x4f6 <__divsf3_pse+0x94>
 514:	e0 95       	com	r30
 516:	08 95       	ret

00000518 <__fixsfsi>:
 518:	0e 94 93 02 	call	0x526	; 0x526 <__fixunssfsi>
 51c:	68 94       	set
 51e:	b1 11       	cpse	r27, r1
 520:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_szero>
 524:	08 95       	ret

00000526 <__fixunssfsi>:
 526:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_splitA>
 52a:	88 f0       	brcs	.+34     	; 0x54e <__fixunssfsi+0x28>
 52c:	9f 57       	subi	r25, 0x7F	; 127
 52e:	98 f0       	brcs	.+38     	; 0x556 <__fixunssfsi+0x30>
 530:	b9 2f       	mov	r27, r25
 532:	99 27       	eor	r25, r25
 534:	b7 51       	subi	r27, 0x17	; 23
 536:	b0 f0       	brcs	.+44     	; 0x564 <__fixunssfsi+0x3e>
 538:	e1 f0       	breq	.+56     	; 0x572 <__fixunssfsi+0x4c>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	88 1f       	adc	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	1a f0       	brmi	.+6      	; 0x54a <__fixunssfsi+0x24>
 544:	ba 95       	dec	r27
 546:	c9 f7       	brne	.-14     	; 0x53a <__fixunssfsi+0x14>
 548:	14 c0       	rjmp	.+40     	; 0x572 <__fixunssfsi+0x4c>
 54a:	b1 30       	cpi	r27, 0x01	; 1
 54c:	91 f0       	breq	.+36     	; 0x572 <__fixunssfsi+0x4c>
 54e:	0e 94 49 03 	call	0x692	; 0x692 <__fp_zero>
 552:	b1 e0       	ldi	r27, 0x01	; 1
 554:	08 95       	ret
 556:	0c 94 49 03 	jmp	0x692	; 0x692 <__fp_zero>
 55a:	67 2f       	mov	r22, r23
 55c:	78 2f       	mov	r23, r24
 55e:	88 27       	eor	r24, r24
 560:	b8 5f       	subi	r27, 0xF8	; 248
 562:	39 f0       	breq	.+14     	; 0x572 <__fixunssfsi+0x4c>
 564:	b9 3f       	cpi	r27, 0xF9	; 249
 566:	cc f3       	brlt	.-14     	; 0x55a <__fixunssfsi+0x34>
 568:	86 95       	lsr	r24
 56a:	77 95       	ror	r23
 56c:	67 95       	ror	r22
 56e:	b3 95       	inc	r27
 570:	d9 f7       	brne	.-10     	; 0x568 <__fixunssfsi+0x42>
 572:	3e f4       	brtc	.+14     	; 0x582 <__fixunssfsi+0x5c>
 574:	90 95       	com	r25
 576:	80 95       	com	r24
 578:	70 95       	com	r23
 57a:	61 95       	neg	r22
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	8f 4f       	sbci	r24, 0xFF	; 255
 580:	9f 4f       	sbci	r25, 0xFF	; 255
 582:	08 95       	ret

00000584 <__floatunsisf>:
 584:	e8 94       	clt
 586:	09 c0       	rjmp	.+18     	; 0x59a <__floatsisf+0x12>

00000588 <__floatsisf>:
 588:	97 fb       	bst	r25, 7
 58a:	3e f4       	brtc	.+14     	; 0x59a <__floatsisf+0x12>
 58c:	90 95       	com	r25
 58e:	80 95       	com	r24
 590:	70 95       	com	r23
 592:	61 95       	neg	r22
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	8f 4f       	sbci	r24, 0xFF	; 255
 598:	9f 4f       	sbci	r25, 0xFF	; 255
 59a:	99 23       	and	r25, r25
 59c:	a9 f0       	breq	.+42     	; 0x5c8 <__floatsisf+0x40>
 59e:	f9 2f       	mov	r31, r25
 5a0:	96 e9       	ldi	r25, 0x96	; 150
 5a2:	bb 27       	eor	r27, r27
 5a4:	93 95       	inc	r25
 5a6:	f6 95       	lsr	r31
 5a8:	87 95       	ror	r24
 5aa:	77 95       	ror	r23
 5ac:	67 95       	ror	r22
 5ae:	b7 95       	ror	r27
 5b0:	f1 11       	cpse	r31, r1
 5b2:	f8 cf       	rjmp	.-16     	; 0x5a4 <__floatsisf+0x1c>
 5b4:	fa f4       	brpl	.+62     	; 0x5f4 <__floatsisf+0x6c>
 5b6:	bb 0f       	add	r27, r27
 5b8:	11 f4       	brne	.+4      	; 0x5be <__floatsisf+0x36>
 5ba:	60 ff       	sbrs	r22, 0
 5bc:	1b c0       	rjmp	.+54     	; 0x5f4 <__floatsisf+0x6c>
 5be:	6f 5f       	subi	r22, 0xFF	; 255
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	8f 4f       	sbci	r24, 0xFF	; 255
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	16 c0       	rjmp	.+44     	; 0x5f4 <__floatsisf+0x6c>
 5c8:	88 23       	and	r24, r24
 5ca:	11 f0       	breq	.+4      	; 0x5d0 <__floatsisf+0x48>
 5cc:	96 e9       	ldi	r25, 0x96	; 150
 5ce:	11 c0       	rjmp	.+34     	; 0x5f2 <__floatsisf+0x6a>
 5d0:	77 23       	and	r23, r23
 5d2:	21 f0       	breq	.+8      	; 0x5dc <__floatsisf+0x54>
 5d4:	9e e8       	ldi	r25, 0x8E	; 142
 5d6:	87 2f       	mov	r24, r23
 5d8:	76 2f       	mov	r23, r22
 5da:	05 c0       	rjmp	.+10     	; 0x5e6 <__floatsisf+0x5e>
 5dc:	66 23       	and	r22, r22
 5de:	71 f0       	breq	.+28     	; 0x5fc <__floatsisf+0x74>
 5e0:	96 e8       	ldi	r25, 0x86	; 134
 5e2:	86 2f       	mov	r24, r22
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	2a f0       	brmi	.+10     	; 0x5f4 <__floatsisf+0x6c>
 5ea:	9a 95       	dec	r25
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	da f7       	brpl	.-10     	; 0x5ea <__floatsisf+0x62>
 5f4:	88 0f       	add	r24, r24
 5f6:	96 95       	lsr	r25
 5f8:	87 95       	ror	r24
 5fa:	97 f9       	bld	r25, 7
 5fc:	08 95       	ret

000005fe <__fp_inf>:
 5fe:	97 f9       	bld	r25, 7
 600:	9f 67       	ori	r25, 0x7F	; 127
 602:	80 e8       	ldi	r24, 0x80	; 128
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	08 95       	ret

0000060a <__fp_nan>:
 60a:	9f ef       	ldi	r25, 0xFF	; 255
 60c:	80 ec       	ldi	r24, 0xC0	; 192
 60e:	08 95       	ret

00000610 <__fp_pscA>:
 610:	00 24       	eor	r0, r0
 612:	0a 94       	dec	r0
 614:	16 16       	cp	r1, r22
 616:	17 06       	cpc	r1, r23
 618:	18 06       	cpc	r1, r24
 61a:	09 06       	cpc	r0, r25
 61c:	08 95       	ret

0000061e <__fp_pscB>:
 61e:	00 24       	eor	r0, r0
 620:	0a 94       	dec	r0
 622:	12 16       	cp	r1, r18
 624:	13 06       	cpc	r1, r19
 626:	14 06       	cpc	r1, r20
 628:	05 06       	cpc	r0, r21
 62a:	08 95       	ret

0000062c <__fp_round>:
 62c:	09 2e       	mov	r0, r25
 62e:	03 94       	inc	r0
 630:	00 0c       	add	r0, r0
 632:	11 f4       	brne	.+4      	; 0x638 <__fp_round+0xc>
 634:	88 23       	and	r24, r24
 636:	52 f0       	brmi	.+20     	; 0x64c <__fp_round+0x20>
 638:	bb 0f       	add	r27, r27
 63a:	40 f4       	brcc	.+16     	; 0x64c <__fp_round+0x20>
 63c:	bf 2b       	or	r27, r31
 63e:	11 f4       	brne	.+4      	; 0x644 <__fp_round+0x18>
 640:	60 ff       	sbrs	r22, 0
 642:	04 c0       	rjmp	.+8      	; 0x64c <__fp_round+0x20>
 644:	6f 5f       	subi	r22, 0xFF	; 255
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	8f 4f       	sbci	r24, 0xFF	; 255
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	08 95       	ret

0000064e <__fp_split3>:
 64e:	57 fd       	sbrc	r21, 7
 650:	90 58       	subi	r25, 0x80	; 128
 652:	44 0f       	add	r20, r20
 654:	55 1f       	adc	r21, r21
 656:	59 f0       	breq	.+22     	; 0x66e <__fp_splitA+0x10>
 658:	5f 3f       	cpi	r21, 0xFF	; 255
 65a:	71 f0       	breq	.+28     	; 0x678 <__fp_splitA+0x1a>
 65c:	47 95       	ror	r20

0000065e <__fp_splitA>:
 65e:	88 0f       	add	r24, r24
 660:	97 fb       	bst	r25, 7
 662:	99 1f       	adc	r25, r25
 664:	61 f0       	breq	.+24     	; 0x67e <__fp_splitA+0x20>
 666:	9f 3f       	cpi	r25, 0xFF	; 255
 668:	79 f0       	breq	.+30     	; 0x688 <__fp_splitA+0x2a>
 66a:	87 95       	ror	r24
 66c:	08 95       	ret
 66e:	12 16       	cp	r1, r18
 670:	13 06       	cpc	r1, r19
 672:	14 06       	cpc	r1, r20
 674:	55 1f       	adc	r21, r21
 676:	f2 cf       	rjmp	.-28     	; 0x65c <__fp_split3+0xe>
 678:	46 95       	lsr	r20
 67a:	f1 df       	rcall	.-30     	; 0x65e <__fp_splitA>
 67c:	08 c0       	rjmp	.+16     	; 0x68e <__fp_splitA+0x30>
 67e:	16 16       	cp	r1, r22
 680:	17 06       	cpc	r1, r23
 682:	18 06       	cpc	r1, r24
 684:	99 1f       	adc	r25, r25
 686:	f1 cf       	rjmp	.-30     	; 0x66a <__fp_splitA+0xc>
 688:	86 95       	lsr	r24
 68a:	71 05       	cpc	r23, r1
 68c:	61 05       	cpc	r22, r1
 68e:	08 94       	sec
 690:	08 95       	ret

00000692 <__fp_zero>:
 692:	e8 94       	clt

00000694 <__fp_szero>:
 694:	bb 27       	eor	r27, r27
 696:	66 27       	eor	r22, r22
 698:	77 27       	eor	r23, r23
 69a:	cb 01       	movw	r24, r22
 69c:	97 f9       	bld	r25, 7
 69e:	08 95       	ret

000006a0 <__divmodsi4>:
 6a0:	05 2e       	mov	r0, r21
 6a2:	97 fb       	bst	r25, 7
 6a4:	1e f4       	brtc	.+6      	; 0x6ac <__divmodsi4+0xc>
 6a6:	00 94       	com	r0
 6a8:	0e 94 67 03 	call	0x6ce	; 0x6ce <__negsi2>
 6ac:	57 fd       	sbrc	r21, 7
 6ae:	07 d0       	rcall	.+14     	; 0x6be <__divmodsi4_neg2>
 6b0:	0e 94 6f 03 	call	0x6de	; 0x6de <__udivmodsi4>
 6b4:	07 fc       	sbrc	r0, 7
 6b6:	03 d0       	rcall	.+6      	; 0x6be <__divmodsi4_neg2>
 6b8:	4e f4       	brtc	.+18     	; 0x6cc <__divmodsi4_exit>
 6ba:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__negsi2>

000006be <__divmodsi4_neg2>:
 6be:	50 95       	com	r21
 6c0:	40 95       	com	r20
 6c2:	30 95       	com	r19
 6c4:	21 95       	neg	r18
 6c6:	3f 4f       	sbci	r19, 0xFF	; 255
 6c8:	4f 4f       	sbci	r20, 0xFF	; 255
 6ca:	5f 4f       	sbci	r21, 0xFF	; 255

000006cc <__divmodsi4_exit>:
 6cc:	08 95       	ret

000006ce <__negsi2>:
 6ce:	90 95       	com	r25
 6d0:	80 95       	com	r24
 6d2:	70 95       	com	r23
 6d4:	61 95       	neg	r22
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	8f 4f       	sbci	r24, 0xFF	; 255
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	08 95       	ret

000006de <__udivmodsi4>:
 6de:	a1 e2       	ldi	r26, 0x21	; 33
 6e0:	1a 2e       	mov	r1, r26
 6e2:	aa 1b       	sub	r26, r26
 6e4:	bb 1b       	sub	r27, r27
 6e6:	fd 01       	movw	r30, r26
 6e8:	0d c0       	rjmp	.+26     	; 0x704 <__udivmodsi4_ep>

000006ea <__udivmodsi4_loop>:
 6ea:	aa 1f       	adc	r26, r26
 6ec:	bb 1f       	adc	r27, r27
 6ee:	ee 1f       	adc	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	a2 17       	cp	r26, r18
 6f4:	b3 07       	cpc	r27, r19
 6f6:	e4 07       	cpc	r30, r20
 6f8:	f5 07       	cpc	r31, r21
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__udivmodsi4_ep>
 6fc:	a2 1b       	sub	r26, r18
 6fe:	b3 0b       	sbc	r27, r19
 700:	e4 0b       	sbc	r30, r20
 702:	f5 0b       	sbc	r31, r21

00000704 <__udivmodsi4_ep>:
 704:	66 1f       	adc	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	88 1f       	adc	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	1a 94       	dec	r1
 70e:	69 f7       	brne	.-38     	; 0x6ea <__udivmodsi4_loop>
 710:	60 95       	com	r22
 712:	70 95       	com	r23
 714:	80 95       	com	r24
 716:	90 95       	com	r25
 718:	9b 01       	movw	r18, r22
 71a:	ac 01       	movw	r20, r24
 71c:	bd 01       	movw	r22, r26
 71e:	cf 01       	movw	r24, r30
 720:	08 95       	ret

00000722 <_exit>:
 722:	f8 94       	cli

00000724 <__stop_program>:
 724:	ff cf       	rjmp	.-2      	; 0x724 <__stop_program>
