
Test_AS7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000086  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d6  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054a  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c8  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e0  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 41 00 	jmp	0x82	; 0x82 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "main.h"
#include <avr/sfr_defs.h>

int main(void)
{
  cbi(DDRC, PC0);
  6c:	a0 98       	cbi	0x14, 0	; 20
  sbi(DDRD, PD0);
  6e:	88 9a       	sbi	0x11, 0	; 17
  while(1)
  {
    if(bit_is_clear(PINC, PC0))
	{
	  while(bit_is_clear(PINC, PC0));
	  tbi(PORTD, PD0);
  70:	91 e0       	ldi	r25, 0x01	; 1
  cbi(DDRC, PC0);
  sbi(DDRD, PD0);
  uint32_t x;
  while(1)
  {
    if(bit_is_clear(PINC, PC0))
  72:	98 99       	sbic	0x13, 0	; 19
  74:	fe cf       	rjmp	.-4      	; 0x72 <main+0x6>
	{
	  while(bit_is_clear(PINC, PC0));
  76:	98 9b       	sbis	0x13, 0	; 19
  78:	fe cf       	rjmp	.-4      	; 0x76 <main+0xa>
	  tbi(PORTD, PD0);
  7a:	82 b3       	in	r24, 0x12	; 18
  7c:	89 27       	eor	r24, r25
  7e:	82 bb       	out	0x12, r24	; 18
  80:	f8 cf       	rjmp	.-16     	; 0x72 <main+0x6>

00000082 <_exit>:
  82:	f8 94       	cli

00000084 <__stop_program>:
  84:	ff cf       	rjmp	.-2      	; 0x84 <__stop_program>
