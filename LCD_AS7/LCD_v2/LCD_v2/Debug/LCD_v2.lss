
LCD_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001b8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000965  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  00000c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000452  00000000  00000000  00001319  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a7  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b4  00000000  00000000  00001bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001eab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  7a:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Read2Nib>:
	#ifdef LCD8BIT	
		Write8Bit(0x02);
		wait_LCD();	
	#else
		Write2Nib(0x02);
		wait_LCD();
  82:	88 b3       	in	r24, 0x18	; 24
  84:	80 6f       	ori	r24, 0xF0	; 240
  86:	88 bb       	out	0x18, r24	; 24
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	8f 70       	andi	r24, 0x0F	; 15
  8c:	87 bb       	out	0x17, r24	; 23
  8e:	c3 9a       	sbi	0x18, 3	; 24
  90:	c3 9a       	sbi	0x18, 3	; 24
  92:	26 b3       	in	r18, 0x16	; 22
  94:	c3 98       	cbi	0x18, 3	; 24
  96:	c3 9a       	sbi	0x18, 3	; 24
  98:	c3 9a       	sbi	0x18, 3	; 24
  9a:	96 b3       	in	r25, 0x16	; 22
  9c:	c3 98       	cbi	0x18, 3	; 24
  9e:	20 7f       	andi	r18, 0xF0	; 240
  a0:	89 2f       	mov	r24, r25
  a2:	82 95       	swap	r24
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	82 2b       	or	r24, r18
  a8:	08 95       	ret

000000aa <Write2Nib>:
  aa:	28 b3       	in	r18, 0x18	; 24
  ac:	2f 70       	andi	r18, 0x0F	; 15
  ae:	98 2f       	mov	r25, r24
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	92 2b       	or	r25, r18
  b4:	98 bb       	out	0x18, r25	; 24
  b6:	c3 9a       	sbi	0x18, 3	; 24
  b8:	c3 98       	cbi	0x18, 3	; 24
  ba:	30 e1       	ldi	r19, 0x10	; 16
  bc:	83 9f       	mul	r24, r19
  be:	c0 01       	movw	r24, r0
  c0:	11 24       	eor	r1, r1
  c2:	82 2b       	or	r24, r18
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	c3 9a       	sbi	0x18, 3	; 24
  c8:	c3 98       	cbi	0x18, 3	; 24
  ca:	08 95       	ret

000000cc <wait_LCD>:
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	1f 92       	push	r1
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	c2 98       	cbi	0x18, 2	; 24
  d8:	c1 9a       	sbi	0x18, 1	; 24
  da:	0e 94 41 00 	call	0x82	; 0x82 <Read2Nib>
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	88 23       	and	r24, r24
  e4:	c4 f3       	brlt	.-16     	; 0xd6 <wait_LCD+0xa>
  e6:	c1 98       	cbi	0x18, 1	; 24
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	87 bb       	out	0x17, r24	; 23
  ec:	0f 90       	pop	r0
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <init_LCD>:
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	87 bb       	out	0x17, r24	; 23
  fa:	c2 98       	cbi	0x18, 2	; 24
  fc:	c1 98       	cbi	0x18, 1	; 24
  fe:	c3 98       	cbi	0x18, 3	; 24
 100:	c3 9a       	sbi	0x18, 3	; 24
 102:	c5 9a       	sbi	0x18, 5	; 24
 104:	c3 98       	cbi	0x18, 3	; 24
 106:	0e 94 66 00 	call	0xcc	; 0xcc <wait_LCD>
 10a:	88 e2       	ldi	r24, 0x28	; 40
 10c:	0e 94 55 00 	call	0xaa	; 0xaa <Write2Nib>
 110:	0e 94 66 00 	call	0xcc	; 0xcc <wait_LCD>
 114:	c2 98       	cbi	0x18, 2	; 24
 116:	8e e0       	ldi	r24, 0x0E	; 14
 118:	0e 94 55 00 	call	0xaa	; 0xaa <Write2Nib>
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <wait_LCD>
 120:	c2 98       	cbi	0x18, 2	; 24
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	0e 94 55 00 	call	0xaa	; 0xaa <Write2Nib>
 128:	0e 94 66 00 	call	0xcc	; 0xcc <wait_LCD>
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	0e 94 55 00 	call	0xaa	; 0xaa <Write2Nib>
 132:	82 e6       	ldi	r24, 0x62	; 98
 134:	8a 95       	dec	r24
 136:	f1 f7       	brne	.-4      	; 0x134 <init_LCD+0x40>
 138:	00 c0       	rjmp	.+0      	; 0x13a <init_LCD+0x46>
 13a:	08 95       	ret

0000013c <move_LCD>:
	#endif	
}
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
	cbi(CTRL,RS); // the following data is COMMAND
 13c:	c2 98       	cbi	0x18, 2	; 24
	#ifdef LCD8BIT	
		Write8Bit(Ad);
		wait_LCD();
	#else
		Write2Nib(Ad);
 13e:	90 e4       	ldi	r25, 0x40	; 64
 140:	89 9f       	mul	r24, r25
 142:	60 0d       	add	r22, r0
 144:	11 24       	eor	r1, r1
 146:	86 2f       	mov	r24, r22
 148:	81 5c       	subi	r24, 0xC1	; 193
 14a:	0e 94 55 00 	call	0xaa	; 0xaa <Write2Nib>
		wait_LCD();
 14e:	0e 94 66 00 	call	0xcc	; 0xcc <wait_LCD>
 152:	08 95       	ret

00000154 <clr_LCD>:
	#endif	
}

void clr_LCD(){
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 154:	c2 98       	cbi	0x18, 2	; 24
	#ifdef LCD8BIT	
		Write8Bit(0x01);
		wait_LCD();	
	#else
		Write2Nib(0x01);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 55 00 	call	0xaa	; 0xaa <Write2Nib>
		wait_LCD();	
 15c:	0e 94 66 00 	call	0xcc	; 0xcc <wait_LCD>
 160:	08 95       	ret

00000162 <putChar_LCD>:
		
	#endif	
}

void putChar_LCD(uint8_t chr){
	sbi(CTRL,RS); //this is a normal DATA	
 162:	c2 9a       	sbi	0x18, 2	; 24
	#ifdef LCD8BIT	
		Write8Bit(chr);
		wait_LCD();	
	#else
		Write2Nib(chr);
 164:	0e 94 55 00 	call	0xaa	; 0xaa <Write2Nib>
		wait_LCD();	
 168:	0e 94 66 00 	call	0xcc	; 0xcc <wait_LCD>
 16c:	08 95       	ret

0000016e <print_LCD>:
	#endif		
}

void print_LCD(char* str){
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	fc 01       	movw	r30, r24
	 unsigned char i;
	 for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);	 
 176:	80 81       	ld	r24, Z
 178:	88 23       	and	r24, r24
 17a:	59 f0       	breq	.+22     	; 0x192 <print_LCD+0x24>
 17c:	8f 01       	movw	r16, r30
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	0e 94 b1 00 	call	0x162	; 0x162 <putChar_LCD>
 184:	cf 5f       	subi	r28, 0xFF	; 255
 186:	f8 01       	movw	r30, r16
 188:	ec 0f       	add	r30, r28
 18a:	f1 1d       	adc	r31, r1
 18c:	80 81       	ld	r24, Z
 18e:	81 11       	cpse	r24, r1
 190:	f7 cf       	rjmp	.-18     	; 0x180 <print_LCD+0x12>
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <main>:
#include "main.h"
#include "myLCD.h" //include th? vi?n myLCD
int main(){
	init_LCD(); //kh?i ?? LCD
 19a:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_LCD>
	clr_LCD(); // xóa toà b? LCD
 19e:	0e 94 aa 00 	call	0x154	; 0x154 <clr_LCD>
	move_LCD(2,2);
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	0e 94 9e 00 	call	0x13c	; 0x13c <move_LCD>
	print_LCD("hihi");
 1aa:	80 e6       	ldi	r24, 0x60	; 96
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 b7 00 	call	0x16e	; 0x16e <print_LCD>
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <main+0x18>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
