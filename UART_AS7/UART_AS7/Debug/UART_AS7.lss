
UART_AS7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000358  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e0  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076b  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045a  00000000  00000000  000015d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bb  00000000  00000000  00001eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  64:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:
  }
}
void ADC_Init()
{
	// thanh ghi ADMUX
	ADMUX |= (1<<REFS0); // dien ap: AVCC, ADCL chua 8 bit thap
  6c:	3e 9a       	sbi	0x07, 6	; 7
	// thanh ghi ADCSRA
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(ADPS0); // cho phep ADC, chia 128
  6e:	86 b1       	in	r24, 0x06	; 6
  70:	86 68       	ori	r24, 0x86	; 134
  72:	86 b9       	out	0x06, r24	; 6
  74:	08 95       	ret

00000076 <Read_ADC>:
}
unsigned int Read_ADC(unsigned char channel)
{
	ADMUX &= 0xE0;
  76:	97 b1       	in	r25, 0x07	; 7
  78:	90 7e       	andi	r25, 0xE0	; 224
  7a:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
  7c:	97 b1       	in	r25, 0x07	; 7
  7e:	89 2b       	or	r24, r25
  80:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	8f e3       	ldi	r24, 0x3F	; 63
  84:	9f e1       	ldi	r25, 0x1F	; 31
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <Read_ADC+0x10>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <Read_ADC+0x16>
  8c:	00 00       	nop
	_delay_ms(2);
	ADCSRA |= (1<<ADSC); // cho phep bat dau chuyen doi
  8e:	36 9a       	sbi	0x06, 6	; 6
	while(ADIF==0);
	ADCSRA |= (1<<ADIF);
  90:	34 9a       	sbi	0x06, 4	; 6
	return ADCW;
  92:	84 b1       	in	r24, 0x04	; 4
  94:	95 b1       	in	r25, 0x05	; 5
}
  96:	08 95       	ret

00000098 <main>:
int main(void)
{
  // bien
  unsigned int a, b;
  // port
  cbi(DDRA, PA0);
  98:	d0 98       	cbi	0x1a, 0	; 26
  // chuong trinh con
  ADC_Init();
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
  UART_init(9600);
  9e:	60 e8       	ldi	r22, 0x80	; 128
  a0:	75 e2       	ldi	r23, 0x25	; 37
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 47 01 	call	0x28e	; 0x28e <UART_init>
    a = Read_ADC(0);
	b = Read_ADC(1);
	UART_TxChar(':');
	_delay_us(10);
	UART_TxChar(a/1000);
	UART_TxChar(a%1000/100);
  aa:	08 ee       	ldi	r16, 0xE8	; 232
  ac:	13 e0       	ldi	r17, 0x03	; 3
	UART_TxChar(a%100/10);
  ae:	0f 2e       	mov	r0, r31
  b0:	f4 e6       	ldi	r31, 0x64	; 100
  b2:	ff 2e       	mov	r15, r31
  b4:	f0 2d       	mov	r31, r0
  // chuong trinh con
  ADC_Init();
  UART_init(9600);
  while(1)
  {
    a = Read_ADC(0);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 3b 00 	call	0x76	; 0x76 <Read_ADC>
  bc:	6c 01       	movw	r12, r24
	b = Read_ADC(1);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 3b 00 	call	0x76	; 0x76 <Read_ADC>
  c4:	ec 01       	movw	r28, r24
	UART_TxChar(':');
  c6:	8a e3       	ldi	r24, 0x3A	; 58
  c8:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_TxChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	25 e3       	ldi	r18, 0x35	; 53
  ce:	2a 95       	dec	r18
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x36>
  d2:	00 00       	nop
	_delay_us(10);
	UART_TxChar(a/1000);
  d4:	96 01       	movw	r18, r12
  d6:	36 95       	lsr	r19
  d8:	27 95       	ror	r18
  da:	36 95       	lsr	r19
  dc:	27 95       	ror	r18
  de:	36 95       	lsr	r19
  e0:	27 95       	ror	r18
  e2:	a5 ec       	ldi	r26, 0xC5	; 197
  e4:	b0 e2       	ldi	r27, 0x20	; 32
  e6:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
  ea:	5c 01       	movw	r10, r24
  ec:	b6 94       	lsr	r11
  ee:	a7 94       	ror	r10
  f0:	b6 94       	lsr	r11
  f2:	a7 94       	ror	r10
  f4:	b6 94       	lsr	r11
  f6:	a7 94       	ror	r10
  f8:	b6 94       	lsr	r11
  fa:	a7 94       	ror	r10
  fc:	8a 2d       	mov	r24, r10
  fe:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_TxChar>
	UART_TxChar(a%1000/100);
 102:	a0 9e       	mul	r10, r16
 104:	c0 01       	movw	r24, r0
 106:	a1 9e       	mul	r10, r17
 108:	90 0d       	add	r25, r0
 10a:	b0 9e       	mul	r11, r16
 10c:	90 0d       	add	r25, r0
 10e:	11 24       	eor	r1, r1
 110:	96 01       	movw	r18, r12
 112:	28 1b       	sub	r18, r24
 114:	39 0b       	sbc	r19, r25
 116:	36 95       	lsr	r19
 118:	27 95       	ror	r18
 11a:	36 95       	lsr	r19
 11c:	27 95       	ror	r18
 11e:	ab e7       	ldi	r26, 0x7B	; 123
 120:	b4 e1       	ldi	r27, 0x14	; 20
 122:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_TxChar>
	UART_TxChar(a%100/10);
 12e:	96 01       	movw	r18, r12
 130:	36 95       	lsr	r19
 132:	27 95       	ror	r18
 134:	36 95       	lsr	r19
 136:	27 95       	ror	r18
 138:	ab e7       	ldi	r26, 0x7B	; 123
 13a:	b4 e1       	ldi	r27, 0x14	; 20
 13c:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
 144:	f8 9e       	mul	r15, r24
 146:	90 01       	movw	r18, r0
 148:	f9 9e       	mul	r15, r25
 14a:	30 0d       	add	r19, r0
 14c:	11 24       	eor	r1, r1
 14e:	c6 01       	movw	r24, r12
 150:	82 1b       	sub	r24, r18
 152:	93 0b       	sbc	r25, r19
 154:	9c 01       	movw	r18, r24
 156:	ad ec       	ldi	r26, 0xCD	; 205
 158:	bc ec       	ldi	r27, 0xCC	; 204
 15a:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_TxChar>
	UART_TxChar(a%10);
 16e:	96 01       	movw	r18, r12
 170:	ad ec       	ldi	r26, 0xCD	; 205
 172:	bc ec       	ldi	r27, 0xCC	; 204
 174:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	9c 01       	movw	r18, r24
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	82 0f       	add	r24, r18
 198:	93 1f       	adc	r25, r19
 19a:	2c 2d       	mov	r18, r12
 19c:	28 1b       	sub	r18, r24
 19e:	82 2f       	mov	r24, r18
 1a0:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_TxChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	8f e3       	ldi	r24, 0x3F	; 63
 1a6:	9c e9       	ldi	r25, 0x9C	; 156
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x110>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x116>
 1ae:	00 00       	nop
	_delay_ms(10);

	UART_TxChar(b/1000);
 1b0:	9e 01       	movw	r18, r28
 1b2:	36 95       	lsr	r19
 1b4:	27 95       	ror	r18
 1b6:	36 95       	lsr	r19
 1b8:	27 95       	ror	r18
 1ba:	36 95       	lsr	r19
 1bc:	27 95       	ror	r18
 1be:	a5 ec       	ldi	r26, 0xC5	; 197
 1c0:	b0 e2       	ldi	r27, 0x20	; 32
 1c2:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 1c6:	6c 01       	movw	r12, r24
 1c8:	d6 94       	lsr	r13
 1ca:	c7 94       	ror	r12
 1cc:	d6 94       	lsr	r13
 1ce:	c7 94       	ror	r12
 1d0:	d6 94       	lsr	r13
 1d2:	c7 94       	ror	r12
 1d4:	d6 94       	lsr	r13
 1d6:	c7 94       	ror	r12
 1d8:	8c 2d       	mov	r24, r12
 1da:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_TxChar>
	UART_TxChar(b%1000/100);
 1de:	c0 9e       	mul	r12, r16
 1e0:	c0 01       	movw	r24, r0
 1e2:	c1 9e       	mul	r12, r17
 1e4:	90 0d       	add	r25, r0
 1e6:	d0 9e       	mul	r13, r16
 1e8:	90 0d       	add	r25, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	9e 01       	movw	r18, r28
 1ee:	28 1b       	sub	r18, r24
 1f0:	39 0b       	sbc	r19, r25
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	36 95       	lsr	r19
 1f8:	27 95       	ror	r18
 1fa:	ab e7       	ldi	r26, 0x7B	; 123
 1fc:	b4 e1       	ldi	r27, 0x14	; 20
 1fe:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_TxChar>
	UART_TxChar(b%100/10);
 20a:	9e 01       	movw	r18, r28
 20c:	36 95       	lsr	r19
 20e:	27 95       	ror	r18
 210:	36 95       	lsr	r19
 212:	27 95       	ror	r18
 214:	ab e7       	ldi	r26, 0x7B	; 123
 216:	b4 e1       	ldi	r27, 0x14	; 20
 218:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 21c:	96 95       	lsr	r25
 21e:	87 95       	ror	r24
 220:	f8 9e       	mul	r15, r24
 222:	90 01       	movw	r18, r0
 224:	f9 9e       	mul	r15, r25
 226:	30 0d       	add	r19, r0
 228:	11 24       	eor	r1, r1
 22a:	ce 01       	movw	r24, r28
 22c:	82 1b       	sub	r24, r18
 22e:	93 0b       	sbc	r25, r19
 230:	9c 01       	movw	r18, r24
 232:	ad ec       	ldi	r26, 0xCD	; 205
 234:	bc ec       	ldi	r27, 0xCC	; 204
 236:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 23a:	96 95       	lsr	r25
 23c:	87 95       	ror	r24
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_TxChar>
	UART_TxChar(b%10);
 24a:	9e 01       	movw	r18, r28
 24c:	ad ec       	ldi	r26, 0xCD	; 205
 24e:	bc ec       	ldi	r27, 0xCC	; 204
 250:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	9c 01       	movw	r18, r24
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	82 0f       	add	r24, r18
 274:	93 1f       	adc	r25, r19
 276:	2c 2f       	mov	r18, r28
 278:	28 1b       	sub	r18, r24
 27a:	82 2f       	mov	r24, r18
 27c:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_TxChar>
 280:	8f e3       	ldi	r24, 0x3F	; 63
 282:	9c e9       	ldi	r25, 0x9C	; 156
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x1ec>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x1f2>
 28a:	00 00       	nop
 28c:	14 cf       	rjmp	.-472    	; 0xb6 <main+0x1e>

0000028e <UART_init>:

void UART_Read_Text(char *Output, unsigned int length)
{
	for(int i=0;i<length;i++)
	Output[i] = UART_RxChar();
}
 28e:	2a b1       	in	r18, 0x0a	; 10
 290:	28 61       	ori	r18, 0x18	; 24
 292:	2a b9       	out	0x0a, r18	; 10
 294:	20 b5       	in	r18, 0x20	; 32
 296:	26 68       	ori	r18, 0x86	; 134
 298:	20 bd       	out	0x20, r18	; 32
 29a:	dc 01       	movw	r26, r24
 29c:	cb 01       	movw	r24, r22
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	aa 1f       	adc	r26, r26
 2a4:	bb 1f       	adc	r27, r27
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	aa 1f       	adc	r26, r26
 2ac:	bb 1f       	adc	r27, r27
 2ae:	9c 01       	movw	r18, r24
 2b0:	ad 01       	movw	r20, r26
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	44 1f       	adc	r20, r20
 2b8:	55 1f       	adc	r21, r21
 2ba:	22 0f       	add	r18, r18
 2bc:	33 1f       	adc	r19, r19
 2be:	44 1f       	adc	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	74 e2       	ldi	r23, 0x24	; 36
 2c6:	84 ef       	ldi	r24, 0xF4	; 244
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__udivmodsi4>
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	82 0f       	add	r24, r18
 2d2:	89 b9       	out	0x09, r24	; 9
 2d4:	da 01       	movw	r26, r20
 2d6:	c9 01       	movw	r24, r18
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	a1 09       	sbc	r26, r1
 2dc:	b1 09       	sbc	r27, r1
 2de:	89 2f       	mov	r24, r25
 2e0:	9a 2f       	mov	r25, r26
 2e2:	ab 2f       	mov	r26, r27
 2e4:	bb 27       	eor	r27, r27
 2e6:	80 bd       	out	0x20, r24	; 32
 2e8:	08 95       	ret

000002ea <UART_TxChar>:

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
 2ea:	5d 9b       	sbis	0x0b, 5	; 11
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <UART_TxChar>
	UDR = ch ;
 2ee:	8c b9       	out	0x0c, r24	; 12
 2f0:	08 95       	ret

000002f2 <__udivmodsi4>:
 2f2:	a1 e2       	ldi	r26, 0x21	; 33
 2f4:	1a 2e       	mov	r1, r26
 2f6:	aa 1b       	sub	r26, r26
 2f8:	bb 1b       	sub	r27, r27
 2fa:	fd 01       	movw	r30, r26
 2fc:	0d c0       	rjmp	.+26     	; 0x318 <__udivmodsi4_ep>

000002fe <__udivmodsi4_loop>:
 2fe:	aa 1f       	adc	r26, r26
 300:	bb 1f       	adc	r27, r27
 302:	ee 1f       	adc	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	a2 17       	cp	r26, r18
 308:	b3 07       	cpc	r27, r19
 30a:	e4 07       	cpc	r30, r20
 30c:	f5 07       	cpc	r31, r21
 30e:	20 f0       	brcs	.+8      	; 0x318 <__udivmodsi4_ep>
 310:	a2 1b       	sub	r26, r18
 312:	b3 0b       	sbc	r27, r19
 314:	e4 0b       	sbc	r30, r20
 316:	f5 0b       	sbc	r31, r21

00000318 <__udivmodsi4_ep>:
 318:	66 1f       	adc	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	88 1f       	adc	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	1a 94       	dec	r1
 322:	69 f7       	brne	.-38     	; 0x2fe <__udivmodsi4_loop>
 324:	60 95       	com	r22
 326:	70 95       	com	r23
 328:	80 95       	com	r24
 32a:	90 95       	com	r25
 32c:	9b 01       	movw	r18, r22
 32e:	ac 01       	movw	r20, r24
 330:	bd 01       	movw	r22, r26
 332:	cf 01       	movw	r24, r30
 334:	08 95       	ret

00000336 <__umulhisi3>:
 336:	a2 9f       	mul	r26, r18
 338:	b0 01       	movw	r22, r0
 33a:	b3 9f       	mul	r27, r19
 33c:	c0 01       	movw	r24, r0
 33e:	a3 9f       	mul	r26, r19
 340:	70 0d       	add	r23, r0
 342:	81 1d       	adc	r24, r1
 344:	11 24       	eor	r1, r1
 346:	91 1d       	adc	r25, r1
 348:	b2 9f       	mul	r27, r18
 34a:	70 0d       	add	r23, r0
 34c:	81 1d       	adc	r24, r1
 34e:	11 24       	eor	r1, r1
 350:	91 1d       	adc	r25, r1
 352:	08 95       	ret

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
