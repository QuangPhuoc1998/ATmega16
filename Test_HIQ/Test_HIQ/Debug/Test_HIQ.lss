
Test_HIQ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000645  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000590  00000000  00000000  000008f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ab  00000000  00000000  00000e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031e  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001585  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  74:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Interrupt_Init>:
	}
}
void Interrupt_Init()
{
	// thanh ghi MCUCR
	MCUCR |= (1<<ISC01)|~(1<<ISC00); // canh xuong
  7c:	85 b7       	in	r24, 0x35	; 53
  7e:	8e 6f       	ori	r24, 0xFE	; 254
  80:	85 bf       	out	0x35, r24	; 53
	// thanh ghi GICF
	GICR |= (1<<INT0); // cho phep ngat 3 ngat ngoai
  82:	8b b7       	in	r24, 0x3b	; 59
  84:	80 64       	ori	r24, 0x40	; 64
  86:	8b bf       	out	0x3b, r24	; 59
  88:	08 95       	ret

0000008a <__vector_1>:
}
ISR(INT0_vect)
{
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	2f 93       	push	r18
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
	tbi(PORTA, 1);
  9a:	9b b3       	in	r25, 0x1b	; 27
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	89 27       	eor	r24, r25
  a0:	8b bb       	out	0x1b, r24	; 27
	if(bit_is_clear(PIND, 2))
  a2:	82 99       	sbic	0x10, 2	; 16
  a4:	08 c0       	rjmp	.+16     	; 0xb6 <__vector_1+0x2c>
	{
		MCUCR |= (1<<ISC01)|(1<<ISC00); // canh xuong
  a6:	85 b7       	in	r24, 0x35	; 53
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	85 bf       	out	0x35, r24	; 53
		sbi(PORTA, 0);
  ac:	d8 9a       	sbi	0x1b, 0	; 27
		TCCR1B |= (1<<CS10);
  ae:	8e b5       	in	r24, 0x2e	; 46
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	8e bd       	out	0x2e, r24	; 46
  b4:	35 c0       	rjmp	.+106    	; 0x120 <__vector_1+0x96>
	} else
	{
		MCUCR |= (1<<ISC01); // canh xuong
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	85 bf       	out	0x35, r24	; 53
		MCUCR &= (0<<ISC00);
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	15 be       	out	0x35, r1	; 53
		cbi(PORTA, 0);
  c0:	d8 98       	cbi	0x1b, 0	; 27
		TCCR1B &= (0<<CS10);
  c2:	8e b5       	in	r24, 0x2e	; 46
  c4:	1e bc       	out	0x2e, r1	; 46
		
		if(sec <= 2000)
  c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ca:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ce:	81 3d       	cpi	r24, 0xD1	; 209
  d0:	97 40       	sbci	r25, 0x07	; 7
  d2:	28 f4       	brcc	.+10     	; 0xde <__vector_1+0x54>
		{
			tbi(PORTA, 5);
  d4:	9b b3       	in	r25, 0x1b	; 27
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	89 27       	eor	r24, r25
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	1d c0       	rjmp	.+58     	; 0x118 <__vector_1+0x8e>
		}
		else if(sec > 2000 && sec < 5000)
  de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e6:	81 3d       	cpi	r24, 0xD1	; 209
  e8:	97 40       	sbci	r25, 0x07	; 7
  ea:	60 f0       	brcs	.+24     	; 0x104 <__vector_1+0x7a>
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f4:	88 38       	cpi	r24, 0x88	; 136
  f6:	93 41       	sbci	r25, 0x13	; 19
  f8:	28 f4       	brcc	.+10     	; 0x104 <__vector_1+0x7a>
		{
			tbi(PORTA, 6);
  fa:	9b b3       	in	r25, 0x1b	; 27
  fc:	80 e4       	ldi	r24, 0x40	; 64
  fe:	89 27       	eor	r24, r25
 100:	8b bb       	out	0x1b, r24	; 27
 102:	0a c0       	rjmp	.+20     	; 0x118 <__vector_1+0x8e>
		} else if(sec > 5000)
 104:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 108:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10c:	89 38       	cpi	r24, 0x89	; 137
 10e:	93 41       	sbci	r25, 0x13	; 19
 110:	18 f0       	brcs	.+6      	; 0x118 <__vector_1+0x8e>
		{
			tbi(PORTA, 7);
 112:	8b b3       	in	r24, 0x1b	; 27
 114:	80 58       	subi	r24, 0x80	; 128
 116:	8b bb       	out	0x1b, r24	; 27
		}
		sec = 0;
 118:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
	TCNT1 = 49536;
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	91 ec       	ldi	r25, 0xC1	; 193
 142:	9d bd       	out	0x2d, r25	; 45
 144:	8c bd       	out	0x2c, r24	; 44
	tbi(PORTA, 2);
 146:	9b b3       	in	r25, 0x1b	; 27
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	89 27       	eor	r24, r25
 14c:	8b bb       	out	0x1b, r24	; 27
	sec++;
 14e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 152:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <Timer1_Init>:
void Timer1_Init()
{
	TCNT1 = 49536;
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	91 ec       	ldi	r25, 0xC1	; 193
 172:	9d bd       	out	0x2d, r25	; 45
 174:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00;
 176:	1f bc       	out	0x2f, r1	; 47
	TIMSK |= (1<<TOIE1);
 178:	89 b7       	in	r24, 0x39	; 57
 17a:	84 60       	ori	r24, 0x04	; 4
 17c:	89 bf       	out	0x39, r24	; 57
 17e:	08 95       	ret

00000180 <main>:

void Interrupt_Init();
void Timer1_Init();
int main(void)
{
	DDRA = 0xFF;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	8a bb       	out	0x1a, r24	; 26
	/*---*/
	Interrupt_Init();
 184:	0e 94 3e 00 	call	0x7c	; 0x7c <Interrupt_Init>
	Timer1_Init();
 188:	0e 94 b7 00 	call	0x16e	; 0x16e <Timer1_Init>
	sei();
 18c:	78 94       	sei
 18e:	ff cf       	rjmp	.-2      	; 0x18e <main+0xe>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
