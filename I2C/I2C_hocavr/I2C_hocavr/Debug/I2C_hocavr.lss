
I2C_hocavr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000284  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f98  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000810  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000833  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00002444  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047a  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000951  00000000  00000000  00002a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000033b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  7a:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2C_Init>:
			I2C_Stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
  82:	11 b8       	out	0x01, r1	; 1
  84:	88 e4       	ldi	r24, 0x48	; 72
  86:	80 b9       	out	0x00, r24	; 0
  88:	08 95       	ret

0000008a <I2C_Start>:
  8a:	94 ea       	ldi	r25, 0xA4	; 164
  8c:	96 bf       	out	0x36, r25	; 54
  8e:	06 b6       	in	r0, 0x36	; 54
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <I2C_Start+0x4>
  94:	91 b1       	in	r25, 0x01	; 1
  96:	98 7f       	andi	r25, 0xF8	; 248
  98:	98 30       	cpi	r25, 0x08	; 8
  9a:	71 f4       	brne	.+28     	; 0xb8 <I2C_Start+0x2e>
  9c:	83 b9       	out	0x03, r24	; 3
  9e:	84 e8       	ldi	r24, 0x84	; 132
  a0:	86 bf       	out	0x36, r24	; 54
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <I2C_Start+0x18>
  a8:	81 b1       	in	r24, 0x01	; 1
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	88 31       	cpi	r24, 0x18	; 24
  ae:	31 f0       	breq	.+12     	; 0xbc <I2C_Start+0x32>
  b0:	80 32       	cpi	r24, 0x20	; 32
  b2:	31 f0       	breq	.+12     	; 0xc0 <I2C_Start+0x36>
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	08 95       	ret
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	08 95       	ret
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	08 95       	ret
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	08 95       	ret

000000c4 <I2C_Stop>:
  c4:	84 e9       	ldi	r24, 0x94	; 148
  c6:	86 bf       	out	0x36, r24	; 54
  c8:	06 b6       	in	r0, 0x36	; 54
  ca:	04 fc       	sbrc	r0, 4
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <I2C_Stop+0x4>
  ce:	08 95       	ret

000000d0 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
  d0:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
  d6:	06 b6       	in	r0, 0x36	; 54
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
  dc:	81 b1       	in	r24, 0x01	; 1
  de:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
  e0:	88 32       	cpi	r24, 0x28	; 40
  e2:	21 f0       	breq	.+8      	; 0xec <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
  e4:	80 33       	cpi	r24, 0x30	; 48
  e6:	21 f0       	breq	.+8      	; 0xf0 <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
  f0:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
  f2:	08 95       	ret

000000f4 <Lcd_Write_Char>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	90 e1       	ldi	r25, 0x10	; 16
  fc:	89 9f       	mul	r24, r25
  fe:	80 01       	movw	r16, r0
 100:	11 24       	eor	r1, r1
 102:	c8 2f       	mov	r28, r24
 104:	c0 7f       	andi	r28, 0xF0	; 240
 106:	8e e4       	ldi	r24, 0x4E	; 78
 108:	0e 94 45 00 	call	0x8a	; 0x8a <I2C_Start>
 10c:	8c 2f       	mov	r24, r28
 10e:	8d 60       	ori	r24, 0x0D	; 13
 110:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 114:	8f e3       	ldi	r24, 0x3F	; 63
 116:	9f e1       	ldi	r25, 0x1F	; 31
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <Lcd_Write_Char+0x24>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <Lcd_Write_Char+0x2a>
 11e:	00 00       	nop
 120:	8c 2f       	mov	r24, r28
 122:	89 60       	ori	r24, 0x09	; 9
 124:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9f e1       	ldi	r25, 0x1F	; 31
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <Lcd_Write_Char+0x38>
 130:	00 c0       	rjmp	.+0      	; 0x132 <Lcd_Write_Char+0x3e>
 132:	00 00       	nop
 134:	80 2f       	mov	r24, r16
 136:	8d 60       	ori	r24, 0x0D	; 13
 138:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9f e1       	ldi	r25, 0x1F	; 31
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <Lcd_Write_Char+0x4c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <Lcd_Write_Char+0x52>
 146:	00 00       	nop
 148:	80 2f       	mov	r24, r16
 14a:	89 60       	ori	r24, 0x09	; 9
 14c:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 150:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Stop>
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <lcd_send_cmd>:
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	90 e1       	ldi	r25, 0x10	; 16
 164:	89 9f       	mul	r24, r25
 166:	80 01       	movw	r16, r0
 168:	11 24       	eor	r1, r1
 16a:	c8 2f       	mov	r28, r24
 16c:	c0 7f       	andi	r28, 0xF0	; 240
 16e:	8e e4       	ldi	r24, 0x4E	; 78
 170:	0e 94 45 00 	call	0x8a	; 0x8a <I2C_Start>
 174:	8c 2f       	mov	r24, r28
 176:	8c 60       	ori	r24, 0x0C	; 12
 178:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9f e1       	ldi	r25, 0x1F	; 31
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_send_cmd+0x24>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_send_cmd+0x2a>
 186:	00 00       	nop
 188:	8c 2f       	mov	r24, r28
 18a:	88 60       	ori	r24, 0x08	; 8
 18c:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 190:	8f e3       	ldi	r24, 0x3F	; 63
 192:	9f e1       	ldi	r25, 0x1F	; 31
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_send_cmd+0x38>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_send_cmd+0x3e>
 19a:	00 00       	nop
 19c:	80 2f       	mov	r24, r16
 19e:	8c 60       	ori	r24, 0x0C	; 12
 1a0:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 1a4:	8f e3       	ldi	r24, 0x3F	; 63
 1a6:	9f e1       	ldi	r25, 0x1F	; 31
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_send_cmd+0x4c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_send_cmd+0x52>
 1ae:	00 00       	nop
 1b0:	80 2f       	mov	r24, r16
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
 1b8:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Stop>
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <Lcd_Init>:
	lcd_send_cmd(1);
	_delay_ms(2);
}
void Lcd_Init()
{
	lcd_send_cmd(0x02);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 1ca:	8f e3       	ldi	r24, 0x3F	; 63
 1cc:	9f e1       	ldi	r25, 0x1F	; 31
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <Lcd_Init+0xa>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <Lcd_Init+0x10>
 1d4:	00 00       	nop
	_delay_ms(2);
	lcd_send_cmd(0x28);
 1d6:	88 e2       	ldi	r24, 0x28	; 40
 1d8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <Lcd_Init+0x1c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <Lcd_Init+0x22>
 1e6:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(0x0c);
 1e8:	8c e0       	ldi	r24, 0x0C	; 12
 1ea:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 1ee:	8f e9       	ldi	r24, 0x9F	; 159
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <Lcd_Init+0x2e>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <Lcd_Init+0x34>
 1f8:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(0x80);
 1fa:	80 e8       	ldi	r24, 0x80	; 128
 1fc:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 200:	8f e9       	ldi	r24, 0x9F	; 159
 202:	9f e0       	ldi	r25, 0x0F	; 15
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <Lcd_Init+0x40>
 208:	00 c0       	rjmp	.+0      	; 0x20a <Lcd_Init+0x46>
 20a:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(0x01);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	9f e1       	ldi	r25, 0x1F	; 31
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <Lcd_Init+0x52>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <Lcd_Init+0x58>
 21c:	00 00       	nop
 21e:	08 95       	ret

00000220 <Lcd_Write_String>:
	_delay_ms(2);
}
void Lcd_Write_String(char *str)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!='\0';i++)
 226:	88 81       	ld	r24, Y
 228:	88 23       	and	r24, r24
 22a:	31 f0       	breq	.+12     	; 0x238 <Lcd_Write_String+0x18>
 22c:	21 96       	adiw	r28, 0x01	; 1
	Lcd_Write_Char(str[i]);
 22e:	0e 94 7a 00 	call	0xf4	; 0xf4 <Lcd_Write_Char>
	_delay_ms(2);
}
void Lcd_Write_String(char *str)
{
	int i;
	for(i=0;str[i]!='\0';i++)
 232:	89 91       	ld	r24, Y+
 234:	81 11       	cpse	r24, r1
 236:	fb cf       	rjmp	.-10     	; 0x22e <Lcd_Write_String+0xe>
	Lcd_Write_Char(str[i]);
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <Lcd_Set_Cursor>:
void Lcd_Set_Cursor(unsigned char row, unsigned char col)
{
	unsigned char cmd;
	cmd = (row==1?0x80:0xC0) + col - 1;
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	11 f0       	breq	.+4      	; 0x246 <Lcd_Set_Cursor+0x8>
 242:	80 ec       	ldi	r24, 0xC0	; 192
 244:	01 c0       	rjmp	.+2      	; 0x248 <Lcd_Set_Cursor+0xa>
 246:	80 e8       	ldi	r24, 0x80	; 128
	lcd_send_cmd(cmd);
 248:	61 50       	subi	r22, 0x01	; 1
 24a:	86 0f       	add	r24, r22
 24c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_send_cmd>
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	9f e1       	ldi	r25, 0x1F	; 31
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <Lcd_Set_Cursor+0x16>
 258:	00 c0       	rjmp	.+0      	; 0x25a <Lcd_Set_Cursor+0x1c>
 25a:	00 00       	nop
 25c:	08 95       	ret

0000025e <main>:
#include "LCD_I2C.h"


int main(void)
{
	I2C_Init();
 25e:	0e 94 41 00 	call	0x82	; 0x82 <I2C_Init>
	//
	Lcd_Init();
 262:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Lcd_Init>
	Lcd_Write_String("PHAM QUANG PHUOC");	
 266:	80 e6       	ldi	r24, 0x60	; 96
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 10 01 	call	0x220	; 0x220 <Lcd_Write_String>
	Lcd_Set_Cursor(2,1);	
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 1f 01 	call	0x23e	; 0x23e <Lcd_Set_Cursor>
	Lcd_Write_String("TU DONG HOA - 57");	
 276:	81 e7       	ldi	r24, 0x71	; 113
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 10 01 	call	0x220	; 0x220 <Lcd_Write_String>
 27e:	ff cf       	rjmp	.-2      	; 0x27e <main+0x20>

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
