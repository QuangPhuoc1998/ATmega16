
I2C_P2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d3  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d1  00000000  00000000  00000b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e6  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bb  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e0  00000000  00000000  00001d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000212b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_17>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Slave_Init>:
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
	return -3;									/* If yes then return -3 */
	else										/* else return -4 */
	return -4;
}
  6c:	82 b9       	out	0x02, r24	; 2
  6e:	85 ec       	ldi	r24, 0xC5	; 197
  70:	86 bf       	out	0x36, r24	; 54
  72:	08 95       	ret

00000074 <I2C_Slave_Listen>:
  74:	06 b6       	in	r0, 0x36	; 54
  76:	07 fe       	sbrs	r0, 7
  78:	fd cf       	rjmp	.-6      	; 0x74 <I2C_Slave_Listen>
  7a:	81 b1       	in	r24, 0x01	; 1
  7c:	98 2f       	mov	r25, r24
  7e:	98 7f       	andi	r25, 0xF8	; 248
  80:	80 7f       	andi	r24, 0xF0	; 240
  82:	80 36       	cpi	r24, 0x60	; 96
  84:	41 f0       	breq	.+16     	; 0x96 <I2C_Slave_Listen+0x22>
  86:	98 3a       	cpi	r25, 0xA8	; 168
  88:	41 f0       	breq	.+16     	; 0x9a <I2C_Slave_Listen+0x26>
  8a:	90 3b       	cpi	r25, 0xB0	; 176
  8c:	41 f0       	breq	.+16     	; 0x9e <I2C_Slave_Listen+0x2a>
  8e:	80 37       	cpi	r24, 0x70	; 112
  90:	89 f7       	brne	.-30     	; 0x74 <I2C_Slave_Listen>
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	08 95       	ret
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	08 95       	ret
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	08 95       	ret
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	08 95       	ret

000000a2 <I2C_Slave_Receive>:

char I2C_Slave_Receive()
{
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
  a2:	84 ec       	ldi	r24, 0xC4	; 196
  a4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
  a6:	06 b6       	in	r0, 0x36	; 54
  a8:	07 fe       	sbrs	r0, 7
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <I2C_Slave_Receive+0x4>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
  ac:	81 b1       	in	r24, 0x01	; 1
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
  ae:	98 2f       	mov	r25, r24
  b0:	98 7e       	andi	r25, 0xE8	; 232
  b2:	90 38       	cpi	r25, 0x80	; 128
  b4:	11 f4       	brne	.+4      	; 0xba <I2C_Slave_Receive+0x18>
	return TWDR;								/* If yes then return received data */
  b6:	83 b1       	in	r24, 0x03	; 3
  b8:	08 95       	ret
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
  ba:	98 38       	cpi	r25, 0x88	; 136
  bc:	11 f4       	brne	.+4      	; 0xc2 <I2C_Slave_Receive+0x20>
	return TWDR;								/* If yes then return received data */
  be:	83 b1       	in	r24, 0x03	; 3
  c0:	08 95       	ret
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
  c2:	88 7f       	andi	r24, 0xF8	; 248
  c4:	80 3a       	cpi	r24, 0xA0	; 160
  c6:	29 f4       	brne	.+10     	; 0xd2 <I2C_Slave_Receive+0x30>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
  c8:	86 b7       	in	r24, 0x36	; 54
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	86 bf       	out	0x36, r24	; 54
		return -1;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	08 95       	ret
	}
	else
	return -2;									/* Else return 1 */
  d2:	8e ef       	ldi	r24, 0xFE	; 254
  d4:	08 95       	ret

000000d6 <main>:
#include <avr/interrupt.h>


int main(void)
{
  DDRB = 0xFF;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	87 bb       	out	0x17, r24	; 23
  
  // chuong trinh con
  I2C_Slave_Init(0x40);
  da:	80 e4       	ldi	r24, 0x40	; 64
  dc:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Slave_Init>
  sei();
  e0:	78 94       	sei
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0xc>

000000e4 <__vector_17>:
  while(1)
  {
  }
}
ISR(TWI_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
  if(I2C_Slave_Listen() == 0)
 106:	0e 94 3a 00 	call	0x74	; 0x74 <I2C_Slave_Listen>
 10a:	81 11       	cpse	r24, r1
 10c:	07 c0       	rjmp	.+14     	; 0x11c <__vector_17+0x38>
  {
    unsigned char i = I2C_Slave_Receive(); 
 10e:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_Slave_Receive>
	if(i == 'A') PORTB = ~PORTB;
 112:	81 34       	cpi	r24, 0x41	; 65
 114:	19 f4       	brne	.+6      	; 0x11c <__vector_17+0x38>
 116:	88 b3       	in	r24, 0x18	; 24
 118:	80 95       	com	r24
 11a:	88 bb       	out	0x18, r24	; 24
  } 
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
