
I2C_P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093d  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000710  00000000  00000000  00000ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000627  00000000  00000000  000012b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fa  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000302  00000000  00000000  00001dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6f 00 	call	0xde	; 0xde <main>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Init>:
			I2C_Stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
  6c:	11 b8       	out	0x01, r1	; 1
  6e:	88 e4       	ldi	r24, 0x48	; 72
  70:	80 b9       	out	0x00, r24	; 0
  72:	08 95       	ret

00000074 <I2C_Start>:
  74:	94 ea       	ldi	r25, 0xA4	; 164
  76:	96 bf       	out	0x36, r25	; 54
  78:	06 b6       	in	r0, 0x36	; 54
  7a:	07 fe       	sbrs	r0, 7
  7c:	fd cf       	rjmp	.-6      	; 0x78 <I2C_Start+0x4>
  7e:	91 b1       	in	r25, 0x01	; 1
  80:	98 7f       	andi	r25, 0xF8	; 248
  82:	98 30       	cpi	r25, 0x08	; 8
  84:	71 f4       	brne	.+28     	; 0xa2 <I2C_Start+0x2e>
  86:	83 b9       	out	0x03, r24	; 3
  88:	84 e8       	ldi	r24, 0x84	; 132
  8a:	86 bf       	out	0x36, r24	; 54
  8c:	06 b6       	in	r0, 0x36	; 54
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <I2C_Start+0x18>
  92:	81 b1       	in	r24, 0x01	; 1
  94:	88 7f       	andi	r24, 0xF8	; 248
  96:	88 31       	cpi	r24, 0x18	; 24
  98:	31 f0       	breq	.+12     	; 0xa6 <I2C_Start+0x32>
  9a:	80 32       	cpi	r24, 0x20	; 32
  9c:	31 f0       	breq	.+12     	; 0xaa <I2C_Start+0x36>
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	08 95       	ret
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	08 95       	ret
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	08 95       	ret
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	08 95       	ret

000000ae <I2C_Stop>:
  ae:	84 e9       	ldi	r24, 0x94	; 148
  b0:	86 bf       	out	0x36, r24	; 54
  b2:	06 b6       	in	r0, 0x36	; 54
  b4:	04 fc       	sbrc	r0, 4
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <I2C_Stop+0x4>
  b8:	08 95       	ret

000000ba <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
  ba:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
  bc:	84 e8       	ldi	r24, 0x84	; 132
  be:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
  c0:	06 b6       	in	r0, 0x36	; 54
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
  c6:	81 b1       	in	r24, 0x01	; 1
  c8:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
  ca:	88 32       	cpi	r24, 0x28	; 40
  cc:	21 f0       	breq	.+8      	; 0xd6 <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
  ce:	80 33       	cpi	r24, 0x30	; 48
  d0:	21 f0       	breq	.+8      	; 0xda <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
  da:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
  dc:	08 95       	ret

000000de <main>:
#include "I2C.h"

int main(void)
{
  // chuong trinh con
  I2C_Init();
  de:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Init>
  while(1)
  {
    I2C_Start(0x40);
  e2:	80 e4       	ldi	r24, 0x40	; 64
  e4:	0e 94 3a 00 	call	0x74	; 0x74 <I2C_Start>
	I2C_Write(0xAA);
  e8:	8a ea       	ldi	r24, 0xAA	; 170
  ea:	0e 94 5d 00 	call	0xba	; 0xba <I2C_Write>
	I2C_Stop();
  ee:	0e 94 57 00 	call	0xae	; 0xae <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 e6       	ldi	r24, 0x69	; 105
  f6:	98 e1       	ldi	r25, 0x18	; 24
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x1a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x24>
 102:	00 00       	nop
 104:	ee cf       	rjmp	.-36     	; 0xe2 <main+0x4>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
