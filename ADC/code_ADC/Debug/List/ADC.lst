
AVRASM ver. 2.1.30  E:\AVR\ATmega16\ADC\code_ADC\Debug\List\ADC.asm Fri Apr 12 21:35:17 2019

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 6947
00002b 2061
00002c 7274
00002d 3a69      	.DB  0x47,0x69,0x61,0x20,0x74,0x72,0x69,0x3A
00002e 0020
00002f 684e
000030 6569
000031 2074      	.DB  0x20,0x0,0x4E,0x68,0x69,0x65,0x74,0x20
000032 6f64
000033 203a
E:\AVR\ATmega16\ADC\code_ADC\Debug\List\ADC.asm(1119): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x64,0x6F,0x3A,0x20,0x0
                 
                 __GLOBAL_INI_TBL:
000035 000a      	.DW  0x0A
000036 0160      	.DW  _0xF
000037 0054      	.DW  _0x0*2
                 
000038 000b      	.DW  0x0B
000039 016a      	.DW  _0xF+10
00003a 005e      	.DW  _0x0*2+10
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 0069 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * ADC.c
                 ; *
                 ; * Created: 12/04/2019 20:44:02
                 ; * Author: ADMIN
                 ; */
                 ;
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "lcd4.h"
                 ;
                 ;void ADC_Init();
                 ;unsigned int Read_ADC(unsigned char channel);
                 ;void main(void)
                 ; 0000 000E {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000F // khai bao bien
                 ; 0000 0010 unsigned int a, t;
                 ; 0000 0011 // cau hinh port
                 ; 0000 0012 DDRB.0 = 1;
                 ;	a -> R16,R17
                 ;	t -> R18,R19
000069 9ab8      	SBI  0x17,0
                 ; 0000 0013 DDRB.1 = 1;
00006a 9ab9      	SBI  0x17,1
                 ; 0000 0014 DDRB.2 = 1;
00006b 9aba      	SBI  0x17,2
                 ; 0000 0015 DDRB.3 = 1;
00006c 9abb      	SBI  0x17,3
                 ; 0000 0016 DDRB.4 = 1;
00006d 9abc      	SBI  0x17,4
                 ; 0000 0017 DDRB.5 = 1;
00006e 9abd      	SBI  0x17,5
                 ; 0000 0018 // chuong trinh con
                 ; 0000 0019 Lcd_Init();
00006f d098      	RCALL _Lcd_Init
                 ; 0000 001A ADC_Init();
000070 d03c      	RCALL _ADC_Init
                 ; 0000 001B // chuong trinh chinh
                 ; 0000 001C Lcd_Write_String("Gia tri: ");
                +
000071 e6a0     +LDI R26 , LOW ( _0xF + ( 0 ) )
000072 e0b1     +LDI R27 , HIGH ( _0xF + ( 0 ) )
                 	__POINTW2MN _0xF,0
000073 d0c0      	RCALL _Lcd_Write_String
                 ; 0000 001D Lcd_Set_Cursor(2,1);
000074 e0e2      	LDI  R30,LOW(2)
000075 93ea      	ST   -Y,R30
000076 e0a1      	LDI  R26,LOW(1)
000077 d06d      	RCALL _Lcd_Set_Cursor
                 ; 0000 001E Lcd_Write_String("Nhiet do: ");
                +
000078 e6aa     +LDI R26 , LOW ( _0xF + ( 10 ) )
000079 e0b1     +LDI R27 , HIGH ( _0xF + ( 10 ) )
                 	__POINTW2MN _0xF,10
00007a d0b9      	RCALL _Lcd_Write_String
                 ; 0000 001F while (1)
                 _0x10:
                 ; 0000 0020     {
                 ; 0000 0021       a = Read_ADC(0);
00007b e0a0      	LDI  R26,LOW(0)
00007c d035      	RCALL _Read_ADC
00007d 018f      	MOVW R16,R30
                 ; 0000 0022       t = a*0.488f;
00007e 2766      	CLR  R22
00007f 2777      	CLR  R23
000080 940e 01e2 	CALL __CDF1
                +
000082 e2a3     +LDI R26 , LOW ( 0x3EF9DB23 )
000083 edbb     +LDI R27 , HIGH ( 0x3EF9DB23 )
000084 ef89     +LDI R24 , BYTE3 ( 0x3EF9DB23 )
000085 e39e     +LDI R25 , BYTE4 ( 0x3EF9DB23 )
                 	__GETD2N 0x3EF9DB23
000086 940e 0210 	CALL __MULF12
000088 940e 01a9 	CALL __CFD1U
00008a 019f      	MOVW R18,R30
                 ; 0000 0023       // gia tri
                 ; 0000 0024       Lcd_Set_Cursor(1,10);
00008b e0e1      	LDI  R30,LOW(1)
00008c 93ea      	ST   -Y,R30
00008d e0aa      	LDI  R26,LOW(10)
00008e d056      	RCALL _Lcd_Set_Cursor
                 ; 0000 0025       Lcd_Write_Char(a/1000+48);
00008f 01d8      	MOVW R26,R16
000090 eee8      	LDI  R30,LOW(1000)
000091 e0f3      	LDI  R31,HIGH(1000)
000092 d0bd      	RCALL SUBOPT_0x0
                 ; 0000 0026       Lcd_Write_Char((a%1000)/100+48);
000093 eee8      	LDI  R30,LOW(1000)
000094 e0f3      	LDI  R31,HIGH(1000)
000095 940e 0287 	CALL __MODW21U
000097 01df      	MOVW R26,R30
000098 e6e4      	LDI  R30,LOW(100)
000099 e0f0      	LDI  R31,HIGH(100)
00009a d0b5      	RCALL SUBOPT_0x0
                 ; 0000 0027       Lcd_Write_Char((a%100)/10+48);
00009b d0bb      	RCALL SUBOPT_0x1
00009c d0b3      	RCALL SUBOPT_0x0
                 ; 0000 0028       Lcd_Write_Char(a%10+48);
00009d d0c1      	RCALL SUBOPT_0x2
                 ; 0000 0029       // nhiet do
                 ; 0000 002A       Lcd_Set_Cursor(2,11);
00009e e0e2      	LDI  R30,LOW(2)
00009f 93ea      	ST   -Y,R30
0000a0 e0ab      	LDI  R26,LOW(11)
0000a1 d043      	RCALL _Lcd_Set_Cursor
                 ; 0000 002B       Lcd_Write_Char((t%100)/10+48);
0000a2 01d9      	MOVW R26,R18
0000a3 d0b3      	RCALL SUBOPT_0x1
0000a4 940e 0274 	CALL __DIVW21U
0000a6 5de0      	SUBI R30,-LOW(48)
0000a7 2fae      	MOV  R26,R30
0000a8 d076      	RCALL _Lcd_Write_Char
                 ; 0000 002C       Lcd_Write_Char(t%10+48);
0000a9 01d9      	MOVW R26,R18
0000aa d0b4      	RCALL SUBOPT_0x2
                 ; 0000 002D     }
0000ab cfcf      	RJMP _0x10
                 ; 0000 002E }
                 _0x13:
0000ac cfff      	RJMP _0x13
                 ; .FEND
                 
                 	.DSEG
                 _0xF:
000160           	.BYTE 0x15
                 ;void ADC_Init()
                 ; 0000 0030 {
                 
                 	.CSEG
                 _ADC_Init:
                 ; .FSTART _ADC_Init
                 ; 0000 0031   // thanh ghi ADMUX
                 ; 0000 0032   ADMUX |= (1<<REFS0); // dien ap: AVCC, ADCL chua 8 bit thap
0000ad 9a3e      	SBI  0x7,6
                 ; 0000 0033   // thanh ghi ADCSRA
                 ; 0000 0034   ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(ADPS0); // cho phep ADC, chia 128
0000ae b1e6      	IN   R30,0x6
0000af 68e6      	ORI  R30,LOW(0x86)
0000b0 b9e6      	OUT  0x6,R30
                 ; 0000 0035 }
0000b1 9508      	RET
                 ; .FEND
                 ;unsigned int Read_ADC(unsigned char channel)
                 ; 0000 0037 {
                 _Read_ADC:
                 ; .FSTART _Read_ADC
                 ; 0000 0038   ADMUX |= channel;
0000b2 93aa      	ST   -Y,R26
                 ;	channel -> Y+0
0000b3 b1e7      	IN   R30,0x7
0000b4 81a8      	LD   R26,Y
0000b5 2bea      	OR   R30,R26
0000b6 b9e7      	OUT  0x7,R30
                 ; 0000 0039   delay_us(10);
                +
0000b7 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000b8 958a     +DEC R24
0000b9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 003A   ADCSRA |= (1<<ADSC); // cho phep bat dau chuyen doi
0000ba 9a36      	SBI  0x6,6
                 ; 0000 003B   while(ADIF==0);
                 ; 0000 003C   ADCSRA |= (1<<ADIF);
0000bb 9a34      	SBI  0x6,4
                 ; 0000 003D   return ADCW;
0000bc b1e4      	IN   R30,0x4
0000bd b1f5      	IN   R31,0x4+1
0000be c024      	RJMP _0x2000001
                 ; 0000 003E }
                 ; .FEND
                 ;
                 ;
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "lcd4.h"
                 ;
                 ;void Lcd_Port(char a)
                 ; 0001 0006 {
                 
                 	.CSEG
                 _Lcd_Port:
                 ; .FSTART _Lcd_Port
                 ; 0001 0007 	if(a & 1)
0000bf 93aa      	ST   -Y,R26
                 ;	a -> Y+0
0000c0 81e8      	LD   R30,Y
0000c1 70e1      	ANDI R30,LOW(0x1)
0000c2 f011      	BREQ _0x20003
                 ; 0001 0008 		D4 = 1;
0000c3 9ac2      	SBI  0x18,2
                 ; 0001 0009 	else
0000c4 c001      	RJMP _0x20006
                 _0x20003:
                 ; 0001 000A 		D4 = 0;
0000c5 98c2      	CBI  0x18,2
                 ; 0001 000B 
                 ; 0001 000C 	if(a & 2)
                 _0x20006:
0000c6 81e8      	LD   R30,Y
0000c7 70e2      	ANDI R30,LOW(0x2)
0000c8 f011      	BREQ _0x20009
                 ; 0001 000D 		D5 = 1;
0000c9 9ac3      	SBI  0x18,3
                 ; 0001 000E 	else
0000ca c001      	RJMP _0x2000C
                 _0x20009:
                 ; 0001 000F 		D5 = 0;
0000cb 98c3      	CBI  0x18,3
                 ; 0001 0010 
                 ; 0001 0011 	if(a & 4)
                 _0x2000C:
0000cc 81e8      	LD   R30,Y
0000cd 70e4      	ANDI R30,LOW(0x4)
0000ce f011      	BREQ _0x2000F
                 ; 0001 0012 		D6 = 1;
0000cf 9ac4      	SBI  0x18,4
                 ; 0001 0013 	else
0000d0 c001      	RJMP _0x20012
                 _0x2000F:
                 ; 0001 0014 		D6 = 0;
0000d1 98c4      	CBI  0x18,4
                 ; 0001 0015 
                 ; 0001 0016 	if(a & 8)
                 _0x20012:
0000d2 81e8      	LD   R30,Y
0000d3 70e8      	ANDI R30,LOW(0x8)
0000d4 f011      	BREQ _0x20015
                 ; 0001 0017 		D7 = 1;
0000d5 9ac5      	SBI  0x18,5
                 ; 0001 0018 	else
0000d6 c001      	RJMP _0x20018
                 _0x20015:
                 ; 0001 0019 		D7 = 0;
0000d7 98c5      	CBI  0x18,5
                 ; 0001 001A }
                 _0x20018:
0000d8 c00a      	RJMP _0x2000001
                 ; .FEND
                 ;void Lcd_Cmd(char a)
                 ; 0001 001C {
                 _Lcd_Cmd:
                 ; .FSTART _Lcd_Cmd
                 ; 0001 001D 	RS = 0;             // => RS = 0
0000d9 93aa      	ST   -Y,R26
                 ;	a -> Y+0
0000da 98c0      	CBI  0x18,0
                 ; 0001 001E 	Lcd_Port(a);
0000db 81a8      	LD   R26,Y
0000dc dfe2      	RCALL _Lcd_Port
                 ; 0001 001F 	EN  = 1;             // => E = 1
0000dd 9ac1      	SBI  0x18,1
                 ; 0001 0020         delay_ms(4);
0000de e0a4      	LDI  R26,LOW(4)
0000df e0b0      	LDI  R27,0
0000e0 940e 0172 	CALL _delay_ms
                 ; 0001 0021         EN  = 0;             // => E = 0
0000e2 98c1      	CBI  0x18,1
                 ; 0001 0022 }
                 _0x2000001:
0000e3 9621      	ADIW R28,1
0000e4 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Clear()
                 ; 0001 0025 {
                 ; 0001 0026 	Lcd_Cmd(0);
                 ; 0001 0027 	Lcd_Cmd(1);
                 ; 0001 0028 }
                 ;
                 ;void Lcd_Set_Cursor(char a, char b)
                 ; 0001 002B {
                 _Lcd_Set_Cursor:
                 ; .FSTART _Lcd_Set_Cursor
                 ; 0001 002C 	char temp,z,y;
                 ; 0001 002D 	if(a == 1)
0000e5 93aa      	ST   -Y,R26
0000e6 940e 028a 	CALL __SAVELOCR4
                 ;	a -> Y+5
                 ;	b -> Y+4
                 ;	temp -> R17
                 ;	z -> R16
                 ;	y -> R19
0000e8 81ad      	LDD  R26,Y+5
0000e9 30a1      	CPI  R26,LOW(0x1)
0000ea f429      	BRNE _0x20021
                 ; 0001 002E 	{
                 ; 0001 002F 	  temp = 0x80 + b - 1;
0000eb 81ec      	LDD  R30,Y+4
0000ec e0f0      	LDI  R31,0
0000ed 58e0      	SUBI R30,LOW(-128)
0000ee 4fff      	SBCI R31,HIGH(-128)
0000ef c007      	RJMP _0x20031
                 ; 0001 0030 		z = temp>>4;
                 ; 0001 0031 		y = temp & 0x0F;
                 ; 0001 0032 		Lcd_Cmd(z);
                 ; 0001 0033 		Lcd_Cmd(y);
                 ; 0001 0034 	}
                 ; 0001 0035 	else if(a == 2)
                 _0x20021:
0000f0 81ad      	LDD  R26,Y+5
0000f1 30a2      	CPI  R26,LOW(0x2)
0000f2 f489      	BRNE _0x20023
                 ; 0001 0036 	{
                 ; 0001 0037 		temp = 0xC0 + b - 1;
0000f3 81ec      	LDD  R30,Y+4
0000f4 e0f0      	LDI  R31,0
0000f5 54e0      	SUBI R30,LOW(-192)
0000f6 4fff      	SBCI R31,HIGH(-192)
                 _0x20031:
0000f7 9731      	SBIW R30,1
0000f8 2f1e      	MOV  R17,R30
                 ; 0001 0038 		z = temp>>4;
0000f9 e0f0      	LDI  R31,0
0000fa 940e 0266 	CALL __ASRW4
0000fc 2f0e      	MOV  R16,R30
                 ; 0001 0039 		y = temp & 0x0F;
0000fd 2fe1      	MOV  R30,R17
0000fe 70ef      	ANDI R30,LOW(0xF)
0000ff 2f3e      	MOV  R19,R30
                 ; 0001 003A 		Lcd_Cmd(z);
000100 2fa0      	MOV  R26,R16
000101 dfd7      	RCALL _Lcd_Cmd
                 ; 0001 003B 		Lcd_Cmd(y);
000102 2fa3      	MOV  R26,R19
000103 dfd5      	RCALL _Lcd_Cmd
                 ; 0001 003C 	}
                 ; 0001 003D }
                 _0x20023:
000104 940e 028f 	CALL __LOADLOCR4
000106 9626      	ADIW R28,6
000107 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Init()
                 ; 0001 0040 {
                 _Lcd_Init:
                 ; .FSTART _Lcd_Init
                 ; 0001 0041   Lcd_Port(0x00);
000108 e0a0      	LDI  R26,LOW(0)
000109 dfb5      	RCALL _Lcd_Port
                 ; 0001 0042   delay_ms(20);
00010a e1a4      	LDI  R26,LOW(20)
00010b d05a      	RCALL SUBOPT_0x3
                 ; 0001 0043   Lcd_Cmd(0x03);
                 ; 0001 0044   delay_ms(5);
00010c e0a5      	LDI  R26,LOW(5)
00010d d058      	RCALL SUBOPT_0x3
                 ; 0001 0045   Lcd_Cmd(0x03);
                 ; 0001 0046   delay_ms(11);
00010e e0ab      	LDI  R26,LOW(11)
00010f d056      	RCALL SUBOPT_0x3
                 ; 0001 0047   Lcd_Cmd(0x03);
                 ; 0001 0048   /////////////////////////////////////////////////////
                 ; 0001 0049   Lcd_Cmd(0x02);
000110 e0a2      	LDI  R26,LOW(2)
000111 dfc7      	RCALL _Lcd_Cmd
                 ; 0001 004A   Lcd_Cmd(0x02);
000112 e0a2      	LDI  R26,LOW(2)
000113 dfc5      	RCALL _Lcd_Cmd
                 ; 0001 004B   Lcd_Cmd(0x08);
000114 e0a8      	LDI  R26,LOW(8)
000115 dfc3      	RCALL _Lcd_Cmd
                 ; 0001 004C   Lcd_Cmd(0x00);
000116 e0a0      	LDI  R26,LOW(0)
000117 dfc1      	RCALL _Lcd_Cmd
                 ; 0001 004D   Lcd_Cmd(0x0C);
000118 e0ac      	LDI  R26,LOW(12)
000119 dfbf      	RCALL _Lcd_Cmd
                 ; 0001 004E   Lcd_Cmd(0x00);
00011a e0a0      	LDI  R26,LOW(0)
00011b dfbd      	RCALL _Lcd_Cmd
                 ; 0001 004F   Lcd_Cmd(0x06);
00011c e0a6      	LDI  R26,LOW(6)
00011d dfbb      	RCALL _Lcd_Cmd
                 ; 0001 0050 }
00011e 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Write_Char(char a)
                 ; 0001 0053 {
                 _Lcd_Write_Char:
                 ; .FSTART _Lcd_Write_Char
                 ; 0001 0054    char temp,y;
                 ; 0001 0055    temp = a&0x0F;
00011f 93aa      	ST   -Y,R26
000120 931a      	ST   -Y,R17
000121 930a      	ST   -Y,R16
                 ;	a -> Y+2
                 ;	temp -> R17
                 ;	y -> R16
000122 81ea      	LDD  R30,Y+2
000123 70ef      	ANDI R30,LOW(0xF)
000124 2f1e      	MOV  R17,R30
                 ; 0001 0056    y = a&0xF0;
000125 81ea      	LDD  R30,Y+2
000126 7fe0      	ANDI R30,LOW(0xF0)
000127 2f0e      	MOV  R16,R30
                 ; 0001 0057    RS = 1;             // => RS = 1
000128 9ac0      	SBI  0x18,0
                 ; 0001 0058    Lcd_Port(y>>4);             //Data transfer
000129 e0f0      	LDI  R31,0
00012a 940e 0266 	CALL __ASRW4
00012c 2fae      	MOV  R26,R30
00012d d03d      	RCALL SUBOPT_0x4
                 ; 0001 0059    EN = 1;
                 ; 0001 005A    delay_us(40);
                 ; 0001 005B    EN = 0;
                 ; 0001 005C    Lcd_Port(temp);
00012e 2fa1      	MOV  R26,R17
00012f d03b      	RCALL SUBOPT_0x4
                 ; 0001 005D    EN = 1;
                 ; 0001 005E    delay_us(40);
                 ; 0001 005F    EN = 0;
                 ; 0001 0060 }
000130 8119      	LDD  R17,Y+1
000131 8108      	LDD  R16,Y+0
000132 9623      	ADIW R28,3
000133 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Write_String(char *a)
                 ; 0001 0063 {
                 _Lcd_Write_String:
                 ; .FSTART _Lcd_Write_String
                 ; 0001 0064 	int i;
                 ; 0001 0065 	for(i=0;a[i]!='\0';i++)
000134 93ba      	ST   -Y,R27
000135 93aa      	ST   -Y,R26
000136 931a      	ST   -Y,R17
000137 930a      	ST   -Y,R16
                 ;	*a -> Y+2
                 ;	i -> R16,R17
                +
000138 e000     +LDI R16 , LOW ( 0 )
000139 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2002F:
00013a 01f8      	MOVW R30,R16
00013b 81aa      	LDD  R26,Y+2
00013c 81bb      	LDD  R27,Y+2+1
00013d 0fae      	ADD  R26,R30
00013e 1fbf      	ADC  R27,R31
00013f 91ec      	LD   R30,X
000140 30e0      	CPI  R30,0
000141 f051      	BREQ _0x20030
                 ; 0001 0066 	   Lcd_Write_Char(a[i]);
000142 01f8      	MOVW R30,R16
000143 81aa      	LDD  R26,Y+2
000144 81bb      	LDD  R27,Y+2+1
000145 0fae      	ADD  R26,R30
000146 1fbf      	ADC  R27,R31
000147 91ac      	LD   R26,X
000148 dfd6      	RCALL _Lcd_Write_Char
                +
000149 5f0f     +SUBI R16 , LOW ( - 1 )
00014a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00014b cfee      	RJMP _0x2002F
                 _0x20030:
                 ; 0001 0067 }
00014c 8119      	LDD  R17,Y+1
00014d 8108      	LDD  R16,Y+0
00014e 9624      	ADIW R28,4
00014f 9508      	RET
                 ; .FEND
                 ;
                 ;void Lcd_Shift_Right()
                 ; 0001 006A {
                 ; 0001 006B 	Lcd_Cmd(0x01);
                 ; 0001 006C 	Lcd_Cmd(0x0C);
                 ; 0001 006D }
                 ;
                 ;void Lcd_Shift_Left()
                 ; 0001 0070 {
                 ; 0001 0071 	Lcd_Cmd(0x01);
                 ; 0001 0072 	Lcd_Cmd(0x08);
                 ; 0001 0073 }
                 ;
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
000150 940e 0274 	CALL __DIVW21U
000152 5de0      	SUBI R30,-LOW(48)
000153 2fae      	MOV  R26,R30
000154 dfca      	RCALL _Lcd_Write_Char
000155 01d8      	MOVW R26,R16
000156 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000157 e6e4      	LDI  R30,LOW(100)
000158 e0f0      	LDI  R31,HIGH(100)
000159 940e 0287 	CALL __MODW21U
00015b 01df      	MOVW R26,R30
00015c e0ea      	LDI  R30,LOW(10)
00015d e0f0      	LDI  R31,HIGH(10)
00015e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00015f e0ea      	LDI  R30,LOW(10)
000160 e0f0      	LDI  R31,HIGH(10)
000161 940e 0287 	CALL __MODW21U
000163 5de0      	SUBI R30,-LOW(48)
000164 2fae      	MOV  R26,R30
000165 cfb9      	RJMP _Lcd_Write_Char
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000166 e0b0      	LDI  R27,0
000167 940e 0172 	CALL _delay_ms
000169 e0a3      	LDI  R26,LOW(3)
00016a cf6e      	RJMP _Lcd_Cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
00016b df53      	RCALL _Lcd_Port
00016c 9ac1      	SBI  0x18,1
                +
00016d e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
00016e 958a     +DEC R24
00016f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
000170 98c1      	CBI  0x18,1
000171 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000172 9610      	adiw r26,0
000173 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000174 ed80     +LDI R24 , LOW ( 0x7D0 )
000175 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000176 9701     +SBIW R24 , 1
000177 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000178 95a8      	wdr
000179 9711      	sbiw r26,1
00017a f7c9      	brne __delay_ms0
                 __delay_ms1:
00017b 9508      	ret
                 
                 __ROUND_REPACK:
00017c 2355      	TST  R21
00017d f442      	BRPL __REPACK
00017e 3850      	CPI  R21,0x80
00017f f411      	BRNE __ROUND_REPACK0
000180 ffe0      	SBRS R30,0
000181 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000182 9631      	ADIW R30,1
000183 1f69      	ADC  R22,R25
000184 1f79      	ADC  R23,R25
000185 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000186 e850      	LDI  R21,0x80
000187 2757      	EOR  R21,R23
000188 f411      	BRNE __REPACK0
000189 935f      	PUSH R21
00018a c073      	RJMP __ZERORES
                 __REPACK0:
00018b 3f5f      	CPI  R21,0xFF
00018c f031      	BREQ __REPACK1
00018d 0f66      	LSL  R22
00018e 0c00      	LSL  R0
00018f 9557      	ROR  R21
000190 9567      	ROR  R22
000191 2f75      	MOV  R23,R21
000192 9508      	RET
                 __REPACK1:
000193 935f      	PUSH R21
000194 2000      	TST  R0
000195 f00a      	BRMI __REPACK2
000196 c073      	RJMP __MAXRES
                 __REPACK2:
000197 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000198 e850      	LDI  R21,0x80
000199 2e19      	MOV  R1,R25
00019a 2215      	AND  R1,R21
00019b 0f88      	LSL  R24
00019c 1f99      	ROL  R25
00019d 2795      	EOR  R25,R21
00019e 0f55      	LSL  R21
00019f 9587      	ROR  R24
                 
                 __UNPACK1:
0001a0 e850      	LDI  R21,0x80
0001a1 2e07      	MOV  R0,R23
0001a2 2205      	AND  R0,R21
0001a3 0f66      	LSL  R22
0001a4 1f77      	ROL  R23
0001a5 2775      	EOR  R23,R21
0001a6 0f55      	LSL  R21
0001a7 9567      	ROR  R22
0001a8 9508      	RET
                 
                 __CFD1U:
0001a9 9468      	SET
0001aa c001      	RJMP __CFD1U0
                 __CFD1:
0001ab 94e8      	CLT
                 __CFD1U0:
0001ac 935f      	PUSH R21
0001ad dff2      	RCALL __UNPACK1
0001ae 3870      	CPI  R23,0x80
0001af f018      	BRLO __CFD10
0001b0 3f7f      	CPI  R23,0xFF
0001b1 f408      	BRCC __CFD10
0001b2 c04b      	RJMP __ZERORES
                 __CFD10:
0001b3 e156      	LDI  R21,22
0001b4 1b57      	SUB  R21,R23
0001b5 f4aa      	BRPL __CFD11
0001b6 9551      	NEG  R21
0001b7 3058      	CPI  R21,8
0001b8 f40e      	BRTC __CFD19
0001b9 3059      	CPI  R21,9
                 __CFD19:
0001ba f030      	BRLO __CFD17
0001bb efef      	SER  R30
0001bc efff      	SER  R31
0001bd ef6f      	SER  R22
0001be e77f      	LDI  R23,0x7F
0001bf f977      	BLD  R23,7
0001c0 c01a      	RJMP __CFD15
                 __CFD17:
0001c1 2777      	CLR  R23
0001c2 2355      	TST  R21
0001c3 f0b9      	BREQ __CFD15
                 __CFD18:
0001c4 0fee      	LSL  R30
0001c5 1fff      	ROL  R31
0001c6 1f66      	ROL  R22
0001c7 1f77      	ROL  R23
0001c8 955a      	DEC  R21
0001c9 f7d1      	BRNE __CFD18
0001ca c010      	RJMP __CFD15
                 __CFD11:
0001cb 2777      	CLR  R23
                 __CFD12:
0001cc 3058      	CPI  R21,8
0001cd f028      	BRLO __CFD13
0001ce 2fef      	MOV  R30,R31
0001cf 2ff6      	MOV  R31,R22
0001d0 2f67      	MOV  R22,R23
0001d1 5058      	SUBI R21,8
0001d2 cff9      	RJMP __CFD12
                 __CFD13:
0001d3 2355      	TST  R21
0001d4 f031      	BREQ __CFD15
                 __CFD14:
0001d5 9576      	LSR  R23
0001d6 9567      	ROR  R22
0001d7 95f7      	ROR  R31
0001d8 95e7      	ROR  R30
0001d9 955a      	DEC  R21
0001da f7d1      	BRNE __CFD14
                 __CFD15:
0001db 2000      	TST  R0
0001dc f40a      	BRPL __CFD16
0001dd d080      	RCALL __ANEGD1
                 __CFD16:
0001de 915f      	POP  R21
0001df 9508      	RET
                 
                 __CDF1U:
0001e0 9468      	SET
0001e1 c001      	RJMP __CDF1U0
                 __CDF1:
0001e2 94e8      	CLT
                 __CDF1U0:
0001e3 9730      	SBIW R30,0
0001e4 4060      	SBCI R22,0
0001e5 4070      	SBCI R23,0
0001e6 f0b1      	BREQ __CDF10
0001e7 2400      	CLR  R0
0001e8 f026      	BRTS __CDF11
0001e9 2377      	TST  R23
0001ea f412      	BRPL __CDF11
0001eb 9400      	COM  R0
0001ec d071      	RCALL __ANEGD1
                 __CDF11:
0001ed 2e17      	MOV  R1,R23
0001ee e17e      	LDI  R23,30
0001ef 2011      	TST  R1
                 __CDF12:
0001f0 f032      	BRMI __CDF13
0001f1 957a      	DEC  R23
0001f2 0fee      	LSL  R30
0001f3 1fff      	ROL  R31
0001f4 1f66      	ROL  R22
0001f5 1c11      	ROL  R1
0001f6 cff9      	RJMP __CDF12
                 __CDF13:
0001f7 2fef      	MOV  R30,R31
0001f8 2ff6      	MOV  R31,R22
0001f9 2d61      	MOV  R22,R1
0001fa 935f      	PUSH R21
0001fb df8a      	RCALL __REPACK
0001fc 915f      	POP  R21
                 __CDF10:
0001fd 9508      	RET
                 
                 __ZERORES:
0001fe 27ee      	CLR  R30
0001ff 27ff      	CLR  R31
000200 2766      	CLR  R22
000201 2777      	CLR  R23
000202 915f      	POP  R21
000203 9508      	RET
                 
                 __MINRES:
000204 efef      	SER  R30
000205 efff      	SER  R31
000206 e76f      	LDI  R22,0x7F
000207 ef7f      	SER  R23
000208 915f      	POP  R21
000209 9508      	RET
                 
                 __MAXRES:
00020a efef      	SER  R30
00020b efff      	SER  R31
00020c e76f      	LDI  R22,0x7F
00020d e77f      	LDI  R23,0x7F
00020e 915f      	POP  R21
00020f 9508      	RET
                 
                 __MULF12:
000210 935f      	PUSH R21
000211 df86      	RCALL __UNPACK
000212 3870      	CPI  R23,0x80
000213 f351      	BREQ __ZERORES
000214 3890      	CPI  R25,0x80
000215 f341      	BREQ __ZERORES
000216 2401      	EOR  R0,R1
000217 9408      	SEC
000218 1f79      	ADC  R23,R25
000219 f423      	BRVC __MULF124
00021a f31c      	BRLT __ZERORES
                 __MULF125:
00021b 2000      	TST  R0
00021c f33a      	BRMI __MINRES
00021d cfec      	RJMP __MAXRES
                 __MULF124:
00021e 920f      	PUSH R0
00021f 931f      	PUSH R17
000220 932f      	PUSH R18
000221 933f      	PUSH R19
000222 934f      	PUSH R20
000223 2711      	CLR  R17
000224 2722      	CLR  R18
000225 2799      	CLR  R25
000226 9f68      	MUL  R22,R24
000227 01a0      	MOVW R20,R0
000228 9f8f      	MUL  R24,R31
000229 2d30      	MOV  R19,R0
00022a 0d41      	ADD  R20,R1
00022b 1f59      	ADC  R21,R25
00022c 9f6b      	MUL  R22,R27
00022d 0d30      	ADD  R19,R0
00022e 1d41      	ADC  R20,R1
00022f 1f59      	ADC  R21,R25
000230 9f8e      	MUL  R24,R30
000231 d027      	RCALL __MULF126
000232 9fbf      	MUL  R27,R31
000233 d025      	RCALL __MULF126
000234 9f6a      	MUL  R22,R26
000235 d023      	RCALL __MULF126
000236 9fbe      	MUL  R27,R30
000237 d01d      	RCALL __MULF127
000238 9faf      	MUL  R26,R31
000239 d01b      	RCALL __MULF127
00023a 9fae      	MUL  R26,R30
00023b 0d11      	ADD  R17,R1
00023c 1f29      	ADC  R18,R25
00023d 1f39      	ADC  R19,R25
00023e 1f49      	ADC  R20,R25
00023f 1f59      	ADC  R21,R25
000240 2fe3      	MOV  R30,R19
000241 2ff4      	MOV  R31,R20
000242 2f65      	MOV  R22,R21
000243 2f52      	MOV  R21,R18
000244 914f      	POP  R20
000245 913f      	POP  R19
000246 912f      	POP  R18
000247 911f      	POP  R17
000248 900f      	POP  R0
000249 2366      	TST  R22
00024a f02a      	BRMI __MULF122
00024b 0f55      	LSL  R21
00024c 1fee      	ROL  R30
00024d 1fff      	ROL  R31
00024e 1f66      	ROL  R22
00024f c002      	RJMP __MULF123
                 __MULF122:
000250 9573      	INC  R23
000251 f24b      	BRVS __MULF125
                 __MULF123:
000252 df29      	RCALL __ROUND_REPACK
000253 915f      	POP  R21
000254 9508      	RET
                 
                 __MULF127:
000255 0d10      	ADD  R17,R0
000256 1d21      	ADC  R18,R1
000257 1f39      	ADC  R19,R25
000258 c002      	RJMP __MULF128
                 __MULF126:
000259 0d20      	ADD  R18,R0
00025a 1d31      	ADC  R19,R1
                 __MULF128:
00025b 1f49      	ADC  R20,R25
00025c 1f59      	ADC  R21,R25
00025d 9508      	RET
                 
                 __ANEGD1:
00025e 95f0      	COM  R31
00025f 9560      	COM  R22
000260 9570      	COM  R23
000261 95e1      	NEG  R30
000262 4fff      	SBCI R31,-1
000263 4f6f      	SBCI R22,-1
000264 4f7f      	SBCI R23,-1
000265 9508      	RET
                 
                 __ASRW4:
000266 95f5      	ASR  R31
000267 95e7      	ROR  R30
                 __ASRW3:
000268 95f5      	ASR  R31
000269 95e7      	ROR  R30
                 __ASRW2:
00026a 95f5      	ASR  R31
00026b 95e7      	ROR  R30
00026c 95f5      	ASR  R31
00026d 95e7      	ROR  R30
00026e 9508      	RET
                 
                 __CWD1:
00026f 2f6f      	MOV  R22,R31
000270 0f66      	ADD  R22,R22
000271 0b66      	SBC  R22,R22
000272 2f76      	MOV  R23,R22
000273 9508      	RET
                 
                 __DIVW21U:
000274 2400      	CLR  R0
000275 2411      	CLR  R1
000276 e190      	LDI  R25,16
                 __DIVW21U1:
000277 0faa      	LSL  R26
000278 1fbb      	ROL  R27
000279 1c00      	ROL  R0
00027a 1c11      	ROL  R1
00027b 1a0e      	SUB  R0,R30
00027c 0a1f      	SBC  R1,R31
00027d f418      	BRCC __DIVW21U2
00027e 0e0e      	ADD  R0,R30
00027f 1e1f      	ADC  R1,R31
000280 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000281 60a1      	SBR  R26,1
                 __DIVW21U3:
000282 959a      	DEC  R25
000283 f799      	BRNE __DIVW21U1
000284 01fd      	MOVW R30,R26
000285 01d0      	MOVW R26,R0
000286 9508      	RET
                 
                 __MODW21U:
000287 dfec      	RCALL __DIVW21U
000288 01fd      	MOVW R30,R26
000289 9508      	RET
                 
                 __SAVELOCR4:
00028a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00028b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00028c 931a      	ST   -Y,R17
00028d 930a      	ST   -Y,R16
00028e 9508      	RET
                 
                 __LOADLOCR4:
00028f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000290 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000291 8119      	LDD  R17,Y+1
000292 8108      	LD   R16,Y
000293 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  25 r1 :  17 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  16 r17:  17 r18:  12 r19:  12 r20:   8 r21:  44 r22:  34 r23:  31 
r24:  19 r25:  23 r26:  64 r27:  16 r28:   5 r29:   1 r30: 100 r31:  43 
x  :   5 y  :  42 z  :   7 
Registers used: 21 out of 35 (60.0%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   9 
adiw  :   6 and   :   2 andi  :   7 asr   :   4 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   1 brmi  :   4 brne  :  14 brpl  :   4 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   0 call  :  14 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  16 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   0 cpc   :   0 cpi   :  12 cpse  :   0 dec   :   7 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   1 jmp   :  22 ld    :   9 ldd   :  17 ldi   :  74 
lds   :   0 lpm   :   7 lsl   :  10 lsr   :   1 mov   :  30 movw  :  17 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   1 out   :   8 pop   :  11 push  :  10 rcall :  47 ret   :  26 
reti  :   0 rjmp  :  28 rol   :  14 ror   :  11 sbc   :   2 sbci  :   8 
sbi   :  16 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   0 
sbrs  :   1 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  21 std   :   0 sts   :   0 sub   :   2 subi  :   7 swap  :   0 
tst   :   9 wdr   :   1 
Instructions used: 64 out of 116 (55.2%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000528   1284     36   1320   16384   8.1%
[.dseg] 0x000060 0x000175      0     21     21    1024   2.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
