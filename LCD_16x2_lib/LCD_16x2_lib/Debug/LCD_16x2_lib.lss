
LCD_16x2_lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000224  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c87  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ea  00000000  00000000  0000100b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d3  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b4  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d5  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "main.h"
#include "My_LCD.h"

int main(void)
{
	Lcd_Init();
  82:	0e 94 7b 00 	call	0xf6	; 0xf6 <Lcd_Init>
	Lcd_Set_Cursor(1,1);
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Lcd_Set_Cursor>
	Lcd_Write_String("PHUOC");
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Lcd_Write_String>
	Lcd_Set_Cursor(2,1);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Lcd_Set_Cursor>
	Lcd_Write_String("PHUOC");
  9e:	80 e6       	ldi	r24, 0x60	; 96
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Lcd_Write_String>
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main+0x24>

000000a8 <Lcd_Port>:
#include "main.h"
#include "My_LCD.h"

void Lcd_Port(char a)
{
	(a&1)? sbi(PORT_Data, D4) : cbi(PORT_Data, D4);
  a8:	80 ff       	sbrs	r24, 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <Lcd_Port+0x8>
  ac:	c2 9a       	sbi	0x18, 2	; 24
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <Lcd_Port+0xa>
  b0:	c2 98       	cbi	0x18, 2	; 24
	(a&2)? sbi(PORT_Data, D5) : cbi(PORT_Data, D5);
  b2:	81 ff       	sbrs	r24, 1
  b4:	02 c0       	rjmp	.+4      	; 0xba <Lcd_Port+0x12>
  b6:	c3 9a       	sbi	0x18, 3	; 24
  b8:	01 c0       	rjmp	.+2      	; 0xbc <Lcd_Port+0x14>
  ba:	c3 98       	cbi	0x18, 3	; 24
	(a&4)? sbi(PORT_Data, D6) : cbi(PORT_Data, D6);
  bc:	82 ff       	sbrs	r24, 2
  be:	02 c0       	rjmp	.+4      	; 0xc4 <Lcd_Port+0x1c>
  c0:	c4 9a       	sbi	0x18, 4	; 24
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <Lcd_Port+0x1e>
  c4:	c4 98       	cbi	0x18, 4	; 24
	(a&8)? sbi(PORT_Data, D7) : cbi(PORT_Data, D7);
  c6:	83 ff       	sbrs	r24, 3
  c8:	02 c0       	rjmp	.+4      	; 0xce <Lcd_Port+0x26>
  ca:	c5 9a       	sbi	0x18, 5	; 24
  cc:	08 95       	ret
  ce:	c5 98       	cbi	0x18, 5	; 24
  d0:	08 95       	ret

000000d2 <Lcd_cmd>:
}
void Lcd_cmd(char a)
{
	cbi(PORT_RS, RS);
  d2:	c0 98       	cbi	0x18, 0	; 24
	Lcd_Port(a);
  d4:	0e 94 54 00 	call	0xa8	; 0xa8 <Lcd_Port>
	sbi(PORT_EN, EN);
  d8:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e1       	ldi	r24, 0x1F	; 31
  dc:	9e e4       	ldi	r25, 0x4E	; 78
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <Lcd_cmd+0xc>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <Lcd_cmd+0x12>
  e4:	00 00       	nop
	_delay_ms(5);
	cbi(PORT_EN, EN);
  e6:	c1 98       	cbi	0x18, 1	; 24
  e8:	8f e9       	ldi	r24, 0x9F	; 159
  ea:	9f e0       	ldi	r25, 0x0F	; 15
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <Lcd_cmd+0x1a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <Lcd_cmd+0x20>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <Lcd_Init>:
	_delay_ms(1);
}
void Lcd_Init()
{
	/*------PIN------*/
	sbi(DDR_RS, RS);
  f6:	b8 9a       	sbi	0x17, 0	; 23
	sbi(DDR_EN, EN);
  f8:	b9 9a       	sbi	0x17, 1	; 23
	sbi(DDR_Data, D7);
  fa:	bd 9a       	sbi	0x17, 5	; 23
	sbi(DDR_Data, D6);
  fc:	bc 9a       	sbi	0x17, 4	; 23
	sbi(DDR_Data, D5);
  fe:	bb 9a       	sbi	0x17, 3	; 23
	sbi(DDR_Data, D4);
 100:	ba 9a       	sbi	0x17, 2	; 23
	/*------------*/
	Lcd_Port(0x00);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 54 00 	call	0xa8	; 0xa8 <Lcd_Port>
 108:	8f e5       	ldi	r24, 0x5F	; 95
 10a:	9a ee       	ldi	r25, 0xEA	; 234
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <Lcd_Init+0x16>
 110:	00 c0       	rjmp	.+0      	; 0x112 <Lcd_Init+0x1c>
 112:	00 00       	nop
	_delay_ms(15);
	/*------------*/
	Lcd_cmd(0x03);
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
 11a:	8f e1       	ldi	r24, 0x1F	; 31
 11c:	9e e4       	ldi	r25, 0x4E	; 78
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <Lcd_Init+0x28>
 122:	00 c0       	rjmp	.+0      	; 0x124 <Lcd_Init+0x2e>
 124:	00 00       	nop
	_delay_ms(5);
	Lcd_cmd(0x03);
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
 12c:	8f ed       	ldi	r24, 0xDF	; 223
 12e:	9b ea       	ldi	r25, 0xAB	; 171
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <Lcd_Init+0x3a>
 134:	00 c0       	rjmp	.+0      	; 0x136 <Lcd_Init+0x40>
 136:	00 00       	nop
	_delay_ms(11); /*--- ? ---*/
	Lcd_cmd(0x03);
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
	/*---------*/
	Lcd_cmd(0x02);
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
	Lcd_cmd(0x02);
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
	Lcd_cmd(0x08);
 14a:	88 e0       	ldi	r24, 0x08	; 8
 14c:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
	Lcd_cmd(0x00);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
	Lcd_cmd(0x08);
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
	Lcd_cmd(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
	Lcd_cmd(0x0C);
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
	Lcd_cmd(0x00);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
	Lcd_cmd(0x06);
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
 174:	08 95       	ret

00000176 <Lcd_Write_Char>:
}
void Lcd_Write_Char(char a)
{
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
	
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	sbi(PORT_RS,RS);             // => RS = 1
 17a:	c0 9a       	sbi	0x18, 0	; 24
	Lcd_Port(y>>4);             //Data transfer
 17c:	82 95       	swap	r24
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	0e 94 54 00 	call	0xa8	; 0xa8 <Lcd_Port>
	sbi(PORT_EN, EN);
 184:	c1 9a       	sbi	0x18, 1	; 24
 186:	8f e9       	ldi	r24, 0x9F	; 159
 188:	9f e0       	ldi	r25, 0x0F	; 15
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <Lcd_Write_Char+0x14>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <Lcd_Write_Char+0x1a>
 190:	00 00       	nop
	_delay_ms(1);
	cbi(PORT_EN, EN);
 192:	c1 98       	cbi	0x18, 1	; 24
 194:	8f e9       	ldi	r24, 0x9F	; 159
 196:	9f e0       	ldi	r25, 0x0F	; 15
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <Lcd_Write_Char+0x22>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <Lcd_Write_Char+0x28>
 19e:	00 00       	nop
	_delay_ms(1);
	Lcd_Port(temp);
 1a0:	8c 2f       	mov	r24, r28
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	0e 94 54 00 	call	0xa8	; 0xa8 <Lcd_Port>
	sbi(PORT_EN, EN);
 1a8:	c1 9a       	sbi	0x18, 1	; 24
 1aa:	8f e9       	ldi	r24, 0x9F	; 159
 1ac:	9f e0       	ldi	r25, 0x0F	; 15
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <Lcd_Write_Char+0x38>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <Lcd_Write_Char+0x3e>
 1b4:	00 00       	nop
	_delay_ms(1);
	cbi(PORT_EN, EN);
 1b6:	c1 98       	cbi	0x18, 1	; 24
 1b8:	8f e9       	ldi	r24, 0x9F	; 159
 1ba:	9f e0       	ldi	r25, 0x0F	; 15
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <Lcd_Write_Char+0x46>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <Lcd_Write_Char+0x4c>
 1c2:	00 00       	nop
	_delay_ms(1);
}
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <Lcd_Write_String>:
void Lcd_Write_String(char *a)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
	for(int i=0;a[i] != '\0';i++)
 1ce:	88 81       	ld	r24, Y
 1d0:	88 23       	and	r24, r24
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <Lcd_Write_String+0x18>
 1d4:	21 96       	adiw	r28, 0x01	; 1
	Lcd_Write_Char(a[i]);
 1d6:	0e 94 bb 00 	call	0x176	; 0x176 <Lcd_Write_Char>
	cbi(PORT_EN, EN);
	_delay_ms(1);
}
void Lcd_Write_String(char *a)
{
	for(int i=0;a[i] != '\0';i++)
 1da:	89 91       	ld	r24, Y+
 1dc:	81 11       	cpse	r24, r1
 1de:	fb cf       	rjmp	.-10     	; 0x1d6 <Lcd_Write_String+0xe>
	Lcd_Write_Char(a[i]);
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <Lcd_Set_Cursor>:
void Lcd_Set_Cursor(char a, char b)
{
 1e6:	cf 93       	push	r28
 1e8:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	59 f4       	brne	.+22     	; 0x204 <Lcd_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd_cmd(z);
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	86 0f       	add	r24, r22
 1f2:	82 95       	swap	r24
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
		Lcd_cmd(y);
 1fa:	8c 2f       	mov	r24, r28
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
 202:	0c c0       	rjmp	.+24     	; 0x21c <Lcd_Set_Cursor+0x36>
	}
	else if(a == 2)
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	51 f4       	brne	.+20     	; 0x21c <Lcd_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd_cmd(z);
 208:	80 ec       	ldi	r24, 0xC0	; 192
 20a:	86 0f       	add	r24, r22
 20c:	82 95       	swap	r24
 20e:	8f 70       	andi	r24, 0x0F	; 15
 210:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
		Lcd_cmd(y);
 214:	8c 2f       	mov	r24, r28
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	0e 94 69 00 	call	0xd2	; 0xd2 <Lcd_cmd>
	}
}
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
