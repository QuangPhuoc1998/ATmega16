
AVRASM ver. 2.1.30  E:\AVR\ATmega16\Captute\code_Capture\Debug\List\Capture.asm Mon Apr 22 11:48:56 2019

E:\AVR\ATmega16\Captute\code_Capture\Debug\List\Capture.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\AVR\ATmega16\Captute\code_Capture\Debug\List\Capture.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\AVR\ATmega16\Captute\code_Capture\Debug\List\Capture.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0037 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 00b5 	JMP  _tim1_capt_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0094 	JMP  _tim1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 6947
00002b 2061
00002c 7274
00002d 3a69      	.DB  0x47,0x69,0x61,0x20,0x74,0x72,0x69,0x3A
00002e 0020      	.DB  0x20,0x0
                 _0x2000003:
00002f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000030 000a      	.DW  0x0A
000031 0160      	.DW  _0x3
000032 0054      	.DW  _0x0*2
                 
000033 0002      	.DW  0x02
000034 0172      	.DW  __base_y_G100
000035 005e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000036 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000037 94f8      	CLI
000038 27ee      	CLR  R30
000039 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003a e0f1      	LDI  R31,1
00003b bffb      	OUT  GICR,R31
00003c bfeb      	OUT  GICR,R30
00003d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003e e08d      	LDI  R24,(14-2)+1
00003f e0a2      	LDI  R26,2
000040 27bb      	CLR  R27
                 __CLEAR_REG:
000041 93ed      	ST   X+,R30
000042 958a      	DEC  R24
000043 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000044 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000045 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000046 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000047 93ed      	ST   X+,R30
000048 9701      	SBIW R24,1
000049 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004a e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004c 9185      	LPM  R24,Z+
00004d 9195      	LPM  R25,Z+
00004e 9700      	SBIW R24,0
00004f f061      	BREQ __GLOBAL_INI_END
000050 91a5      	LPM  R26,Z+
000051 91b5      	LPM  R27,Z+
000052 9005      	LPM  R0,Z+
000053 9015      	LPM  R1,Z+
000054 01bf      	MOVW R22,R30
000055 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000056 9005      	LPM  R0,Z+
000057 920d      	ST   X+,R0
000058 9701      	SBIW R24,1
000059 f7e1      	BRNE __GLOBAL_INI_LOOP
00005a 01fb      	MOVW R30,R22
00005b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005d bfed      	OUT  SPL,R30
00005e e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000060 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000061 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000062 940c 0064 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * Capture.c
                 ; *
                 ; * Created: 18/04/2019 20:31:49
                 ; * Author: ADMIN
                 ; */
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <lcd.h>
                 ;
                 ;unsigned long int over_step, period;
                 ;void Capture_Init();
                 ;void main(void)
                 ; 0000 000F {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0010 // bien
                 ; 0000 0011 
                 ; 0000 0012 //--------
                 ; 0000 0013 
                 ; 0000 0014 // cau hinh port
                 ; 0000 0015 #asm
                 ; 0000 0016 .equ __lcd_port = 0x15;
                 .equ __lcd_port = 0x15;
                 ; 0000 0017 #endasm
                 ; 0000 0018 // chuong trinh con
                 ; 0000 0019 Capture_Init();
000064 d021      	RCALL _Capture_Init
                 ; 0000 001A lcd_init(16);
000065 e1a0      	LDI  R26,LOW(16)
000066 940e 0195 	CALL _lcd_init
                 ; 0000 001B #asm ("sei");
000068 9478      	sei
                 ; 0000 001C // begin
                 ; 0000 001D lcd_puts("Gia tri: ");
                +
000069 e6a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
00006a e0b1     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
00006b 940e 0173 	CALL _lcd_puts
                 ; 0000 001E while (1)
                 _0x4:
                 ; 0000 001F     {
                 ; 0000 0020       lcd_gotoxy(9, 0);
00006d e0e9      	LDI  R30,LOW(9)
00006e 93ea      	ST   -Y,R30
00006f e0a0      	LDI  R26,LOW(0)
000070 940e 0136 	CALL _lcd_gotoxy
                 ; 0000 0021       lcd_putchar(period/100000+48);
000072 91a0 016e 	LDS  R26,_period
000074 91b0 016f 	LDS  R27,_period+1
000076 9180 0170 	LDS  R24,_period+2
000078 9190 0171 	LDS  R25,_period+3
                +
00007a eae0     +LDI R30 , LOW ( 0x186A0 )
00007b e8f6     +LDI R31 , HIGH ( 0x186A0 )
00007c e061     +LDI R22 , BYTE3 ( 0x186A0 )
00007d e070     +LDI R23 , BYTE4 ( 0x186A0 )
                 	__GETD1N 0x186A0
00007e 940e 0201 	CALL __DIVD21U
000080 5de0      	SUBI R30,-LOW(48)
000081 2fae      	MOV  R26,R30
000082 940e 0159 	CALL _lcd_putchar
                 ; 0000 0022     }
000084 cfe8      	RJMP _0x4
                 ; 0000 0023 }
                 _0x7:
000085 cfff      	RJMP _0x7
                 ; .FEND
                 
                 	.DSEG
                 _0x3:
000160           	.BYTE 0xA
                 ;void Capture_Init()
                 ; 0000 0025 {
                 
                 	.CSEG
                 _Capture_Init:
                 ; .FSTART _Capture_Init
                 ; 0000 0026   DDRD.6 = 0;
000086 988e      	CBI  0x11,6
                 ; 0000 0027   PORTD.6 = 0;
000087 9896      	CBI  0x12,6
                 ; 0000 0028   TCNT1 = 0;
000088 e0e0      	LDI  R30,LOW(0)
000089 e0f0      	LDI  R31,HIGH(0)
00008a bdfd      	OUT  0x2C+1,R31
00008b bdec      	OUT  0x2C,R30
                 ; 0000 0029   TCCR1A = 0x00;
00008c bdef      	OUT  0x2F,R30
                 ; 0000 002A   TCCR1B |= (1<<ICES1)|(1<<CS10); // canh xuong, chia 1
00008d b5ee      	IN   R30,0x2E
00008e 64e1      	ORI  R30,LOW(0x41)
00008f bdee      	OUT  0x2E,R30
                 ; 0000 002B   TIMSK |= (1<<TICIE1)|(1<<TOIE1);
000090 b7e9      	IN   R30,0x39
000091 62e4      	ORI  R30,LOW(0x24)
000092 bfe9      	OUT  0x39,R30
                 ; 0000 002C }
000093 9508      	RET
                 ; .FEND
                 ;interrupt [TIM1_OVF] void tim1_ovf_isr(void)
                 ; 0000 002E {
                 _tim1_ovf_isr:
                 ; .FSTART _tim1_ovf_isr
000094 936a      	ST   -Y,R22
000095 937a      	ST   -Y,R23
000096 93ea      	ST   -Y,R30
000097 93fa      	ST   -Y,R31
000098 b7ef      	IN   R30,SREG
000099 93ea      	ST   -Y,R30
                 ; 0000 002F   over_step += 0xFFFF;
00009a 91e0 016a 	LDS  R30,_over_step
00009c 91f0 016b 	LDS  R31,_over_step+1
00009e 9160 016c 	LDS  R22,_over_step+2
0000a0 9170 016d 	LDS  R23,_over_step+3
                +
0000a2 50e1     +SUBI R30 , LOW ( - 65535 )
0000a3 40f0     +SBCI R31 , HIGH ( - 65535 )
0000a4 4f6f     +SBCI R22 , BYTE3 ( - 65535 )
0000a5 4f7f     +SBCI R23 , BYTE4 ( - 65535 )
                 	__ADDD1N 65535
0000a6 93e0 016a 	STS  _over_step,R30
0000a8 93f0 016b 	STS  _over_step+1,R31
0000aa 9360 016c 	STS  _over_step+2,R22
0000ac 9370 016d 	STS  _over_step+3,R23
                 ; 0000 0030 }
0000ae 91e9      	LD   R30,Y+
0000af bfef      	OUT  SREG,R30
0000b0 91f9      	LD   R31,Y+
0000b1 91e9      	LD   R30,Y+
0000b2 9179      	LD   R23,Y+
0000b3 9169      	LD   R22,Y+
0000b4 9518      	RETI
                 ; .FEND
                 ;interrupt [TIM1_CAPT] void tim1_capt_isr(void)
                 ; 0000 0032 {
                 _tim1_capt_isr:
                 ; .FSTART _tim1_capt_isr
0000b5 920a      	ST   -Y,R0
0000b6 921a      	ST   -Y,R1
0000b7 936a      	ST   -Y,R22
0000b8 937a      	ST   -Y,R23
0000b9 938a      	ST   -Y,R24
0000ba 939a      	ST   -Y,R25
0000bb 93aa      	ST   -Y,R26
0000bc 93ba      	ST   -Y,R27
0000bd 93ea      	ST   -Y,R30
0000be 93fa      	ST   -Y,R31
0000bf b7ef      	IN   R30,SREG
0000c0 93ea      	ST   -Y,R30
                 ; 0000 0033   period = over_step + ((long int)ICR1H*256+ICR1L);
0000c1 b5e7      	IN   R30,0x27
0000c2 27ff      	CLR  R31
0000c3 2766      	CLR  R22
0000c4 2777      	CLR  R23
                +
0000c5 e0a0     +LDI R26 , LOW ( 0x100 )
0000c6 e0b1     +LDI R27 , HIGH ( 0x100 )
0000c7 e080     +LDI R24 , BYTE3 ( 0x100 )
0000c8 e090     +LDI R25 , BYTE4 ( 0x100 )
                 	__GETD2N 0x100
0000c9 940e 01fc 	CALL __MULD12
0000cb 01df      	MOVW R26,R30
0000cc 01cb      	MOVW R24,R22
0000cd b5e6      	IN   R30,0x26
0000ce e0f0      	LDI  R31,0
0000cf 940e 01d7 	CALL __CWD1
0000d1 940e 01ca 	CALL __ADDD12
0000d3 91a0 016a 	LDS  R26,_over_step
0000d5 91b0 016b 	LDS  R27,_over_step+1
0000d7 9180 016c 	LDS  R24,_over_step+2
0000d9 9190 016d 	LDS  R25,_over_step+3
0000db 940e 01ca 	CALL __ADDD12
0000dd 93e0 016e 	STS  _period,R30
0000df 93f0 016f 	STS  _period+1,R31
0000e1 9360 0170 	STS  _period+2,R22
0000e3 9370 0171 	STS  _period+3,R23
                 ; 0000 0034   TCNT1 = 0;
0000e5 e0e0      	LDI  R30,LOW(0)
0000e6 e0f0      	LDI  R31,HIGH(0)
0000e7 bdfd      	OUT  0x2C+1,R31
0000e8 bdec      	OUT  0x2C,R30
                 ; 0000 0035 }
0000e9 91e9      	LD   R30,Y+
0000ea bfef      	OUT  SREG,R30
0000eb 91f9      	LD   R31,Y+
0000ec 91e9      	LD   R30,Y+
0000ed 91b9      	LD   R27,Y+
0000ee 91a9      	LD   R26,Y+
0000ef 9199      	LD   R25,Y+
0000f0 9189      	LD   R24,Y+
0000f1 9179      	LD   R23,Y+
0000f2 9169      	LD   R22,Y+
0000f3 9019      	LD   R1,Y+
0000f4 9009      	LD   R0,Y+
0000f5 9518      	RETI
                 ; .FEND
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
0000f6 e0ff          ldi   r31,15
                 __lcd_delay0:
0000f7 95fa          dec   r31
0000f8 f7f1          brne  __lcd_delay0
0000f9 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
0000fa b3a4          in    r26,__lcd_direction
0000fb 70af          andi  r26,0xf                 ;set as input
0000fc bba4          out   __lcd_direction,r26
0000fd 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0000fe 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
0000ff dff6      	RCALL __lcd_delay_G100
000100 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000101 dff4      	RCALL __lcd_delay_G100
000102 b3a3          in    r26,__lcd_pin
000103 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000104 dff1      	RCALL __lcd_delay_G100
000105 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000106 dfef      	RCALL __lcd_delay_G100
000107 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000108 fda7          sbrc  r26,__lcd_busy_flag
000109 cff5          rjmp  __lcd_busy
00010a 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00010b 7fa0          andi  r26,0xf0
00010c 2bab          or    r26,r27
00010d bba5          out   __lcd_port,r26          ;write
00010e 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00010f 940e 00f6 	CALL __lcd_delay_G100
000111 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000112 940e 00f6 	CALL __lcd_delay_G100
000114 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000115 93aa      	ST   -Y,R26
000116 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000117 b3a4          in    r26,__lcd_direction
000118 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000119 bba4          out   __lcd_direction,r26
00011a b3b5          in    r27,__lcd_port
00011b 70bf          andi  r27,0xf
00011c 81a8          ld    r26,y
00011d dfed      	RCALL __lcd_write_nibble_G100
00011e 81a8          ld    r26,y
00011f 95a2          swap  r26
000120 dfea      	RCALL __lcd_write_nibble_G100
000121 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000122 940c 01c0 	JMP  _0x2020001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
000124 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000125 940e 00f6 	CALL __lcd_delay_G100
000127 b3e3          in    r30,__lcd_pin           ;read
000128 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000129 940e 00f6 	CALL __lcd_delay_G100
00012b 7fe0          andi  r30,0xf0
00012c 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
00012d 940e 00f6 	CALL __lcd_delay_G100
00012f dff4      	RCALL __lcd_read_nibble_G100
000130 2fae          mov   r26,r30
000131 dff2      	RCALL __lcd_read_nibble_G100
000132 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
000133 95e2          swap  r30
000134 2bea          or    r30,r26
000135 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000136 93aa      	ST   -Y,R26
000137 940e 00fa 	CALL __lcd_ready
000139 81e8      	LD   R30,Y
00013a e0f0      	LDI  R31,0
00013b 58ee      	SUBI R30,LOW(-__base_y_G100)
00013c 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00013d 81e0      	LD   R30,Z
00013e 81a9      	LDD  R26,Y+1
00013f 0fae      	ADD  R26,R30
000140 940e 0115 	CALL __lcd_write_data
000142 8059      	LDD  R5,Y+1
000143 8048      	LDD  R4,Y+0
000144 9622      	ADIW R28,2
000145 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000146 940e 00fa 	CALL __lcd_ready
000148 e0a2      	LDI  R26,LOW(2)
000149 940e 0115 	CALL __lcd_write_data
00014b 940e 00fa 	CALL __lcd_ready
00014d e0ac      	LDI  R26,LOW(12)
00014e 940e 0115 	CALL __lcd_write_data
000150 940e 00fa 	CALL __lcd_ready
000152 e0a1      	LDI  R26,LOW(1)
000153 940e 0115 	CALL __lcd_write_data
000155 e0e0      	LDI  R30,LOW(0)
000156 2e4e      	MOV  R4,R30
000157 2e5e      	MOV  R5,R30
000158 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000159 93aa      	ST   -Y,R26
00015a 93ef          push r30
00015b 93ff          push r31
00015c 81a8          ld   r26,y
00015d 9468          set
00015e 30aa          cpi  r26,10
00015f f019          breq __lcd_putchar1
000160 94e8          clt
000161 1457      	CP   R5,R7
000162 f030      	BRLO _0x2000004
                 	__lcd_putchar1:
000163 9443      	INC  R4
000164 e0e0      	LDI  R30,LOW(0)
000165 93ea      	ST   -Y,R30
000166 2da4      	MOV  R26,R4
000167 dfce      	RCALL _lcd_gotoxy
000168 f036      	brts __lcd_putchar0
                 _0x2000004:
000169 9453      	INC  R5
00016a df8f          rcall __lcd_ready
00016b 9aa8          sbi  __lcd_port,__lcd_rs ;RS=1
00016c 81a8      	LD   R26,Y
00016d 940e 0115 	CALL __lcd_write_data
                 __lcd_putchar0:
00016f 91ff          pop  r31
000170 91ef          pop  r30
000171 940c 01c0 	JMP  _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000173 93ba      	ST   -Y,R27
000174 93aa      	ST   -Y,R26
000175 931a      	ST   -Y,R17
                 _0x2000005:
000176 81a9      	LDD  R26,Y+1
000177 81ba      	LDD  R27,Y+1+1
000178 91ed      	LD   R30,X+
000179 83a9      	STD  Y+1,R26
00017a 83ba      	STD  Y+1+1,R27
00017b 2f1e      	MOV  R17,R30
00017c 30e0      	CPI  R30,0
00017d f019      	BREQ _0x2000007
00017e 2fa1      	MOV  R26,R17
00017f dfd9      	RCALL _lcd_putchar
000180 cff5      	RJMP _0x2000005
                 _0x2000007:
000181 8118      	LDD  R17,Y+0
000182 9623      	ADIW R28,3
000183 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
000184 27aa          clr   r26
000185 27bb          clr   r27
                 __long_delay0:
000186 9711          sbiw  r26,1         ;2 cycles
000187 f7f1          brne  __long_delay0 ;2 cycles
000188 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
000189 93aa      	ST   -Y,R26
00018a 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00018b b3a4          in    r26,__lcd_direction
00018c 6fa7          ori   r26,0xf7                ;set as output
00018d bba4          out   __lcd_direction,r26
00018e b3b5          in    r27,__lcd_port
00018f 70bf          andi  r27,0xf
000190 81a8          ld    r26,y
000191 940e 010b 	CALL __lcd_write_nibble_G100
000193 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000194 c02b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000195 93aa      	ST   -Y,R26
000196 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000197 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
000198 8078      	LDD  R7,Y+0
000199 81e8      	LD   R30,Y
00019a 58e0      	SUBI R30,-LOW(128)
                +
00019b 93e0 0174+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00019d 81e8      	LD   R30,Y
00019e 54e0      	SUBI R30,-LOW(192)
                +
00019f 93e0 0175+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001a1 d020      	RCALL SUBOPT_0x0
0001a2 d01f      	RCALL SUBOPT_0x0
0001a3 d01e      	RCALL SUBOPT_0x0
0001a4 dfdf      	RCALL __long_delay_G100
0001a5 e2a0      	LDI  R26,LOW(32)
0001a6 dfe2      	RCALL __lcd_init_write_G100
0001a7 dfdc      	RCALL __long_delay_G100
0001a8 e2a8      	LDI  R26,LOW(40)
0001a9 d01c      	RCALL SUBOPT_0x1
0001aa e0a4      	LDI  R26,LOW(4)
0001ab d01a      	RCALL SUBOPT_0x1
0001ac e8a5      	LDI  R26,LOW(133)
0001ad d018      	RCALL SUBOPT_0x1
0001ae b3a4          in    r26,__lcd_direction
0001af 70af          andi  r26,0xf                 ;set as input
0001b0 bba4          out   __lcd_direction,r26
0001b1 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001b2 940e 012d 	CALL _lcd_read_byte0_G100
0001b4 30e5      	CPI  R30,LOW(0x5)
0001b5 f011      	BREQ _0x200000B
0001b6 e0e0      	LDI  R30,LOW(0)
0001b7 c008      	RJMP _0x2020001
                 _0x200000B:
0001b8 940e 00fa 	CALL __lcd_ready
0001ba e0a6      	LDI  R26,LOW(6)
0001bb 940e 0115 	CALL __lcd_write_data
0001bd 940e 0146 	CALL _lcd_clear
0001bf e0e1      	LDI  R30,LOW(1)
                 _0x2020001:
0001c0 9621      	ADIW R28,1
0001c1 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _over_step:
00016a           	.BYTE 0x4
                 _period:
00016e           	.BYTE 0x4
                 __base_y_G100:
000172           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0001c2 940e 0184 	CALL __long_delay_G100
0001c4 e3a0      	LDI  R26,LOW(48)
0001c5 cfc3      	RJMP __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001c6 940e 0115 	CALL __lcd_write_data
0001c8 940c 0184 	JMP  __long_delay_G100
                 
                 
                 	.CSEG
                 __ADDD12:
0001ca 0fea      	ADD  R30,R26
0001cb 1ffb      	ADC  R31,R27
0001cc 1f68      	ADC  R22,R24
0001cd 1f79      	ADC  R23,R25
0001ce 9508      	RET
                 
                 __ANEGD1:
0001cf 95f0      	COM  R31
0001d0 9560      	COM  R22
0001d1 9570      	COM  R23
0001d2 95e1      	NEG  R30
0001d3 4fff      	SBCI R31,-1
0001d4 4f6f      	SBCI R22,-1
0001d5 4f7f      	SBCI R23,-1
0001d6 9508      	RET
                 
                 __CWD1:
0001d7 2f6f      	MOV  R22,R31
0001d8 0f66      	ADD  R22,R22
0001d9 0b66      	SBC  R22,R22
0001da 2f76      	MOV  R23,R22
0001db 9508      	RET
                 
                 __MULD12U:
0001dc 9f7a      	MUL  R23,R26
0001dd 2d70      	MOV  R23,R0
0001de 9f6b      	MUL  R22,R27
0001df 0d70      	ADD  R23,R0
0001e0 9ff8      	MUL  R31,R24
0001e1 0d70      	ADD  R23,R0
0001e2 9fe9      	MUL  R30,R25
0001e3 0d70      	ADD  R23,R0
0001e4 9f6a      	MUL  R22,R26
0001e5 2d60      	MOV  R22,R0
0001e6 0d71      	ADD  R23,R1
0001e7 9ffb      	MUL  R31,R27
0001e8 0d60      	ADD  R22,R0
0001e9 1d71      	ADC  R23,R1
0001ea 9fe8      	MUL  R30,R24
0001eb 0d60      	ADD  R22,R0
0001ec 1d71      	ADC  R23,R1
0001ed 2788      	CLR  R24
0001ee 9ffa      	MUL  R31,R26
0001ef 2df0      	MOV  R31,R0
0001f0 0d61      	ADD  R22,R1
0001f1 1f78      	ADC  R23,R24
0001f2 9feb      	MUL  R30,R27
0001f3 0df0      	ADD  R31,R0
0001f4 1d61      	ADC  R22,R1
0001f5 1f78      	ADC  R23,R24
0001f6 9fea      	MUL  R30,R26
0001f7 2de0      	MOV  R30,R0
0001f8 0df1      	ADD  R31,R1
0001f9 1f68      	ADC  R22,R24
0001fa 1f78      	ADC  R23,R24
0001fb 9508      	RET
                 
                 __MULD12:
0001fc d029      	RCALL __CHKSIGND
0001fd dfde      	RCALL __MULD12U
0001fe f40e      	BRTC __MULD121
0001ff dfcf      	RCALL __ANEGD1
                 __MULD121:
000200 9508      	RET
                 
                 __DIVD21U:
000201 933f      	PUSH R19
000202 934f      	PUSH R20
000203 935f      	PUSH R21
000204 2400      	CLR  R0
000205 2411      	CLR  R1
000206 2744      	CLR  R20
000207 2755      	CLR  R21
000208 e230      	LDI  R19,32
                 __DIVD21U1:
000209 0faa      	LSL  R26
00020a 1fbb      	ROL  R27
00020b 1f88      	ROL  R24
00020c 1f99      	ROL  R25
00020d 1c00      	ROL  R0
00020e 1c11      	ROL  R1
00020f 1f44      	ROL  R20
000210 1f55      	ROL  R21
000211 1a0e      	SUB  R0,R30
000212 0a1f      	SBC  R1,R31
000213 0b46      	SBC  R20,R22
000214 0b57      	SBC  R21,R23
000215 f428      	BRCC __DIVD21U2
000216 0e0e      	ADD  R0,R30
000217 1e1f      	ADC  R1,R31
000218 1f46      	ADC  R20,R22
000219 1f57      	ADC  R21,R23
00021a c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00021b 60a1      	SBR  R26,1
                 __DIVD21U3:
00021c 953a      	DEC  R19
00021d f759      	BRNE __DIVD21U1
00021e 01fd      	MOVW R30,R26
00021f 01bc      	MOVW R22,R24
000220 01d0      	MOVW R26,R0
000221 01ca      	MOVW R24,R20
000222 915f      	POP  R21
000223 914f      	POP  R20
000224 913f      	POP  R19
000225 9508      	RET
                 
                 __CHKSIGND:
000226 94e8      	CLT
000227 ff77      	SBRS R23,7
000228 c002      	RJMP __CHKSD1
000229 dfa5      	RCALL __ANEGD1
00022a 9468      	SET
                 __CHKSD1:
00022b ff97      	SBRS R25,7
00022c c00b      	RJMP __CHKSD2
00022d 2400      	CLR  R0
00022e 95a0      	COM  R26
00022f 95b0      	COM  R27
000230 9580      	COM  R24
000231 9590      	COM  R25
000232 9611      	ADIW R26,1
000233 1d80      	ADC  R24,R0
000234 1d90      	ADC  R25,R0
000235 f800      	BLD  R0,0
000236 9403      	INC  R0
000237 fa00      	BST  R0,0
                 __CHKSD2:
000238 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  27 r1 :  13 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   4 r20:   7 r21:   6 r22:  33 r23:  28 
r24:  26 r25:  13 r26:  73 r27:  23 r28:   4 r29:   1 r30:  87 r31:  36 
x  :   4 y  :  59 z  :   8 
Registers used: 22 out of 35 (62.9%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  15 add   :  13 
adiw  :   4 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  30 
cbi   :  12 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   7 
cp    :   1 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  14 inc   :   3 jmp   :  25 ld    :  26 ldd   :   7 ldi   :  46 
lds   :  12 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  13 movw  :   9 
mul   :  10 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   2 
ori   :   4 out   :  20 pop   :   5 push  :   5 rcall :  25 ret   :  18 
reti  :   2 rjmp  :  11 rol   :   7 ror   :   0 sbc   :   4 sbci  :   7 
sbi   :   9 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   1 sbrc  :   1 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  29 std   :   2 sts   :  10 sub   :   1 subi  :   5 swap  :   2 
tst   :   0 wdr   :   0 
Instructions used: 59 out of 116 (50.9%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000472   1112     26   1138   16384   6.9%
[.dseg] 0x000060 0x000176      0     22     22    1024   2.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
