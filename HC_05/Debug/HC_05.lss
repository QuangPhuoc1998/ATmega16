
HC_05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000020a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079d  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00000a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000345  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033d  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000252  00000000  00000000  00001895  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ae7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:


int main(void)
{
    // chuong trinh con
	sbi(DDRB, 0);
  7c:	b8 9a       	sbi	0x17, 0	; 23
	UART_init(9600);
  7e:	60 e8       	ldi	r22, 0x80	; 128
  80:	75 e2       	ldi	r23, 0x25	; 37
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 75 00 	call	0xea	; 0xea <UART_init>
	sei();
  8a:	78 94       	sei
  8c:	ff cf       	rjmp	.-2      	; 0x8c <main+0x10>

0000008e <__vector_11>:
    while (1) 
    {
    }
}
ISR (USART_RXC_vect)
{
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	2f 93       	push	r18
  9a:	3f 93       	push	r19
  9c:	4f 93       	push	r20
  9e:	5f 93       	push	r21
  a0:	6f 93       	push	r22
  a2:	7f 93       	push	r23
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	af 93       	push	r26
  aa:	bf 93       	push	r27
  ac:	ef 93       	push	r30
  ae:	ff 93       	push	r31
	static unsigned char u;
	u = UART_RxChar();
  b0:	0e 94 a3 00 	call	0x146	; 0x146 <UART_RxChar>
  b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(u == '1')
  b8:	81 33       	cpi	r24, 0x31	; 49
  ba:	09 f4       	brne	.+2      	; 0xbe <__vector_11+0x30>
	{
		sbi(PORTB, 0);
  bc:	c0 9a       	sbi	0x18, 0	; 24
	}
	if(u == '0')
  be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  c2:	80 33       	cpi	r24, 0x30	; 48
  c4:	09 f4       	brne	.+2      	; 0xc8 <__vector_11+0x3a>
	{
		cbi(PORTB, 0);
  c6:	c0 98       	cbi	0x18, 0	; 24
	}
}
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	7f 91       	pop	r23
  d6:	6f 91       	pop	r22
  d8:	5f 91       	pop	r21
  da:	4f 91       	pop	r20
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <UART_init>:
#include "UART.h"

#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)
void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN)| (1 << RXCIE);/* Turn on transmission and reception */
  ea:	2a b1       	in	r18, 0x0a	; 10
  ec:	28 69       	ori	r18, 0x98	; 152
  ee:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
  f0:	20 b5       	in	r18, 0x20	; 32
  f2:	26 68       	ori	r18, 0x86	; 134
  f4:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
  f6:	dc 01       	movw	r26, r24
  f8:	cb 01       	movw	r24, r22
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	aa 1f       	adc	r26, r26
 100:	bb 1f       	adc	r27, r27
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	aa 1f       	adc	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	9c 01       	movw	r18, r24
 10c:	ad 01       	movw	r20, r26
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	44 1f       	adc	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	44 1f       	adc	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	74 e2       	ldi	r23, 0x24	; 36
 122:	84 ef       	ldi	r24, 0xF4	; 244
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 a7 00 	call	0x14e	; 0x14e <__udivmodsi4>
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	82 0f       	add	r24, r18
 12e:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
 130:	da 01       	movw	r26, r20
 132:	c9 01       	movw	r24, r18
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	a1 09       	sbc	r26, r1
 138:	b1 09       	sbc	r27, r1
 13a:	89 2f       	mov	r24, r25
 13c:	9a 2f       	mov	r25, r26
 13e:	ab 2f       	mov	r26, r27
 140:	bb 27       	eor	r27, r27
 142:	80 bd       	out	0x20, r24	; 32
 144:	08 95       	ret

00000146 <UART_RxChar>:
}

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
 146:	5f 9b       	sbis	0x0b, 7	; 11
 148:	fe cf       	rjmp	.-4      	; 0x146 <UART_RxChar>
	return(UDR);			/* Return the byte*/
 14a:	8c b1       	in	r24, 0x0c	; 12
}
 14c:	08 95       	ret

0000014e <__udivmodsi4>:
 14e:	a1 e2       	ldi	r26, 0x21	; 33
 150:	1a 2e       	mov	r1, r26
 152:	aa 1b       	sub	r26, r26
 154:	bb 1b       	sub	r27, r27
 156:	fd 01       	movw	r30, r26
 158:	0d c0       	rjmp	.+26     	; 0x174 <__udivmodsi4_ep>

0000015a <__udivmodsi4_loop>:
 15a:	aa 1f       	adc	r26, r26
 15c:	bb 1f       	adc	r27, r27
 15e:	ee 1f       	adc	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	a2 17       	cp	r26, r18
 164:	b3 07       	cpc	r27, r19
 166:	e4 07       	cpc	r30, r20
 168:	f5 07       	cpc	r31, r21
 16a:	20 f0       	brcs	.+8      	; 0x174 <__udivmodsi4_ep>
 16c:	a2 1b       	sub	r26, r18
 16e:	b3 0b       	sbc	r27, r19
 170:	e4 0b       	sbc	r30, r20
 172:	f5 0b       	sbc	r31, r21

00000174 <__udivmodsi4_ep>:
 174:	66 1f       	adc	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	88 1f       	adc	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	1a 94       	dec	r1
 17e:	69 f7       	brne	.-38     	; 0x15a <__udivmodsi4_loop>
 180:	60 95       	com	r22
 182:	70 95       	com	r23
 184:	80 95       	com	r24
 186:	90 95       	com	r25
 188:	9b 01       	movw	r18, r22
 18a:	ac 01       	movw	r20, r24
 18c:	bd 01       	movw	r22, r26
 18e:	cf 01       	movw	r24, r30
 190:	08 95       	ret

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
