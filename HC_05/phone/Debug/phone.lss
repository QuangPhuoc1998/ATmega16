
phone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079d  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066b  00000000  00000000  00000a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033d  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000187  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001923  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "main.h"
#include "UART.h"

int main(void)
{
	UART_init(9600);
  6c:	60 e8       	ldi	r22, 0x80	; 128
  6e:	75 e2       	ldi	r23, 0x25	; 37
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_init>
    cbi(DDRB, 0);
  78:	b8 98       	cbi	0x17, 0	; 23
	cbi(DDRB, 1);
  7a:	b9 98       	cbi	0x17, 1	; 23
    while (1) 
    {
		if(bit_is_clear(PINB, 0))
  7c:	b0 99       	sbic	0x16, 0	; 22
  7e:	05 c0       	rjmp	.+10     	; 0x8a <main+0x1e>
		{
			while(bit_is_clear(PINB, 0));
  80:	b0 9b       	sbis	0x16, 0	; 22
  82:	fe cf       	rjmp	.-4      	; 0x80 <main+0x14>
			UART_TxChar('1');
  84:	81 e3       	ldi	r24, 0x31	; 49
  86:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_TxChar>
		}
		if(bit_is_clear(PINB, 1))
  8a:	b1 99       	sbic	0x16, 1	; 22
  8c:	f7 cf       	rjmp	.-18     	; 0x7c <main+0x10>
		{
			while(bit_is_clear(PINB, 1));
  8e:	b1 9b       	sbis	0x16, 1	; 22
  90:	fe cf       	rjmp	.-4      	; 0x8e <main+0x22>
			UART_TxChar('0');
  92:	80 e3       	ldi	r24, 0x30	; 48
  94:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_TxChar>
  98:	f1 cf       	rjmp	.-30     	; 0x7c <main+0x10>

0000009a <UART_init>:

void UART_Read_Text(char *Output, unsigned int length)
{
	for(int i=0;i<length;i++)
	Output[i] = UART_RxChar();
}
  9a:	2a b1       	in	r18, 0x0a	; 10
  9c:	28 69       	ori	r18, 0x98	; 152
  9e:	2a b9       	out	0x0a, r18	; 10
  a0:	20 b5       	in	r18, 0x20	; 32
  a2:	26 68       	ori	r18, 0x86	; 134
  a4:	20 bd       	out	0x20, r18	; 32
  a6:	dc 01       	movw	r26, r24
  a8:	cb 01       	movw	r24, r22
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	aa 1f       	adc	r26, r26
  b0:	bb 1f       	adc	r27, r27
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	aa 1f       	adc	r26, r26
  b8:	bb 1f       	adc	r27, r27
  ba:	9c 01       	movw	r18, r24
  bc:	ad 01       	movw	r20, r26
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	44 1f       	adc	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	44 1f       	adc	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	74 e2       	ldi	r23, 0x24	; 36
  d2:	84 ef       	ldi	r24, 0xF4	; 244
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 7f 00 	call	0xfe	; 0xfe <__udivmodsi4>
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	82 0f       	add	r24, r18
  de:	89 b9       	out	0x09, r24	; 9
  e0:	da 01       	movw	r26, r20
  e2:	c9 01       	movw	r24, r18
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	a1 09       	sbc	r26, r1
  e8:	b1 09       	sbc	r27, r1
  ea:	89 2f       	mov	r24, r25
  ec:	9a 2f       	mov	r25, r26
  ee:	ab 2f       	mov	r26, r27
  f0:	bb 27       	eor	r27, r27
  f2:	80 bd       	out	0x20, r24	; 32
  f4:	08 95       	ret

000000f6 <UART_TxChar>:

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <UART_TxChar>
	UDR = ch ;
  fa:	8c b9       	out	0x0c, r24	; 12
  fc:	08 95       	ret

000000fe <__udivmodsi4>:
  fe:	a1 e2       	ldi	r26, 0x21	; 33
 100:	1a 2e       	mov	r1, r26
 102:	aa 1b       	sub	r26, r26
 104:	bb 1b       	sub	r27, r27
 106:	fd 01       	movw	r30, r26
 108:	0d c0       	rjmp	.+26     	; 0x124 <__udivmodsi4_ep>

0000010a <__udivmodsi4_loop>:
 10a:	aa 1f       	adc	r26, r26
 10c:	bb 1f       	adc	r27, r27
 10e:	ee 1f       	adc	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	a2 17       	cp	r26, r18
 114:	b3 07       	cpc	r27, r19
 116:	e4 07       	cpc	r30, r20
 118:	f5 07       	cpc	r31, r21
 11a:	20 f0       	brcs	.+8      	; 0x124 <__udivmodsi4_ep>
 11c:	a2 1b       	sub	r26, r18
 11e:	b3 0b       	sbc	r27, r19
 120:	e4 0b       	sbc	r30, r20
 122:	f5 0b       	sbc	r31, r21

00000124 <__udivmodsi4_ep>:
 124:	66 1f       	adc	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	88 1f       	adc	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	1a 94       	dec	r1
 12e:	69 f7       	brne	.-38     	; 0x10a <__udivmodsi4_loop>
 130:	60 95       	com	r22
 132:	70 95       	com	r23
 134:	80 95       	com	r24
 136:	90 95       	com	r25
 138:	9b 01       	movw	r18, r22
 13a:	ac 01       	movw	r20, r24
 13c:	bd 01       	movw	r22, r26
 13e:	cf 01       	movw	r24, r30
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
